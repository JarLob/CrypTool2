<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AnotherEditor</name>
    </assembly>
    <members>
        <member name="T:AnotherEditor.AnotherEditorPresentation">
            <summary>
            Interaction logic for AnotherEditorPresentation.xaml
            </summary>
            <summary>
            Helper methods for the command bindings. 
            </summary>
            <summary>
            AnotherEditorPresentation
            </summary>
        </member>
        <member name="M:AnotherEditor.AnotherEditorPresentation.#ctor(AnotherEditor.DragDrop.ProjectManager)">
            <summary>
            Initializes a new instance of the <see cref="T:AnotherEditor.AnotherEditorPresentation"/> class.
            </summary>
            <param name="ProjectManager">The project manager.</param>
        </member>
        <member name="M:AnotherEditor.AnotherEditorPresentation.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:AnotherEditor.AnotherEditorPresentation.AnotherEditor">
            <summary>
            Gets or sets another editor.
            </summary>
            <value>Another editor.</value>
        </member>
        <member name="T:DragDrop.Thumbs.VisualElement">
            <summary>
            This is the "optical" base class for all plugis. It's based on VisualElementStyle defined 
            VisualElement.xaml
            </summary>
        </member>
        <member name="T:AnotherEditor.DragDrop.Interfaces.IDragable">
            <summary>
            Indicates that this element is child of a ContentContrel that implements IDragContent and
            is used for resize operations. This content Control is the child of the workspace canvas. 
            </summary>
        </member>
        <member name="P:AnotherEditor.DragDrop.Interfaces.IDragable.LastExpandedHeight">
            <summary>
            Gets or sets the last height of the expanded.
            </summary>
            <value>The last height of the expanded.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.Interfaces.IDragable.LastExpandedWidth">
            <summary>
            Gets or sets the last width of the expanded.
            </summary>
            <value>The last width of the expanded.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.Interfaces.IDragable.DragContent">
            <summary>
            Gets the content of the drag.
            </summary>
            <value>The content of the drag.</value>
        </member>
        <member name="M:DragDrop.Thumbs.VisualElement.TitleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Titles the changed.
            </summary>
            <param name="d">The d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:DragDrop.Thumbs.VisualElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DragDrop.Thumbs.VisualElement"/> class.
            </summary>
        </member>
        <member name="F:DragDrop.Thumbs.VisualElement.isQuickWatchPresentationActive">
            <summary>
            This property is set by VisualElement itself an read by ProjectManager to determine if
            QuickWatchPresentation can be opened in a tab if QuickWatchPresentation equals Presentation. 
            An element in WPF can only have one parent. So if a plugin uses a presentation property twice
            it can not be displayed in two places. 
            </summary>
            <value>
            	<c>true</c> if this instance is quick watch presentation active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:DragDrop.Thumbs.VisualElement.VisualElement_MouseEnter(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Show little glow effect on mouse enter. 
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:DragDrop.Thumbs.VisualElement.setColor(Cryptool.PluginBase.IPlugin)">
            <summary>
            Sets the standard background color for the given plugin type.
            </summary>
            <param name="plugin">The plugin.</param>
        </member>
        <member name="M:DragDrop.Thumbs.VisualElement.updateQuickWatchItems">
            <summary>
            Read new QuickWatchItmes based on the current DisplayLevel. 
            </summary>
        </member>
        <member name="M:DragDrop.Thumbs.VisualElement.refreshQuickWatchData">
            <summary>
            Creates events to cause quickWatch data update.  
            </summary>
        </member>
        <member name="M:DragDrop.Thumbs.VisualElement.Plugin_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles the QuickWatch event of the Plugin control and updates the appropriate 
            QuickWatchItem.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:DragDrop.Thumbs.VisualElement.OnGuiLogMessage(System.Object,Cryptool.PluginBase.GuiLogEventArgs)">
            <summary>
            Checks the log-messages a plugins sends while chain-raun is active. If a message indicates
            a warning or an error the visuals-color is switched to yellow/red. 
            </summary>
            <param name="sender">The sender.</param>
            <param name="arg">The <see cref="T:Cryptool.PluginBase.GuiLogEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:DragDrop.Thumbs.VisualElement.RemoveLogMessageMarkers">
            <summary>
            Removes the log message markers.
            </summary>
        </member>
        <member name="M:DragDrop.Thumbs.VisualElement.Initialize">
            <summary>
            Init events after plugin was initialized
            Call-order: WorkspaceManager->Add/Delete ElementCommand->BaseElement->this
            </summary>
        </member>
        <member name="M:DragDrop.Thumbs.VisualElement.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources
            Call-order: WorkspaceManager->Add/Delete ElementCommand->BaseElement->this
            </summary>
        </member>
        <member name="M:DragDrop.Thumbs.VisualElement.OnPluginStatusChanged(Cryptool.PluginBase.IPlugin,Cryptool.PluginBase.StatusEventArgs)">
            <summary>
            Called when [plugin status changed]. This is used to display new icons for plugins.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:Cryptool.PluginBase.StatusEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:DragDrop.Thumbs.VisualElement.OnPluginProgress(System.Object,Cryptool.PluginBase.PluginProgressEventArgs)">
            <summary>
            Called when [plugin progress] changes. Display the progress in visual by expanding the 
            progress-rectangle.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:Cryptool.PluginBase.PluginProgressEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:DragDrop.Thumbs.VisualElement.SetTransparency(System.Double)">
            <summary>
            This method is called from execution manager if the element won't be executed
            in this run. This is for end-user convenience to show that this element won't
            be touched in the cuurent chain-run.
            </summary>
            <param name="value">The value for tranparency.</param>
        </member>
        <member name="M:DragDrop.Thumbs.VisualElement.OnApplyTemplate">
            <summary>
            This method is executed after template was apllied to visual. Here we get all the needed objects from
            xaml and add the conntectors(I/O) to the element. 
            </summary>
        </member>
        <member name="M:DragDrop.Thumbs.VisualElement.CreateDockPoints">
            <summary>
            Creates the dock points (I/Os of the plugins) based on DockPointLists that 
            have been set by BaseElement. 
            </summary>
        </member>
        <member name="M:DragDrop.Thumbs.VisualElement.updateQuickContainerWithCurrentContent">
            <summary>
            Read content from DicQuickWatchAttributes for the selected entry
            and set Visibility of items like arrows and header text.
            </summary>
        </member>
        <member name="M:DragDrop.Thumbs.VisualElement.CanSwitchToLevel(Cryptool.PluginBase.DisplayLevel)">
            <summary>
            Determines whether this instance [can switch to level] the specified level.
            </summary>
            <param name="level">The level.</param>
            <returns>
            	<c>true</c> if this instance [can switch to level] the specified level; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DragDrop.Thumbs.VisualElement.rightArrow_MouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Move quickwatch content "right"
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:DragDrop.Thumbs.VisualElement.leftArrow_MouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Move quickwatch content "left"
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:DragDrop.Thumbs.VisualElement.textBlockDownscaler_PreviewMouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Animations done while shrinking the visual after click on &gt;&gt;&lt;&lt;
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:DragDrop.Thumbs.VisualElement.textBlockDownscalerAnimation_Completed(System.Object,System.EventArgs)">
            <summary>
            Reset the DP after animation. If not DP can't be set using tb.Visibilty = Visibility.x
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:DragDrop.Thumbs.VisualElement.textBlockExpanderAnimation_Completed(System.Object,System.EventArgs)">
            <summary>
            Reset the DP after animation. If not DP can't be set using tb.Visibilty = Visibility.x
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:DragDrop.Thumbs.VisualElement.textBlockExpander_PreviewMouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Animations done while expanding the visual after click on &lt;&lt;&gt;&gt;
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:DragDrop.Thumbs.VisualElement.TickExpand(System.Object)">
            <summary>
            This tick is used, because MaxWidth can't be set before animation(it would override it).
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:DragDrop.Thumbs.VisualElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
            <summary>
            Raises the <see cref="E:System.Windows.FrameworkElement.SizeChanged"/> event, using the specified information as part of the eventual event data.
            </summary>
            <param name="sizeInfo">Details of the old and new size involved in the change.</param>
        </member>
        <member name="M:DragDrop.Thumbs.VisualElement.dockPointCanvas_SizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Handles the SizeChanged event of the dockPointCanvas control. If the visible canvas, 
            that is the background you see for every element, size changes we have to move the 
            DockPointsOut to the new value using Canvas.SetLeft.
            
            The ElementName and TextBoxPreview Sizs cant be bound to RenderSize, because this is not 
            a dependency property.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.SizeChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:DragDrop.Thumbs.VisualElement.GetDockPointCoordinates(System.Windows.Shapes.Path)">
            <summary>
            Calculate the workspace coordinates for a given visual dockPoint.
            </summary>
            <param name="pathDockPoint"></param>
            <returns>The canvas position of this dock point.</returns>
        </member>
        <member name="M:DragDrop.Thumbs.VisualElement.OnPropertyChanged(System.String)">
            <summary>
            Called when [property changed].
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="E:DragDrop.Thumbs.VisualElement.OnGuiLogNotificationOccured">
            <summary>
            Occurs when [on GUI log notification occured].
            </summary>
        </member>
        <member name="P:DragDrop.Thumbs.VisualElement.ListDockPointsIn">
            <summary>
            Gets or sets the list dock points in.
            </summary>
            <value>The list dock points in.</value>
        </member>
        <member name="P:DragDrop.Thumbs.VisualElement.ListDockPointsOut">
            <summary>
            Gets or sets the list dock points out.
            </summary>
            <value>The list dock points out.</value>
        </member>
        <member name="P:DragDrop.Thumbs.VisualElement.ListDynamicProperties">
            <summary>
            Gets or sets the list dynamic properties.
            </summary>
            <value>The list dynamic properties.</value>
        </member>
        <member name="P:DragDrop.Thumbs.VisualElement.Settings">
            <summary>
            Just a dummy here. Setting is used for all other dragable classes that the 
            editor supports. See InfoElement.cs for example. 
            </summary>
            <value>The settings.</value>
        </member>
        <member name="P:DragDrop.Thumbs.VisualElement.LastExpandedHeight">
            <summary>
            Gets or sets the last height of the expanded.
            </summary>
            <value>The last height of the expanded.</value>
        </member>
        <member name="P:DragDrop.Thumbs.VisualElement.LastExpandedWidth">
            <summary>
            Gets or sets the last width of the expanded.
            </summary>
            <value>The last width of the expanded.</value>
        </member>
        <member name="P:DragDrop.Thumbs.VisualElement.ParentBaseElement">
            <summary>
            Gets the parent base element.
            </summary>
            <value>The parent base element.</value>
        </member>
        <member name="P:DragDrop.Thumbs.VisualElement.DragContent">
            <summary>
            Dummy - not used here. 
            </summary>
            <value>The content of the drag.</value>
        </member>
        <member name="P:DragDrop.Thumbs.VisualElement.IsSelected">
            <summary>
            Used in xaml template to highlight selected elements
            </summary>
        </member>
        <member name="P:DragDrop.Thumbs.VisualElement.IsReadOnly">
            <summary>
            Used to rename elements on workspace
            </summary>
        </member>
        <member name="P:DragDrop.Thumbs.VisualElement.IsQuickWatchPresentationActive">
            <summary>
            Gets or sets a value indicating whether this instance is quick watch presentation active.
            </summary>
            <value>
            	<c>true</c> if this instance is quick watch presentation active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DragDrop.Thumbs.VisualElement.IsPresentationTabOpen">
            <summary>
            Is set by ProjectManager to signal that tab with presentation is open and that Visual can not open 
            presentation in QuickWatch mode. 
            </summary>
        </member>
        <member name="P:DragDrop.Thumbs.VisualElement.CurrentQuickWatch">
            <summary>
            Gets or sets the current quick watch position.
            </summary>
            <value>The current quick watch.</value>
        </member>
        <member name="P:DragDrop.Thumbs.VisualElement.IsRunning">
            <summary>
            Gets or sets a value indicating whether this instance is running.
            </summary>
            <value>
            	<c>true</c> if this instance is running; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DragDrop.Thumbs.VisualElement.Progress">
            <summary>
            This value is data bound in XAML to expand the green rectangle that represents the 
            plugin progress. 
            </summary>
            <value>The progress.</value>
        </member>
        <member name="P:DragDrop.Thumbs.VisualElement.Plugin">
            <summary>
            Gets or sets the plugin.
            </summary>
            <value>The plugin.</value>
        </member>
        <member name="P:DragDrop.Thumbs.VisualElement.DisplayLevel">
            <summary>
            Gets or sets the display level.
            </summary>
            <value>The display level.</value>
        </member>
        <member name="P:DragDrop.Thumbs.VisualElement.Color">
            <summary>
            Gets or sets the color used in xaml-template.
            </summary>
            <value>The color.</value>
        </member>
        <member name="P:DragDrop.Thumbs.VisualElement.GlowColor">
            <summary>
            This is a workaround for OuterGlowBitmapEffect data binding in xaml file. For some 
            unkown reason it does not work with Color directly.
            </summary>
        </member>
        <member name="P:DragDrop.Thumbs.VisualElement.Title">
            <summary>
            Gets or sets the title. This is the title of each element you can see/rename on workspace.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:DragDrop.Thumbs.VisualElement.Icon">
            <summary>
            Gets or sets the icon.
            </summary>
            <value>The icon.</value>
        </member>
        <member name="P:DragDrop.Thumbs.VisualElement.IsExpanded">
            <summary>
            Gets or sets a value indicating whether this instance is expanded.
            </summary>
            <value>
            	<c>true</c> if this instance is expanded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:DragDrop.Thumbs.VisualElement.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:DragDrop.Thumbs.QuickWatchAttributeContainer">
            <summary>
            Container elementt to handle the quickWatch data of the plugins. 
            </summary>
        </member>
        <member name="F:DragDrop.Thumbs.QuickWatchAttributeContainer.DynProp">
            <summary>
            Dynamic property is only set if plugins uses dynamic Properties. PInfo is null in this case. 
            </summary>
        </member>
        <member name="F:DragDrop.Thumbs.QuickWatchAttributeContainer.PInfo">
            <summary>
            The PropertyInformation. 
            </summary>
        </member>
        <member name="F:DragDrop.Thumbs.QuickWatchAttributeContainer.PropertyInfoAttribute">
            <summary>
            The PropertyInfoAttribute. 
            </summary>
        </member>
        <member name="F:DragDrop.Thumbs.QuickWatchAttributeContainer.Value">
            <summary>
            The value to display. 
            </summary>
        </member>
        <member name="F:DragDrop.Thumbs.QuickWatchAttributeContainer.Description">
            <summary>
            Description.
            </summary>
        </member>
        <member name="M:DragDrop.Thumbs.QuickWatchAttributeContainer.#ctor(System.Reflection.PropertyInfo,Cryptool.PluginBase.PropertyInfoAttribute,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DragDrop.Thumbs.QuickWatchAttributeContainer"/> class.
            </summary>
            <param name="pInfo">The p info.</param>
            <param name="propertyInfoAttribute">The property info attribute.</param>
            <param name="value">The value.</param>
            <param name="description">The description.</param>
        </member>
        <member name="T:DragDrop.Commands.AddElementCommand">
            <summary>
            Adds IPlugins to workspace.
            </summary>
        </member>
        <member name="T:DragDrop.Interfaces.IWorkspaceCommand">
            <summary>
            Interface for custom commands executed by undomanager
            </summary>
        </member>
        <member name="M:DragDrop.Interfaces.IWorkspaceCommand.Execute">
            <summary>
            Executes this instance.
            </summary>
        </member>
        <member name="M:DragDrop.Interfaces.IWorkspaceCommand.Undo">
            <summary>
            Undoes this instance.
            </summary>
        </member>
        <member name="M:DragDrop.Interfaces.IWorkspaceCommand.Redo">
            <summary>
            Redoes this instance.
            </summary>
        </member>
        <member name="E:DragDrop.Interfaces.IWorkspaceCommand.OnGuiLogNotificationOccured">
            <summary>
            Occurs when [on GUI log notification occured].
            </summary>
        </member>
        <member name="P:DragDrop.Interfaces.IWorkspaceCommand.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="M:DragDrop.Commands.AddElementCommand.#ctor(DragDrop.Interfaces.IWorkspaceManager,DragDrop.Interfaces.IBaseElement)">
            <summary>
            Initializes a new instance of the <see cref="T:DragDrop.Commands.AddElementCommand"/> class.
            </summary>
            <param name="WorkspaceManager">The workspace manager.</param>
            <param name="Element">The element.</param>
        </member>
        <member name="M:DragDrop.Commands.AddElementCommand.Execute">
            <summary>
            Executes this instance.
            </summary>
        </member>
        <member name="M:DragDrop.Commands.AddElementCommand.Undo">
            <summary>
            Undoes this instance.
            </summary>
        </member>
        <member name="M:DragDrop.Commands.AddElementCommand.Redo">
            <summary>
            Redoes this instance.
            </summary>
        </member>
        <member name="E:DragDrop.Commands.AddElementCommand.OnGuiLogNotificationOccured">
            <summary>
            Occurs when [on GUI log notification occured].
            </summary>
        </member>
        <member name="P:DragDrop.Commands.AddElementCommand.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="T:DragDrop.Interfaces.IUndoManager">
            <summary>
            Command manager handling the IWorkspaceCommands 
            </summary>
        </member>
        <member name="M:DragDrop.Interfaces.IUndoManager.Execute(DragDrop.Interfaces.IWorkspaceCommand)">
            <summary>
            This method puts the command to the Undo stack and then executes it.
            </summary>
            <param name="command">The command to be executed.</param>
        </member>
        <member name="M:DragDrop.Interfaces.IUndoManager.Undo">
            <summary>
            Rollback the last command.
            </summary>
        </member>
        <member name="M:DragDrop.Interfaces.IUndoManager.Redo">
            <summary>
            Rollback the last undone command.
            </summary>
        </member>
        <member name="M:DragDrop.Interfaces.IUndoManager.ClearUndoHistory">
            <summary>
            Clear the undo history.
            </summary>
        </member>
        <member name="M:DragDrop.Interfaces.IUndoManager.ClearRedoHistory">
            <summary>
            Clear the redo history.
            </summary>
        </member>
        <member name="M:DragDrop.Interfaces.IUndoManager.ClearHistory">
            <summary>
            Clear all the undo and redo history.
            </summary>
        </member>
        <member name="P:DragDrop.Interfaces.IUndoManager.ChangesSaved">
            <summary>
            Gets or sets a value indicating whether [changes saved].
            </summary>
            <value><c>true</c> if [changes saved]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IUndoManager.UndoCommands">
            <summary>
            Get the undo commands history.
            </summary>
        </member>
        <member name="P:DragDrop.Interfaces.IUndoManager.RedoCommands">
            <summary>
            Get the redo commands history.
            </summary>
        </member>
        <member name="P:DragDrop.Interfaces.IUndoManager.UndoTitles">
            <summary>
            Get the undo commands titles.
            </summary>
        </member>
        <member name="P:DragDrop.Interfaces.IUndoManager.RedoTitles">
            <summary>
            Get the redo commands titles.
            </summary>
        </member>
        <member name="P:DragDrop.Interfaces.IUndoManager.CanUndo">
            <summary>
             Gets a value indicating whether there is anything that can be undone.
            </summary>
        </member>
        <member name="P:DragDrop.Interfaces.IUndoManager.CanRedo">
            <summary>
            Gets a value indicating whether there is anything that can be rolled forward.
            </summary>
        </member>
        <member name="T:AnotherEditor.Extensions.DispatcherHelper">
            <summary>
            Executes methods/properties based on given dispatcher and method name
            </summary>
        </member>
        <member name="M:AnotherEditor.Extensions.DispatcherHelper.ExecuteMethod(System.Windows.Threading.Dispatcher,System.Object,System.String,System.Object[])">
            <summary>
            Executes the method.
            </summary>
            <param name="dispatcher">The dispatcher.</param>
            <param name="obj">The obj.</param>
            <param name="methodname">The methodname.</param>
            <param name="parameters">The parameters.</param>
            <returns>The return value from the method being invoked.</returns>
        </member>
        <member name="M:AnotherEditor.Extensions.DispatcherHelper.GetProperty(System.Windows.Threading.Dispatcher,System.Object,System.String)">
            <summary>
            Gets the property.
            </summary>
            <param name="dispatcher">The dispatcher.</param>
            <param name="obj">The obj.</param>
            <param name="property">The property.</param>
            <returns>The return value from the property being invoked.</returns>
        </member>
        <member name="M:AnotherEditor.Extensions.DispatcherHelper.SetProperty(System.Windows.Threading.Dispatcher,System.Object,System.String,System.Object[])">
            <summary>
            Sets the property.
            </summary>
            <param name="dispatcher">The dispatcher.</param>
            <param name="obj">The obj.</param>
            <param name="property">The property.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="T:AnotherEditor.Properties.Visuals">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Visuals.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Visuals.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Visuals.add_workspace">
            <summary>
              Looks up a localized string similar to Add workspace.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Visuals.clear_chain_run">
            <summary>
              Looks up a localized string similar to Flush markers of last execution.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Visuals.close">
            <summary>
              Looks up a localized string similar to Close.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Visuals.color">
            <summary>
              Looks up a localized string similar to Color.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Visuals.copy_tab_header_to_clipboard">
            <summary>
              Looks up a localized string similar to Copy to clipboard.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Visuals.delete">
            <summary>
              Looks up a localized string similar to Delete.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Visuals.description">
            <summary>
              Looks up a localized string similar to Description.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Visuals.description_tab">
            <summary>
              Looks up a localized string similar to  (Description).
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Visuals.edit">
            <summary>
              Looks up a localized string similar to Edit.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Visuals.green">
            <summary>
              Looks up a localized string similar to Green.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Visuals.help">
            <summary>
              Looks up a localized string similar to Help.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Visuals.info_creates_cycle">
            <summary>
              Looks up a localized string similar to Connection not possible, this would create a cycle..
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Visuals.info_element_tooltip">
             <summary>
               Looks up a localized string similar to More details 
            about this workflow..
             </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Visuals.mandatory_input">
            <summary>
              Looks up a localized string similar to (mandatory input).
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Visuals.mandatory_output">
            <summary>
              Looks up a localized string similar to (mandatory output).
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Visuals.open">
            <summary>
              Looks up a localized string similar to Open.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Visuals.optional_input">
            <summary>
              Looks up a localized string similar to (optional input).
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Visuals.optional_output">
            <summary>
              Looks up a localized string similar to (optional output).
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Visuals.orange">
            <summary>
              Looks up a localized string similar to Orange.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Visuals.presentation_tab">
            <summary>
              Looks up a localized string similar to  (Presentation).
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Visuals.redo">
            <summary>
              Looks up a localized string similar to Redo.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Visuals.remove_workspace">
            <summary>
              Looks up a localized string similar to Remove workspace.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Visuals.running_title">
            <summary>
              Looks up a localized string similar to  (Running).
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Visuals.save">
            <summary>
              Looks up a localized string similar to Save.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Visuals.save_sub_workspace">
            <summary>
              Looks up a localized string similar to Save subworkspace.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Visuals.set_decrypt_mode">
            <summary>
              Looks up a localized string similar to Decrypt.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Visuals.set_encrypt_mode">
            <summary>
              Looks up a localized string similar to Encrypt.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Visuals.settingGroupMisc">
            <summary>
              Looks up a localized string similar to Miscellaneous.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Visuals.settingMemUsageOff">
            <summary>
              Looks up a localized string similar to Mem usage off.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Visuals.settingMemUsageOff_ToolTip">
            <summary>
              Looks up a localized string similar to Disable display of memory usage of CrypTool.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Visuals.settingMemUsageOn">
            <summary>
              Looks up a localized string similar to Mem usage on.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Visuals.settingMemUsageOn_ToolTip">
            <summary>
              Looks up a localized string similar to Enable display of memory usage of CrypTool.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Visuals.show_description">
            <summary>
              Looks up a localized string similar to Show description.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Visuals.undo">
            <summary>
              Looks up a localized string similar to Undo.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Visuals.unknown">
            <summary>
              Looks up a localized string similar to unknown.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Visuals.yellow">
            <summary>
              Looks up a localized string similar to Yellow.
            </summary>
        </member>
        <member name="T:AnotherEditor.DragDrop.Thumbs.InfoElement">
            <summary>
            Based on ControlTemplate "InfoElement" defined in InfoElement.xaml
            </summary>
        </member>
        <member name="M:AnotherEditor.DragDrop.Thumbs.InfoElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AnotherEditor.DragDrop.Thumbs.InfoElement"/> class.
            </summary>
        </member>
        <member name="M:AnotherEditor.DragDrop.Thumbs.InfoElement.OnApplyTemplate">
            <summary>
            Get parts from template, apply width to parent element, setup events for richTextBox and button
            </summary>
        </member>
        <member name="M:AnotherEditor.DragDrop.Thumbs.InfoElement.btnPrint_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Prints the content of the RichTextBox
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.Thumbs.InfoElement.OnMouseDoubleClick(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Controls.Control.MouseDoubleClick"/> routed event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.Thumbs.InfoElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
            <summary>
            This method is used to restore elements size after workspace loading
            </summary>
            <param name="sizeInfo">Details of the old and new size involved in the change.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.Thumbs.InfoElement.GetXAMLData">
            <summary>
            Gets the XAML data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnotherEditor.DragDrop.Thumbs.InfoElement.SetXAMLData(System.String)">
            <summary>
            Sets the XAML data.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.Thumbs.InfoElement.OnPropertyChanged(System.String)">
            <summary>
            Called when [property changed].
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="E:AnotherEditor.DragDrop.Thumbs.InfoElement.OnAnotherEditorStatusBarTextChanged">
            <summary>
            Occurs when [on another editor status bar text changed].
            </summary>
        </member>
        <member name="P:AnotherEditor.DragDrop.Thumbs.InfoElement.CurrentText">
            <summary>
            Gets or sets the current text.
            </summary>
            <value>The current text.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.Thumbs.InfoElement.CurrentColor">
            <summary>
            Gets or sets the color of the current.
            </summary>
            <value>The color of the current.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.Thumbs.InfoElement.LastExpandedHeight">
            <summary>
            Gets or sets the last height of the expanded.
            </summary>
            <value>The last height of the expanded.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.Thumbs.InfoElement.LastExpandedWidth">
            <summary>
            Gets or sets the last width of the expanded.
            </summary>
            <value>The last width of the expanded.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.Thumbs.InfoElement.IsExpanded">
            <summary>
            Gets or sets a value indicating whether this instance is expanded.
            </summary>
            <value>
            	<c>true</c> if this instance is expanded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:AnotherEditor.DragDrop.Thumbs.InfoElement.IsSelected">
            <summary>
            Gets or sets a value indicating whether this instance is selected.
            </summary>
            <value>
            	<c>true</c> if this instance is selected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:AnotherEditor.DragDrop.Thumbs.InfoElement.DragContent">
            <summary>
            Gets the content of the drag.
            </summary>
            <value>The content of the drag.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.Thumbs.InfoElement.ParentDragDropElement">
            <summary>
            Gets the parent drag drop element.
            </summary>
            <value>The parent drag drop element.</value>
        </member>
        <member name="E:AnotherEditor.DragDrop.Thumbs.InfoElement.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:DragDrop.Interfaces.ILinkManager">
            <summary>
            Determine if two dockPoints can be connected. 
            </summary>
        </member>
        <member name="M:DragDrop.Interfaces.ILinkManager.CanConnect(DragDrop.Interfaces.IConnector,DragDrop.Interfaces.IConnector)">
            <summary>
            Determines whether this instance can connect the specified dock points. 
            </summary>
            <param name="dpo">The dpo.</param>
            <param name="dpi">The dpi.</param>
            <returns>
            	<c>true</c> if this instance can connect the specified dpo; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="E:DragDrop.Interfaces.ILinkManager.OnAnotherEditorStatusBarTextChanged">
            <summary>
            Occurs when [on another editor status bar text changed].
            </summary>
        </member>
        <member name="P:DragDrop.Interfaces.ILinkManager.ElementManager">
            <summary>
            Gets or sets the element manager.
            </summary>
            <value>The element manager.</value>
        </member>
        <member name="T:DragDrop.Interfaces.IPersistenceManager">
            <summary>
            Save and load workspaces and SubWorkspaces
            </summary>
        </member>
        <member name="M:DragDrop.Interfaces.IPersistenceManager.Load(System.String,DragDrop.Interfaces.PersistenceMethod)">
            <summary>
            Loads the specified filename.
            </summary>
            <param name="Filename">The filename.</param>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="M:DragDrop.Interfaces.IPersistenceManager.Save(System.Collections.Generic.List{DragDrop.Interfaces.IWorkspaceManager},System.String,DragDrop.Interfaces.PersistenceMethod)">
            <summary>
            Saves the specified list workspace manager.
            </summary>
            <param name="listWorkspaceManager">The list workspace manager.</param>
            <param name="Filename">The filename.</param>
            <param name="method">The method.</param>
            <returns>true on success else false</returns>
        </member>
        <member name="M:DragDrop.Interfaces.IPersistenceManager.LoadSubWorkspaceQuickInfos">
            <summary>
            Loads the sub workspace quick infos.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DragDrop.Interfaces.IPersistenceManager.CreateSubWorkspace(System.String)">
            <summary>
            Creates the sub workspace.
            </summary>
            <param name="Identifier">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:DragDrop.Interfaces.IPersistenceManager.SaveSubWorkspace(System.Collections.Generic.List{DragDrop.Interfaces.IWorkspaceManager})">
            <summary>
            Saves the sub workspace.
            </summary>
            <param name="listWorkspaceManager">The list workspace manager.</param>
            <returns></returns>
        </member>
        <member name="E:DragDrop.Interfaces.IPersistenceManager.OnAnotherEditorStatusBarTextChanged">
            <summary>
            Occurs when [on another editor status bar text changed].
            </summary>
        </member>
        <member name="T:DragDrop.Interfaces.PersistenceMethod">
            <summary>
            Switch between "normal" and SWS save
            </summary>
        </member>
        <member name="F:DragDrop.Interfaces.PersistenceMethod.WorkspaceList">
            <summary>
            
            </summary>
        </member>
        <member name="F:DragDrop.Interfaces.PersistenceMethod.SubWorkspace">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnotherEditor.DetailedDescription.UserControl1">
            <summary>
            Interaction logic for UserControl1.xaml
            </summary>
            <summary>
            UserControl1
            </summary>
        </member>
        <member name="M:AnotherEditor.DetailedDescription.UserControl1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AnotherEditor.DetailedDescription.UserControl1"/> class.
            </summary>
        </member>
        <member name="M:AnotherEditor.DetailedDescription.UserControl1.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:AnotherEditor.DetailedDescription.UserControl1.Tutorial">
            <summary>
            Gets or sets the tutorial.
            </summary>
            <value>The tutorial.</value>
        </member>
        <member name="T:AnotherEditor.Converter.TabHeaderConverter">
            <summary>
            Used to create data binding for tab elements to title of plugins on workspace.
            </summary>
        </member>
        <member name="M:AnotherEditor.Converter.TabHeaderConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:AnotherEditor.Converter.TabHeaderConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:DragDrop.Commands.DeleteDragableCommand">
            <summary>
            Deletes editor internal (non IPlugin) dragable elements. (Currently only InfoElement)
            </summary>
        </member>
        <member name="M:DragDrop.Commands.DeleteDragableCommand.#ctor(DragDrop.Interfaces.IWorkspaceManager,AnotherEditor.DragDrop.Interfaces.IDragContent)">
            <summary>
            Initializes a new instance of the <see cref="T:DragDrop.Commands.DeleteDragableCommand"/> class.
            </summary>
            <param name="WorkspaceManager">The workspace manager.</param>
            <param name="DragContent">Content of the drag.</param>
        </member>
        <member name="M:DragDrop.Commands.DeleteDragableCommand.Execute">
            <summary>
            Executes this instance.
            </summary>
        </member>
        <member name="M:DragDrop.Commands.DeleteDragableCommand.Undo">
            <summary>
            Undoes this instance.
            </summary>
        </member>
        <member name="M:DragDrop.Commands.DeleteDragableCommand.Redo">
            <summary>
            Redoes this instance.
            </summary>
        </member>
        <member name="E:DragDrop.Commands.DeleteDragableCommand.OnGuiLogNotificationOccured">
            <summary>
            Occurs when [on GUI log notification occured].
            </summary>
        </member>
        <member name="P:DragDrop.Commands.DeleteDragableCommand.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="T:AnotherEditor.SWS.SubWorkspace">
            <summary>
            Interaction logic for SubWorkspacePresentation.xaml
            </summary>
            <summary>
            SubWorkspace
            </summary>
        </member>
        <member name="M:AnotherEditor.SWS.SubWorkspace.#ctor">
            <summary>
            This is just a dummy constructor for compatibility reasons: Used in CrypWin Type.CreateObject();
            to get Icon and description stuff. Editor internal use must use second constructor to provide
            the elements in subwokspace
            </summary>
        </member>
        <member name="M:AnotherEditor.SWS.SubWorkspace.#ctor(AnotherEditor.DragDrop.SubWorkspaceQuickInfo,DragDrop.Interfaces.IWorkspaceManager)">
            <summary>
            Initializes a new instance of the <see cref="T:AnotherEditor.SWS.SubWorkspace"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="manager">The manager.</param>
        </member>
        <member name="M:AnotherEditor.SWS.SubWorkspace.Subworkspace_PluginChanged(System.Object,Cryptool.PluginBase.PluginChangedEventArgs)">
            <summary>
            Forward the selected events from SubWorkspace in disabled state.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Cryptool.PluginBase.PluginChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:AnotherEditor.SWS.SubWorkspace.workspaceManager_OnAnotherEditorStatusBarTextChanged(System.Object,System.String,Cryptool.PluginBase.NotificationLevel)">
            <summary>
            Forward SWS messages. This event is "redirected" to OnGuiLogNotificationOccured event, 
            because "we are" a plugin and the parent WorkspaceManager should add the title property 
            from current topmost workspace.
            </summary>
            <param name="sender">The sender.</param>
            <param name="message">The message.</param>
            <param name="notificationLevel">The notification level.</param>
        </member>
        <member name="M:AnotherEditor.SWS.SubWorkspace.workspaceManager_OnGuiLogNotificationOccured(Cryptool.PluginBase.IPlugin,Cryptool.PluginBase.GuiLogEventArgs)">
            <summary>
            Forward SWS messages.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:Cryptool.PluginBase.GuiLogEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:AnotherEditor.SWS.SubWorkspace.TunnelOutput_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Inform the parent workspaceManager about subWorspace output change
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:AnotherEditor.SWS.SubWorkspace.methodGetValue(System.String)">
            <summary>
            GetValue method for dynamic properties.
            </summary>
            <param name="propertyKey">The property key.</param>
            <returns></returns>
        </member>
        <member name="M:AnotherEditor.SWS.SubWorkspace.methodSetValue(System.String,System.Object)">
            <summary>
            SetValue method for dynamic properties.
            </summary>
            <param name="propertyKey">The property key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:AnotherEditor.SWS.SubWorkspace.PreExecution">
            <summary>
            Executes included WorkspaceManager pre exec
            </summary>
        </member>
        <member name="M:AnotherEditor.SWS.SubWorkspace.Execute">
            <summary>
            Execute included WorkspaceManager
            </summary>
        </member>
        <member name="M:AnotherEditor.SWS.SubWorkspace.PostExecution">
            <summary>
            Nothing to do here.
            </summary>
        </member>
        <member name="M:AnotherEditor.SWS.SubWorkspace.Pause">
            <summary>
            Not defined yet.
            </summary>
        </member>
        <member name="M:AnotherEditor.SWS.SubWorkspace.Stop">
            <summary>
            Stops included WorkspaceManager
            </summary>
        </member>
        <member name="M:AnotherEditor.SWS.SubWorkspace.Initialize">
            <summary>
            Will be called from editor after restoring settings and before adding to workspace.
            </summary>
        </member>
        <member name="M:AnotherEditor.SWS.SubWorkspace.Dispose">
            <summary>
            Disposes all sub elements and closes open CryptoolStreams.
            </summary>
        </member>
        <member name="M:AnotherEditor.SWS.SubWorkspace.CanSwitchToDisplayLevel(Cryptool.PluginBase.DisplayLevel)">
            <summary>
            Determines whether this instance [can switch to display level] the specified new level.
            </summary>
            <param name="newLevel">The new level.</param>
            <returns>
            	<c>true</c> if this instance [can switch to display level] the specified new level; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:AnotherEditor.SWS.SubWorkspace.GetMaxDisplayLevel">
            <summary>
            Gets the max display level.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnotherEditor.SWS.SubWorkspace.UnselectAllElements">
            <summary>
            Unselects all elements.
            </summary>
        </member>
        <member name="M:AnotherEditor.SWS.SubWorkspace.SetDisplayLevel(Cryptool.PluginBase.DisplayLevel)">
            <summary>
            Sets the display level.
            </summary>
            <param name="level">The level.</param>
        </member>
        <member name="M:AnotherEditor.SWS.SubWorkspace.SetExectuionDelay(System.Int32)">
            <summary>
            Sets the exectuion delay.
            </summary>
            <param name="delay">The delay.</param>
        </member>
        <member name="M:AnotherEditor.SWS.SubWorkspace.InitFinished">
            <summary>
            Determines if init has finished. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnotherEditor.SWS.SubWorkspace.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="E:AnotherEditor.SWS.SubWorkspace.OnDynamicPropertiesChanged">
            <summary>
            Occurs when [on dynamic properties changed].
            </summary>
        </member>
        <member name="E:AnotherEditor.SWS.SubWorkspace.PluginChanged">
            <summary>
            Occurs when [plugin changed].
            </summary>
        </member>
        <member name="E:AnotherEditor.SWS.SubWorkspace.OnPluginProgressChanged">
            <summary>
            Occurs when [on plugin progress changed].
            </summary>
        </member>
        <member name="E:AnotherEditor.SWS.SubWorkspace.OnPluginStatusChanged">
            <summary>
            Occurs when [on plugin status changed].
            </summary>
        </member>
        <member name="E:AnotherEditor.SWS.SubWorkspace.OnGuiLogNotificationOccured">
            <summary>
            Occurs when [on GUI log notification occured].
            </summary>
        </member>
        <member name="P:AnotherEditor.SWS.SubWorkspace.QuickInfo">
            <summary>
            Gets or sets the quick info.
            </summary>
            <value>The quick info.</value>
        </member>
        <member name="P:AnotherEditor.SWS.SubWorkspace.DicDynamicProperties">
            <summary>
            Gets or sets the dic dynamic properties.
            </summary>
            <value>The dic dynamic properties.</value>
        </member>
        <member name="P:AnotherEditor.SWS.SubWorkspace.CanSendPropertiesChangedEvent">
            <summary>
            Gets or sets a value indicating whether this instance can send properties changed event.
            </summary>
            <value>
            	<c>true</c> if this instance can send properties changed event; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:AnotherEditor.SWS.SubWorkspace.CanChangeDynamicProperty">
            <summary>
            Gets or sets a value indicating whether this instance can change dynamic property.
            </summary>
            <value>
            	<c>true</c> if this instance can change dynamic property; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:AnotherEditor.SWS.SubWorkspace.Settings">
            <summary>
            Gets the settings.
            </summary>
            <value>The settings.</value>
        </member>
        <member name="P:AnotherEditor.SWS.SubWorkspace.Presentation">
            <summary>
            Shows included SubWorkspace
            </summary>
            <value>The presentation.</value>
        </member>
        <member name="P:AnotherEditor.SWS.SubWorkspace.QuickWatchPresentation">
            <summary>
            Show included SubWorkspace
            </summary>
            <value>The quick watch presentation.</value>
        </member>
        <member name="E:AnotherEditor.SWS.SubWorkspace.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:DragDrop.UndoManager">
            <summary>
            Command manager handling the IWorkspaceCommands 
            </summary>
        </member>
        <member name="M:DragDrop.UndoManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DragDrop.UndoManager"/> class.
            </summary>
        </member>
        <member name="M:DragDrop.UndoManager.OnExecuteUndo(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Called when [execute undo].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Input.ExecutedRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:DragDrop.UndoManager.OnCanExecuteUndo(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Called when [can execute undo].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Input.CanExecuteRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:DragDrop.UndoManager.OnExecuteRedo(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Called when [execute redo].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Input.ExecutedRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:DragDrop.UndoManager.OnCanExecuteRedo(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Called when [can execute redo].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Input.CanExecuteRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:DragDrop.UndoManager.Execute(DragDrop.Interfaces.IWorkspaceCommand)">
            <summary>
            This method puts the command to the Undo stack and then executes it.
            </summary>
            <param name="command">The command to be executed.</param>
        </member>
        <member name="M:DragDrop.UndoManager.Undo">
            <summary>
            Rollback the last command.
            </summary>
        </member>
        <member name="M:DragDrop.UndoManager.Redo">
            <summary>
            Rollback the last undone command.
            </summary>
        </member>
        <member name="M:DragDrop.UndoManager.ClearUndoHistory">
            <summary>
            Clear the undo history.
            </summary>
        </member>
        <member name="M:DragDrop.UndoManager.ClearRedoHistory">
            <summary>
            Clear the redo history.
            </summary>
        </member>
        <member name="M:DragDrop.UndoManager.ClearHistory">
            <summary>
            Clear all the undo and redo history.
            </summary>
        </member>
        <member name="P:DragDrop.UndoManager.ChangesSaved">
            <summary>
            Gets or sets a value indicating whether [changes saved].
            </summary>
            <value><c>true</c> if [changes saved]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:DragDrop.UndoManager.UndoCommands">
            <summary>
            Get the undo commands history.
            </summary>
            <value></value>
        </member>
        <member name="P:DragDrop.UndoManager.RedoCommands">
            <summary>
            Get the redo commands history.
            </summary>
            <value></value>
        </member>
        <member name="P:DragDrop.UndoManager.UndoTitles">
            <summary>
            Get the undo commands titles.
            </summary>
            <value></value>
        </member>
        <member name="P:DragDrop.UndoManager.RedoTitles">
            <summary>
            Get the redo commands titles.
            </summary>
            <value></value>
        </member>
        <member name="P:DragDrop.UndoManager.CanUndo">
            <summary>
            Gets a value indicating whether there is anything that can be undone.
            </summary>
            <value></value>
        </member>
        <member name="P:DragDrop.UndoManager.CanRedo">
            <summary>
            Gets a value indicating whether there is anything that can be rolled forward.
            </summary>
            <value></value>
        </member>
        <member name="T:DragDrop.LinkManager">
            <summary>
            Checks if two dock points can be connected
            </summary>
        </member>
        <member name="M:DragDrop.LinkManager.CanConnect(DragDrop.Interfaces.IConnector,DragDrop.Interfaces.IConnector)">
            <summary>
            Helper function for the hit testing functions to decide if 
            a connection from one connector to another is allowed.
            </summary>
            <param name="DockPointOut">The dock point out.</param>
            <param name="DockPointIn">The dock point in.</param>
            <returns>
            	<c>true</c> if this instance can connect the specified dock point out; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="E:DragDrop.LinkManager.OnAnotherEditorStatusBarTextChanged">
            <summary>
            Occurs when [on another editor status bar text changed].
            </summary>
        </member>
        <member name="P:DragDrop.LinkManager.ElementManager">
            <summary>
            Gets or sets the element manager.
            </summary>
            <value>The element manager.</value>
        </member>
        <member name="T:DragDrop.Interfaces.RunMethod">
            <summary>
            Switch to tell workspace manager weather to execute normal a subWorkspace
            </summary>
        </member>
        <member name="F:DragDrop.Interfaces.RunMethod.RunNormal">
            <summary>
            
            </summary>
        </member>
        <member name="F:DragDrop.Interfaces.RunMethod.RunSubWorkspace">
            <summary>
            
            </summary>
        </member>
        <member name="T:DragDrop.Interfaces.IWorkspaceManager">
            <summary>
            Workspacemanager creates the other manager classes and handles the Workspace commands
            and chain execution.
            </summary>
        </member>
        <member name="M:DragDrop.Interfaces.IWorkspaceManager.AddDragContent(AnotherEditor.DragDrop.Interfaces.IDragContent,System.Windows.Point)">
            <summary>
            Adds the content of the drag.
            </summary>
            <param name="dragContent">Content of the drag.</param>
            <param name="targetPoint">The target point.</param>
        </member>
        <member name="M:DragDrop.Interfaces.IWorkspaceManager.AddPlugin(Cryptool.PluginBase.IPlugin,System.Boolean)">
            <summary>
            Adds the plugin.
            </summary>
            <param name="plugin">The plugin.</param>
            <param name="SetHasChanges">if set to <c>true</c> [set has changes].</param>
            <returns></returns>
        </member>
        <member name="M:DragDrop.Interfaces.IWorkspaceManager.AddPlugin(Cryptool.PluginBase.IPlugin,System.Windows.Point)">
            <summary>
            Adds the plugin.
            </summary>
            <param name="plugin">The plugin.</param>
            <param name="Target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:DragDrop.Interfaces.IWorkspaceManager.Move_Element(System.Collections.Generic.List{System.Windows.Controls.ContentControl},System.Collections.Generic.Dictionary{System.Windows.Controls.ContentControl,System.Windows.Point},System.Collections.Generic.Dictionary{System.Windows.Controls.ContentControl,System.Windows.Point})">
            <summary>
            Move_s the element.
            </summary>
            <param name="Elements">The elements.</param>
            <param name="SourcePoints">The source points.</param>
            <param name="TargetPoints">The target points.</param>
        </member>
        <member name="M:DragDrop.Interfaces.IWorkspaceManager.UnDo">
            <summary>
            Uns the do.
            </summary>
        </member>
        <member name="M:DragDrop.Interfaces.IWorkspaceManager.ReDo">
            <summary>
            Res the do.
            </summary>
        </member>
        <member name="M:DragDrop.Interfaces.IWorkspaceManager.LinkDockPoint(DragDrop.Interfaces.IConnector,DragDrop.Interfaces.IConnector)">
            <summary>
            Links the dock point.
            </summary>
            <param name="dpi">The dpi.</param>
            <param name="dpo">The dpo.</param>
        </member>
        <member name="M:DragDrop.Interfaces.IWorkspaceManager.SwitchDockPoint(DragDrop.Interfaces.IConnector,DragDrop.Interfaces.IConnector,AnotherEditor.DragDrop.Connectors.Connection)">
            <summary>
            Switches the dock point.
            </summary>
            <param name="OldDockPoint">The old dock point.</param>
            <param name="NewDockPoint">The new dock point.</param>
        </member>
        <member name="M:DragDrop.Interfaces.IWorkspaceManager.AddRestorePlugin(Cryptool.PluginBase.IPlugin)">
            <summary>
            Adds the restore plugin.
            </summary>
            <param name="Plugin">The plugin.</param>
            <returns></returns>
        </member>
        <member name="M:DragDrop.Interfaces.IWorkspaceManager.AddRestoreConnection(DragDrop.Interfaces.IConnector,DragDrop.Interfaces.IConnector)">
            <summary>
            Adds the restore connection.
            </summary>
            <param name="DockPointIn">The dock point in.</param>
            <param name="DockPointOut">The dock point out.</param>
        </member>
        <member name="M:DragDrop.Interfaces.IWorkspaceManager.AddRestoreDragContent(AnotherEditor.DragDrop.Interfaces.IDragContent,System.Windows.Point)">
            <summary>
            Adds the content of the restore drag.
            </summary>
            <param name="dragContent">Content of the drag.</param>
            <param name="point">The point.</param>
        </member>
        <member name="M:DragDrop.Interfaces.IWorkspaceManager.Plugin_OnGuiLogNotificationOccured(Cryptool.PluginBase.IPlugin,Cryptool.PluginBase.GuiLogEventArgs)">
            <summary>
            Plugin_s the on GUI log notification occured.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:Cryptool.PluginBase.GuiLogEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:DragDrop.Interfaces.IWorkspaceManager.DeleteCurrentSelection">
            <summary>
            Deletes the current selection.
            </summary>
        </member>
        <member name="M:DragDrop.Interfaces.IWorkspaceManager.Run(DragDrop.Interfaces.RunMethod)">
            <summary>
            Start chain execution.
            </summary>
            <param name="method">The method.</param>
        </member>
        <member name="M:DragDrop.Interfaces.IWorkspaceManager.Stop">
            <summary>
            Stop Play Mode.
            </summary>
        </member>
        <member name="M:DragDrop.Interfaces.IWorkspaceManager.PluginInitCallBack(System.IAsyncResult)">
            <summary>
            Plugins the init call back.
            </summary>
            <param name="ar">The ar.</param>
        </member>
        <member name="M:DragDrop.Interfaces.IWorkspaceManager.PreExecution">
            <summary>
            Pres the execution.
            </summary>
        </member>
        <member name="P:DragDrop.Interfaces.IWorkspaceManager.ListInitElements">
            <summary>
            Gets the list init elements.
            </summary>
            <value>The list init elements.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IWorkspaceManager.CanUndo">
            <summary>
            Gets a value indicating whether this instance can undo.
            </summary>
            <value><c>true</c> if this instance can undo; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IWorkspaceManager.CanRedo">
            <summary>
            Gets a value indicating whether this instance can redo.
            </summary>
            <value><c>true</c> if this instance can redo; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IWorkspaceManager.HasChanges">
            <summary>
            Gets a value indicating whether this instance has changes.
            </summary>
            <value>
            	<c>true</c> if this instance has changes; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DragDrop.Interfaces.IWorkspaceManager.Workspace">
            <summary>
            Gets the workspace.
            </summary>
            <value>The workspace.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IWorkspaceManager.ElementManager">
            <summary>
            Gets or sets the element manager.
            </summary>
            <value>The element manager.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IWorkspaceManager.UndoManager">
            <summary>
            Gets the undo manager.
            </summary>
            <value>The undo manager.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IWorkspaceManager.DisplayLevel">
            <summary>
            Gets or sets the display level.
            </summary>
            <value>The display level.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IWorkspaceManager.LinkManager">
            <summary>
            Gets the link manager.
            </summary>
            <value>The link manager.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IWorkspaceManager.SelectionManager">
            <summary>
            Gets the selection manager.
            </summary>
            <value>The selection manager.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IWorkspaceManager.ExecutionDelay">
            <summary>
            Gets or sets the execution delay.
            </summary>
            <value>The execution delay.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IWorkspaceManager.IsInPlayMode">
            <summary>
            Gets a value indicating whether this instance is in play mode.
            </summary>
            <value>
            	<c>true</c> if this instance is in play mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:DragDrop.Interfaces.IWorkspaceManager.OnAnotherEditorStatusBarTextChanged">
            <summary>
            Occurs when [on another editor status bar text changed].
            </summary>
        </member>
        <member name="E:DragDrop.Interfaces.IWorkspaceManager.OnGuiLogNotificationOccured">
            <summary>
            Events of plugins are "filled" with title
            </summary>
        </member>
        <member name="E:DragDrop.Interfaces.IWorkspaceManager.OnRunFinished">
            <summary>
            Occurs when [on run finished].
            </summary>
        </member>
        <member name="T:AnotherEditor.DragDrop.SelectionManager">
            <summary>
            Handles selection of workspace elements. 
            </summary>
        </member>
        <member name="T:AnotherEditor.DragDrop.ISelectionManager">
            <summary>
            Handles selection of workspace elements
            </summary>
        </member>
        <member name="M:AnotherEditor.DragDrop.ISelectionManager.ClearSelection">
            <summary>
            Clears the selection.
            </summary>
        </member>
        <member name="M:AnotherEditor.DragDrop.ISelectionManager.SelectRange(System.Collections.Generic.IEnumerable{AnotherEditor.DragDrop.Interfaces.ISelectable})">
            <summary>
            Selects the range.
            </summary>
            <param name="range">The range.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.ISelectionManager.AddItem(AnotherEditor.DragDrop.Interfaces.ISelectable)">
            <summary>
            Adds the item.
            </summary>
            <param name="Selectable">The selectable.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.ISelectionManager.AddRange(System.Collections.Generic.IEnumerable{AnotherEditor.DragDrop.Interfaces.ISelectable})">
            <summary>
            Adds the range to selection.
            </summary>
            <param name="range">The range.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.ISelectionManager.SelectElement(AnotherEditor.DragDrop.Interfaces.ISelectable)">
            <summary>
            Selects the element.
            </summary>
            <param name="Element">The element.</param>
        </member>
        <member name="P:AnotherEditor.DragDrop.ISelectionManager.SelectedElement">
            <summary>
            Gets or sets the selected element.
            </summary>
            <value>The selected element.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.ISelectionManager.SelectedPlugin">
            <summary>
            Gets the selected plugin.
            </summary>
            <value>The selected plugin.</value>
        </member>
        <member name="E:AnotherEditor.DragDrop.ISelectionManager.PluginChanged">
            <summary>
            Occurs when [plugin changed].
            </summary>
        </member>
        <member name="P:AnotherEditor.DragDrop.ISelectionManager.SelectedItems">
            <summary>
            Gets the selected items.
            </summary>
            <value>The selected items.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.ISelectionManager.SelectedBaseElements">
            <summary>
            Gets the selected base elements.
            </summary>
            <value>The selected base elements.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.ISelectionManager.DragableElements">
            <summary>
            Gets the dragable elements.
            </summary>
            <value>The dragable elements.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.ISelectionManager.Workspace">
            <summary>
            Gets or sets the workspace used to subscribe to events
            </summary>
            <value>The workspace.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.ISelectionManager.ElementManager">
            <summary>
            Gets or sets the element manager.
            </summary>
            <value>The element manager.</value>
        </member>
        <member name="M:AnotherEditor.DragDrop.SelectionManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AnotherEditor.DragDrop.SelectionManager"/> class.
            </summary>
        </member>
        <member name="M:AnotherEditor.DragDrop.SelectionManager.AddItem(AnotherEditor.DragDrop.Interfaces.ISelectable)">
            <summary>
            Adds an item to the current selection
            </summary>
            <param name="Selectable">The selectable.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.SelectionManager.AddRange(System.Collections.Generic.IEnumerable{AnotherEditor.DragDrop.Interfaces.ISelectable})">
            <summary>
            Adds the range to selection.
            </summary>
            <param name="range">The range.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.SelectionManager.ClearSelection">
            <summary>
            Clears the selection.
            </summary>
        </member>
        <member name="M:AnotherEditor.DragDrop.SelectionManager.RemoveItem(AnotherEditor.DragDrop.Interfaces.ISelectable)">
            <summary>
            Removes an item from the current selection
            </summary>
            <param name="Selectable">The selectable.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.SelectionManager.SelectElement(AnotherEditor.DragDrop.Interfaces.ISelectable)">
            <summary>
            Select this elements and deselect all others.
            </summary>
            <param name="Element">The element to select</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.SelectionManager.SelectRange(System.Collections.Generic.IEnumerable{AnotherEditor.DragDrop.Interfaces.ISelectable})">
            <summary>
            Selects the given elements and de-selects all others.
            </summary>
            <param name="range"></param>
        </member>
        <member name="P:AnotherEditor.DragDrop.SelectionManager.DragableElements">
            <summary>
            Gets the dragable elements.
            </summary>
            <value>The dragable elements.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.SelectionManager.ElementManager">
            <summary>
            Gets or sets the element manager.
            </summary>
            <value>The element manager.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.SelectionManager.SelectedBaseElements">
            <summary>
            Gets the selected base elements only.
            </summary>
            <value>The selected base elements.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.SelectionManager.SelectedElement">
            <summary>
            Gets or sets the selected element. If more than one element is selected null is returned.
            </summary>
            <value>The selected element.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.SelectionManager.SelectedItems">
            <summary>
            Gets the selected items. Elements and Connections
            </summary>
            <value>The selected items.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.SelectionManager.SelectedPlugin">
            <summary>
            Gets the selected plugin.
            </summary>
            <value>The selected plugin.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.SelectionManager.Workspace">
            <summary>
            Gets or sets the workspace used to subscribe to events
            </summary>
            <value>The workspace.</value>
        </member>
        <member name="E:AnotherEditor.DragDrop.SelectionManager.PluginChanged">
            <summary>
            Occurs when [plugin changed].
            </summary>
        </member>
        <member name="T:AnotherEditor.DragDrop.ElementCommands">
            <summary>
            Commands that can be performed on single elements on workspace. 
            The command bindings are defined in AnotherEditorPresentation.xaml
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.ElementCommands.EditCommand">
            <summary>
            Show plugins presentation.
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.ElementCommands.CloseTabItemCommand">
            <summary>
            Close current tab item.
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.ElementCommands.ShowDescriptionCommand">
            <summary>
            Show plugins description. 
            </summary>
        </member>
        <member name="T:AnotherEditor.Properties.Dialogs">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.assembly_not_found_exeption">
            <summary>
              Looks up a localized string similar to Plugin: &quot;{0}&quot; is currently not available. Can&apos;t load project file..
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.cancel">
            <summary>
              Looks up a localized string similar to cancel.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.cant_add_metInfo_twice">
            <summary>
              Looks up a localized string similar to Can&apos;t add SubWorkspace info element twice..
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.cant_add_plugin_while_running">
            <summary>
              Looks up a localized string similar to You can&apos;t add plugins while chain is running..
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.cant_add_sws_switch_level_to">
            <summary>
              Looks up a localized string similar to Can&apos;t add subworkspace while using DisplayLevel &quot;{0}&quot;. Please switch to Level &quot;{1}&quot; to use this subworkspace..
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.cant_create_plugin_for_assembly">
            <summary>
              Looks up a localized string similar to Can&apos;t create plugin instance for type: {0}.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.cant_expand_presentation_open">
            <summary>
              Looks up a localized string similar to Can&apos;t expand. Presentation is already opened in tab..
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.cant_find_can_send_dynProp_event">
            <summary>
              Looks up a localized string similar to Can&apos;t find defined CanSendDynamicPropertiesChangedEvent property..
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.context_menu_attribute_type_warning">
            <summary>
              Looks up a localized string similar to ContextMenu attribute with parameter &quot;{0}&quot; can only be used with {1} properties. The property &quot;{2}&quot; is of type: {3}.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.contextMenu_error">
            <summary>
              Looks up a localized string similar to Error creating context menu entry for plugin &quot;{0}&quot; on property &quot;{1}&quot;. Type is set to &quot;{2}&quot;, but no ControlValues given..
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.could_not_create_plugin">
            <summary>
              Looks up a localized string similar to Could not create Plugin-instance for type: {0}.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.create_sws_called_with_null">
            <summary>
              Looks up a localized string similar to CreateSubWorkspace was called with null value..
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.current">
            <summary>
              Looks up a localized string similar to current.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.current_mem_usage">
            <summary>
              Looks up a localized string similar to Current memory usage: .
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.delete">
            <summary>
              Looks up a localized string similar to delete.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.drop_only_one_file_message">
            <summary>
              Looks up a localized string similar to You should only drop a single file here..
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.drop_unkown_extension">
            <summary>
              Looks up a localized string similar to This editor does not handle the extension: &quot;{0}&quot;, only &quot;.{1}&quot; is supported..
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.dynamic_properties_changed_flush_undo">
            <summary>
              Looks up a localized string similar to Dynamic Properties of Plugin: {0} changed. Flushing Undo/Redo history....
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.dynamic_property_cant_change">
            <summary>
              Looks up a localized string similar to Can&apos;t dynamic property while a dynmaic property is connected. This event should not be fired. Please check implementation of you plugin &quot;CanSendPropertiesChangedEvent&quot;..
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.editor_name">
            <summary>
              Looks up a localized string similar to Another Editor.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.element_added">
            <summary>
              Looks up a localized string similar to Added element: {0}.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.element_removed">
            <summary>
              Looks up a localized string similar to Removed element: {0}.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.errors_loading_plugins_connections_not_loaded">
            <summary>
              Looks up a localized string similar to Errors occured when loading the plugins. Connections not loaded..
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.exception_setting_property_of_plugin">
            <summary>
              Looks up a localized string similar to An exception occured while setting property &quot;{0}&quot; of plugin: {1}.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.executed_successfull">
            <summary>
              Looks up a localized string similar to Chain successfully executed..
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.execution_error">
            <summary>
              Looks up a localized string similar to There were errors on execution..
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.exported_subWorkspace">
            <summary>
              Looks up a localized string similar to Exported SubWorkspace: {0} to {1}.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.file_can_not_load">
            <summary>
              Looks up a localized string similar to Can&apos;t load the file: &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.imported_subWorkspace">
            <summary>
              Looks up a localized string similar to Imported subworkspace: {0}.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.info_creates_cycle">
            <summary>
              Looks up a localized string similar to Connection not possible, this would create a cycle..
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.init_still_in_progress_warning">
            <summary>
              Looks up a localized string similar to Can&apos;t start now. Init of following plugins is still in progress: .
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.innerException">
            <summary>
              Looks up a localized string similar to Inner exception: .
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.items">
            <summary>
              Looks up a localized string similar to elements.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.lineBreak">
            <summary>
              Looks up a localized string similar to \n.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.no_presentation_available">
            <summary>
              Looks up a localized string similar to No presentation available..
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.open">
            <summary>
              Looks up a localized string similar to open.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.persistance_manager_no_workspaces_in_file">
            <summary>
              Looks up a localized string similar to No workspaces were found in file &quot;{0}&quot;. The file is probably damaged..
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.persistance_manager_properties_do_not_match">
            <summary>
              Looks up a localized string similar to Properties of savefile and plugin do not match: {0}.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.persistance_manager_properties_editor_element_do_not_match">
            <summary>
              Looks up a localized string similar to Properties of savefile and editor element do not match: {0}.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.persistance_manager_property_looking_for">
            <summary>
              Looks up a localized string similar to Property looking for: {0}.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.persistance_manager_restored_connection">
            <summary>
              Looks up a localized string similar to Restored connection: {0}.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.persistance_manager_restored_plugin">
            <summary>
              Looks up a localized string similar to Restored plugin: {0}.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.persistance_manager_save_file_not_valid">
            <summary>
              Looks up a localized string similar to Save file not valid: {0}.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.persistance_manager_unexpected_property">
            <summary>
              Looks up a localized string similar to Unexpected property found: {0}.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.persistence_damaged_file">
            <summary>
              Looks up a localized string similar to The file is damaged and can&apos;t be loaded..
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.persistence_load_errors">
            <summary>
              Looks up a localized string similar to Errors occured. Can&apos;t load project file..
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.plugin_added">
            <summary>
              Looks up a localized string similar to Plugin added: .
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.plugin_has_no_plugin_description">
            <summary>
              Looks up a localized string similar to Plugin &quot;{0}&quot; has no plugin description. You may try to contact the author to get some more information..
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.plugin_init_finished">
            <summary>
              Looks up a localized string similar to Init finished for plugin: .
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.plugin_init_start">
            <summary>
              Looks up a localized string similar to Starting init for plugin: .
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.plugin_not_part_of_chain_run">
            <summary>
              Looks up a localized string similar to &quot;Plugin: &quot;{0}&quot; will not be part of chain run. Not all mandatory inputs connected. Marked transparent. (Use stop button to flush marker)&quot;.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.plugin_opened_presentation">
            <summary>
              Looks up a localized string similar to Opened {0}&apos;s presentation..
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.plugin_removed">
            <summary>
              Looks up a localized string similar to Plugin removed: .
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.plugin_validation_failed">
            <summary>
              Looks up a localized string similar to Plugin validation failed. Plugin can not be used..
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.plugin_xy_threw_exception_on_conversion">
            <summary>
              Looks up a localized string similar to Plugin &quot;{0}&quot; threw an exception on Property-Conversion-Method &quot;{1}&quot;: {2}.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.plugin_xy_threw_exception_on_execute">
            <summary>
              Looks up a localized string similar to Plugin &quot;{0}&quot; threw an exception on method &quot;Execute&quot;: {1}.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.plugin_xy_threw_exception_on_get_property">
            <summary>
              Looks up a localized string similar to Plugin &quot;{0}&quot; threw an exception on GET Property &quot;{1}&quot;: {2}.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.plugin_xy_threw_exception_on_set_property">
            <summary>
              Looks up a localized string similar to Plugin &quot;{0}&quot; threw an exception on SET Property &quot;{1}&quot;: {2}.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.presentation_not_available_warning">
            <summary>
              Looks up a localized string similar to The plugin {0} does not provide a description. Please add a descripiton that describes the functionality of the plugin..
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.project_loaded_successful">
            <summary>
              Looks up a localized string similar to Project file &quot;{0}&quot; loaded successfully..
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.project_manager_add_plugin_null_value">
            <summary>
              Looks up a localized string similar to ProjectManager: AddPlugin was called with null value for plugin. Please report this bug to the Plugin developer..
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.project_manager_add_workspace_manager_null_value">
            <summary>
              Looks up a localized string similar to ProjectManager: AddWorkspaceManager was called with null value. Please reprot this bug to the Plugin developer..
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.project_not_saved_errors_occured">
            <summary>
              Looks up a localized string similar to The project was not saved, because errors occurd while building save structure..
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.project_saved_successful">
            <summary>
              Looks up a localized string similar to Project saved successfully to file: &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.quickwatch_empty_message">
            <summary>
              Looks up a localized string similar to No quickwatch data right now..
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.request_for_displayLevel_revert">
            <summary>
              Looks up a localized string similar to Got request for new DisplayLevel: &quot;{0}&quot; but this level is not compatible with current workspace. Sending revert to &quot;{1}&quot; to  CrypWin..
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.sending_stop_signal_to_chain">
            <summary>
              Looks up a localized string similar to Sending stop signal to running chain now....
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.sws_at_least_one_tunnelInput">
            <summary>
              Looks up a localized string similar to You need at least one tunnel input to create a subworkspace..
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.sws_at_least_one_tunnelOutput">
            <summary>
              Looks up a localized string similar to You need at least one tunnel output to create a subworkspace..
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.sws_cant_create_instance">
            <summary>
              Looks up a localized string similar to Can&apos;t create requested SubWorkspace instance..
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.sws_cant_create_sws_from_file">
            <summary>
              Looks up a localized string similar to Failed to create subworkspace from file: {0}. .
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.sws_cant_find_included_sws">
            <summary>
              Looks up a localized string similar to Can&apos;t find included subworkspace: {0}. .
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.sws_could_not_find_sws">
            <summary>
              Looks up a localized string similar to Could not find requested subworkspace file. Probably someone removed the file while app was running..
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.sws_delete_file_not_found">
            <summary>
              Looks up a localized string similar to Can&apos;t find subworkspace: {0} you want to delete..
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.sws_delete_file_success">
            <summary>
              Looks up a localized string similar to Deleted subworkspace: {0} (File: {1}).
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.sws_delete_name_not_found">
            <summary>
              Looks up a localized string similar to Cant&apos;t find the subworkspace name: {0} you want to delete..
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.sws_double_name">
            <summary>
              Looks up a localized string similar to The name you selected for this subworkspace is already in use. Please select another one..
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.sws_empty_name">
            <summary>
              Looks up a localized string similar to You have to provide a name in the MetaInfoPlugin..
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.sws_failed_read_quickInfo">
            <summary>
              Looks up a localized string similar to Error reading subworkspace file: {0}. Exception thrown: {1}.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.sws_metaInfo_invalid">
            <summary>
              Looks up a localized string similar to Your subworkspaceMetaInfo is not set correctly. Please check and try again..
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.sws_metaInfo_rquired">
            <summary>
              Looks up a localized string similar to You need to provide valid subworkspace info element to enter a description for this subworkspace..
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.sws_unconnected_tunnel_input">
            <summary>
              Looks up a localized string similar to You have unconnected tunnel input elements on workspace. Please remove or connect them before saving a subworkspace..
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.sws_unconnected_tunnel_output">
            <summary>
              Looks up a localized string similar to You have unconnected tunnel output elements on workspace. Please remove or connect them before saving a subworkspace..
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.tunnel_input_has_to_be_conntected">
            <summary>
              Looks up a localized string similar to Tunnel Input has to be connected to create Inputs for the subworkspace..
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.tunnel_output_has_to_be_conntected">
            <summary>
              Looks up a localized string similar to Tunnel Output has to be connected to create Outputs for the subworkspace..
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.unsavedProject">
            <summary>
              Looks up a localized string similar to New Project.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.user_control_double_use_warning">
            <summary>
              Looks up a localized string similar to This plugin uses the same UserControl for Presentation and QuickWatchPresentation. QuickWatchPresentation is opened right now - so presentation can&apos;t be displayed in tab again. Close QuickWatch-View and try to open the presentation again..
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.warning_dropped_event_data">
            <summary>
              Looks up a localized string similar to Data events were fired to fast, hence packet from {0} to {1} was dropped..
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Dialogs.workspace">
            <summary>
              Looks up a localized string similar to Workspace.
            </summary>
        </member>
        <member name="T:AnotherEditor.Converter.ProgressConverter">
            <summary>
            Determines how wide the progress indicator should be, based on how far 
            the execution of a plugin has been performed. This class is used in xaml code.
            </summary>
        </member>
        <member name="M:AnotherEditor.Converter.ProgressConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts source values to a value for the binding target. The data binding engine calls this method when it propagates the values from source bindings to the binding target.
            </summary>
            <param name="values">The array of values that the source bindings in the <see cref="T:System.Windows.Data.MultiBinding"/> produces. The value <see cref="F:System.Windows.DependencyProperty.UnsetValue"/> indicates that the source binding has no value to provide for conversion.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value.If the method returns null, the valid null value is used.A return value of <see cref="T:System.Windows.DependencyProperty"/>.<see cref="F:System.Windows.DependencyProperty.UnsetValue"/> indicates that the converter did not produce a value, and that the binding will use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"/> if it is available, or else will use the default value.A return value of <see cref="T:System.Windows.Data.Binding"/>.<see cref="F:System.Windows.Data.Binding.DoNothing"/> indicates that the binding does not transfer the value or use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"/> or the default value.
            </returns>
        </member>
        <member name="M:AnotherEditor.Converter.ProgressConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Dummy - not used here. 
            </summary>
            <param name="value">The value that the binding target produces.</param>
            <param name="targetTypes">The array of types to convert to. The array length indicates the number and types of values that are suggested for the method to return.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            An array of values that have been converted from the target value back to the source values.
            </returns>
        </member>
        <member name="T:AnotherEditor.SWS.SWSDescriptionSettings">
            <summary>
            dummy settings not used right now
            </summary>
        </member>
        <member name="P:AnotherEditor.SWS.SWSDescriptionSettings.HasChanges">
            <summary>
            Gets or sets a value indicating whether this instance has changes.
            </summary>
            <value>
            	<c>true</c> if this instance has changes; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:AnotherEditor.SWS.SWSDescriptionSettings.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:DragDrop.Workspace">
            <summary>
            This is the workspace for the elements. Basically a Canvas with some generic add/remove
            methods.
            </summary>
        </member>
        <member name="T:DragDrop.Interfaces.IWorkspace">
            <summary>
            Workspace interface based on Canvas methods. 
            </summary>
        </member>
        <member name="M:DragDrop.Interfaces.IWorkspace.Add``1(``0)">
            <summary>
            Adds the specified obj.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">The obj.</param>
        </member>
        <member name="M:DragDrop.Interfaces.IWorkspace.Remove``1(``0)">
            <summary>
            Removes the specified obj.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">The obj.</param>
        </member>
        <member name="M:DragDrop.Interfaces.IWorkspace.Contains``1(``0)">
            <summary>
            Determines whether [contains] [the specified element].
            </summary>
            <typeparam name="T"></typeparam>
            <param name="element">The element.</param>
            <returns>
            	<c>true</c> if [contains] [the specified element]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DragDrop.Interfaces.IWorkspace.SetLeft``1(``0,System.Double)">
            <summary>
            Sets the left.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="uIElement">The u I element.</param>
            <param name="p">The p.</param>
        </member>
        <member name="M:DragDrop.Interfaces.IWorkspace.GetLeft``1(``0)">
            <summary>
            Gets the left.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="uIElement">The u I element.</param>
            <returns></returns>
        </member>
        <member name="M:DragDrop.Interfaces.IWorkspace.SetTop``1(``0,System.Double)">
            <summary>
            Sets the top.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="uIElement">The u I element.</param>
            <param name="p">The p.</param>
        </member>
        <member name="M:DragDrop.Interfaces.IWorkspace.GetTop``1(``0)">
            <summary>
            Gets the top.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="uIElement">The u I element.</param>
            <returns></returns>
        </member>
        <member name="M:DragDrop.Interfaces.IWorkspace.SwitchThumbsIfNecessary(DragDrop.Interfaces.IBaseElement,DragDrop.Interfaces.IBaseElement)">
            <summary>
            Switches the thumbs if necessary.
            </summary>
            <param name="firstThumb">The first thumb.</param>
            <param name="secondThumb">The second thumb.</param>
        </member>
        <member name="M:DragDrop.Interfaces.IWorkspace.CheckRange``1(``0)">
            <summary>
            Checks the range.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="uIElement">The u I element.</param>
        </member>
        <member name="M:DragDrop.Interfaces.IWorkspace.InvalidateMeasure">
            <summary>
            Invalidates the measure.
            </summary>
        </member>
        <member name="M:DragDrop.Interfaces.IWorkspace.SetBinding(System.Windows.DependencyProperty,System.String)">
            <summary>
            Sets the binding.
            </summary>
            <param name="dp">The dp.</param>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="P:DragDrop.Interfaces.IWorkspace.Children">
            <summary>
            Gets the children.
            </summary>
            <value>The children.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IWorkspace.RenderSize">
            <summary>
            Gets the size of the render.
            </summary>
            <value>The size of the render.</value>
        </member>
        <member name="E:DragDrop.Interfaces.IWorkspace.SizeChanged">
            <summary>
            Occurs when [size changed].
            </summary>
        </member>
        <member name="E:DragDrop.Interfaces.IWorkspace.ChildRemoved">
            <summary>
            Occurs when [child removed].
            </summary>
        </member>
        <member name="E:DragDrop.Interfaces.IWorkspace.ChildAdded">
            <summary>
            Occurs when [child added].
            </summary>
        </member>
        <member name="E:DragDrop.Interfaces.IWorkspace.Drop">
            <summary>
            Occurs when [drop].
            </summary>
        </member>
        <member name="P:DragDrop.Interfaces.IWorkspace.Background">
            <summary>
            Gets or sets the background.
            </summary>
            <value>The background.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IWorkspace.Margin">
            <summary>
            Gets or sets the margin.
            </summary>
            <value>The margin.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IWorkspace.ContextMenu">
            <summary>
            Gets or sets the context menu.
            </summary>
            <value>The context menu.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IWorkspace.Nr">
            <summary>
            Gets the nr.
            </summary>
            <value>The nr.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IWorkspace.ActualWidth">
            <summary>
            Gets the actual width.
            </summary>
            <value>The actual width.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IWorkspace.ActualHeight">
            <summary>
            Gets the actual height.
            </summary>
            <value>The actual height.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IWorkspace.WorkspaceName">
            <summary>
            Gets or sets the name of the workspace.
            </summary>
            <value>The name of the workspace.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IWorkspace.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IWorkspace.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IWorkspace.Offset">
            <summary>
            Gets or sets the offset.
            </summary>
            <value>The offset.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IWorkspace.Dispatcher">
            <summary>
            Gets the dispatcher.
            </summary>
            <value>The dispatcher.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IWorkspace.RenderTransform">
            <summary>
            Gets or sets the render transform.
            </summary>
            <value>The render transform.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IWorkspace.LayoutTransform">
            <summary>
            Gets or sets the layout transform.
            </summary>
            <value>The layout transform.</value>
        </member>
        <member name="M:DragDrop.Workspace.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DragDrop.Workspace"/> class.
            </summary>
        </member>
        <member name="M:DragDrop.Workspace.SetBinding(System.Windows.DependencyProperty,System.String)">
            <summary>
            Attaches a binding to this element, based on the provided source property name as a path qualification to the data source.
            </summary>
            <param name="dp">Identifies the destination property where the binding should be established.</param>
            <param name="path">The source property name or the path to the property used for the binding.</param>
            <returns>
            Records the conditions of the binding. This return value can be useful for error checking.
            </returns>
        </member>
        <member name="M:DragDrop.Workspace.Remove``1(``0)">
            <summary>
            Removes the specified obj.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">The obj.</param>
        </member>
        <member name="M:DragDrop.Workspace.Add``1(``0)">
            <summary>
            Adds the specified obj.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">The obj.</param>
        </member>
        <member name="M:DragDrop.Workspace.Contains``1(``0)">
            <summary>
            Determines whether [contains] [the specified element].
            </summary>
            <typeparam name="T"></typeparam>
            <param name="element">The element.</param>
            <returns>
            	<c>true</c> if [contains] [the specified element]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DragDrop.Workspace.SetLeft``1(``0,System.Double)">
            <summary>
            Sets the left position of object. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="uIElement">The u I element.</param>
            <param name="p">The p.</param>
        </member>
        <member name="M:DragDrop.Workspace.GetLeft``1(``0)">
            <summary>
            Gets the left position of object. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="uIElement">The u I element.</param>
            <returns></returns>
        </member>
        <member name="M:DragDrop.Workspace.SetTop``1(``0,System.Double)">
            <summary>
            Sets the top position of the object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="uIElement">The u I element.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:DragDrop.Workspace.CheckRange``1(``0)">
            <summary>
            Checks the range.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="uIElement">The u I element.</param>
        </member>
        <member name="M:DragDrop.Workspace.GetTop``1(``0)">
            <summary>
            Gets the top.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="uIElement">The u I element.</param>
            <returns></returns>
        </member>
        <member name="M:DragDrop.Workspace.checkRangeTop(System.Windows.UIElement,System.Double)">
            <summary>
            Check if the position in inside the current workspace. Return samller or bigger
            size if neccessary.
            </summary>
            <param name="uIElement"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:DragDrop.Workspace.checkRangeLeft(System.Windows.UIElement,System.Double)">
            <summary>
            Check if the position in inside the current workspace. Return samller or bigger
            size if neccessary.
            </summary>
            <param name="uIElement"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:DragDrop.Workspace.SwitchThumbsIfNecessary(DragDrop.Interfaces.IBaseElement,DragDrop.Interfaces.IBaseElement)">
            <summary>
            The "chaining flow" is left to right. So if the logical target is on the left side
            we switch the two elements. So we get a chain like "[Input]-->[Encrypt]-->[Output]"
            </summary>
            <param name="source"></param>
            <param name="target"></param>
        </member>
        <member name="M:DragDrop.Workspace.SetZIndex``1(``0,System.Int32)">
            <summary>
            Sets the z-index of the object. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="element">The element.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:DragDrop.Workspace.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the child elements of a <see cref="T:System.Windows.Controls.Canvas"/> in anticipation of arranging them during the <see cref="M:System.Windows.Controls.Canvas.ArrangeOverride(System.Windows.Size)"/> pass.
            </summary>
            <param name="constraint">An upper limit <see cref="T:System.Windows.Size"/> that should not be exceeded.</param>
            <returns>
            A <see cref="T:System.Windows.Size"/> that represents the size that is required to arrange child content.
            </returns>
        </member>
        <member name="M:DragDrop.Workspace.InvalidateMeasure">
            <summary>
            Invalidates the measurement state (layout) for the element.
            </summary>
        </member>
        <member name="M:DragDrop.Workspace.DragDrop#Interfaces#IWorkspace#get_Children">
            <summary>
            This is the workspace for the elements. Basically a Canvas with some generic add/remove
            methods.
            </summary>
        </member>
        <member name="M:DragDrop.Workspace.DragDrop#Interfaces#IWorkspace#get_RenderSize">
            <summary>
            This is the workspace for the elements. Basically a Canvas with some generic add/remove
            methods.
            </summary>
        </member>
        <member name="M:DragDrop.Workspace.DragDrop#Interfaces#IWorkspace#add_SizeChanged(System.Windows.SizeChangedEventHandler)">
            <summary>
            This is the workspace for the elements. Basically a Canvas with some generic add/remove
            methods.
            </summary>
        </member>
        <member name="M:DragDrop.Workspace.DragDrop#Interfaces#IWorkspace#remove_SizeChanged(System.Windows.SizeChangedEventHandler)">
            <summary>
            This is the workspace for the elements. Basically a Canvas with some generic add/remove
            methods.
            </summary>
        </member>
        <member name="M:DragDrop.Workspace.DragDrop#Interfaces#IWorkspace#get_Background">
            <summary>
            This is the workspace for the elements. Basically a Canvas with some generic add/remove
            methods.
            </summary>
        </member>
        <member name="M:DragDrop.Workspace.DragDrop#Interfaces#IWorkspace#set_Background(System.Windows.Media.Brush)">
            <summary>
            This is the workspace for the elements. Basically a Canvas with some generic add/remove
            methods.
            </summary>
        </member>
        <member name="M:DragDrop.Workspace.DragDrop#Interfaces#IWorkspace#get_Margin">
            <summary>
            This is the workspace for the elements. Basically a Canvas with some generic add/remove
            methods.
            </summary>
        </member>
        <member name="M:DragDrop.Workspace.DragDrop#Interfaces#IWorkspace#set_Margin(System.Windows.Thickness)">
            <summary>
            This is the workspace for the elements. Basically a Canvas with some generic add/remove
            methods.
            </summary>
        </member>
        <member name="M:DragDrop.Workspace.DragDrop#Interfaces#IWorkspace#get_ContextMenu">
            <summary>
            This is the workspace for the elements. Basically a Canvas with some generic add/remove
            methods.
            </summary>
        </member>
        <member name="M:DragDrop.Workspace.DragDrop#Interfaces#IWorkspace#set_ContextMenu(System.Windows.Controls.ContextMenu)">
            <summary>
            This is the workspace for the elements. Basically a Canvas with some generic add/remove
            methods.
            </summary>
        </member>
        <member name="E:DragDrop.Workspace.ChildRemoved">
            <summary>
            Occurs when [child removed].
            </summary>
        </member>
        <member name="E:DragDrop.Workspace.ChildAdded">
            <summary>
            Occurs when [child added].
            </summary>
        </member>
        <member name="E:DragDrop.Workspace.Drop">
            <summary>
            Occurs when the input system reports an underlying drop event with this element as the drop target.
            </summary>
        </member>
        <member name="P:DragDrop.Workspace.Nr">
            <summary>
            Gets the nr.
            </summary>
            <value>The nr.</value>
        </member>
        <member name="P:DragDrop.Workspace.Dispatcher">
            <summary>
            Gets the <see cref="T:System.Windows.Threading.Dispatcher"/> this <see cref="T:System.Windows.Threading.DispatcherObject"/> is associated with.
            </summary>
            <value></value>
            <returns>The dispatcher.</returns>
        </member>
        <member name="P:DragDrop.Workspace.WorkspaceName">
            <summary>
            Gets or sets the name of the workspace.
            </summary>
            <value>The name of the workspace.</value>
        </member>
        <member name="P:DragDrop.Workspace.RenderTransform">
            <summary>
            Gets or sets transform information that affects the rendering position of this element.  This is a dependency property.
            </summary>
            <value></value>
            <returns>Describes the specifics of the desired render transform. The default is <see cref="P:System.Windows.Media.Transform.Identity"/>.</returns>
        </member>
        <member name="P:DragDrop.Workspace.LayoutTransform">
            <summary>
            Gets or sets a graphics transformation that should apply to this element when  layout is performed. This is a dependency property.
            </summary>
            <value></value>
            <returns>The transform this element should use. The default is <see cref="P:System.Windows.Media.Transform.Identity"/>.</returns>
        </member>
        <member name="P:DragDrop.Workspace.Offset">
            <summary>
            Snap to grid function.
            </summary>
            <value>The offset.</value>
        </member>
        <member name="P:DragDrop.Workspace.Width">
            <summary>
            Gets or sets the width of the element.  This is a dependency property.
            </summary>
            <value></value>
            <returns>The width of the element, in device-independent units (1/96th inch per unit). The default value is <see cref="F:System.Double.NaN"/>. This value must be equal to or greater than 0.0. See Remarks for upper bound information.</returns>
        </member>
        <member name="P:DragDrop.Workspace.Height">
            <summary>
            Gets or sets the suggested height of the element.  This is a dependency property.
            </summary>
            <value></value>
            <returns>The height of the element, in device-independent units (1/96th inch per unit). The default value is <see cref="F:System.Double.NaN"/>. This value must be equal to or greater than 0.0. See Remarks for upper bound information.</returns>
        </member>
        <member name="P:DragDrop.Workspace.ActualWidth">
            <summary>
            Gets the rendered width of this element.  This is a dependency property.
            </summary>
            <value></value>
            <returns>The element's width, as a value in device-independent units (1/96th inch per unit). The default value is 0 (zero).</returns>
        </member>
        <member name="P:DragDrop.Workspace.ActualHeight">
            <summary>
            Gets the rendered height of this element.  This is a dependency property.
            </summary>
            <value></value>
            <returns>The element's height, as a value in device-independent units (1/96th inch per unit). The default value is 0 (zero).</returns>
        </member>
        <member name="T:DragDrop.DragDropManager">
            <summary>
            This manager handles all the mouse events on the workspace: dragDrop and connections between the plugins. 
            </summary>
        </member>
        <member name="M:DragDrop.DragDropManager.DragSource_PreviewMouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            On PreviewMouseLeftButtonDown we decide what action to do. E.g. register DragDelte Function
            on Visual Element, 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DragDrop.DragDropManager.tryToBuildConnection(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Init a connect try: display ConnectorAdorner
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DragDrop.DragDropManager.DragThumb_DragDelta(System.Object,System.Windows.Controls.Primitives.DragDeltaEventArgs)">
            <summary>
            Callback function for VisualElement on DragDelte event. Moves all selected 
            elements in case of event. 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DragDrop.DragDropManager.Focus">
            <summary>
            Focuses this instance.
            </summary>
        </member>
        <member name="M:DragDrop.DragDropManager.HitTestResultVisualElement(System.Windows.Media.HitTestResult)">
            <summary>
            Hits the test result visual element.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="P:DragDrop.DragDropManager.IsRunning">
            <summary>
            Gets or sets a value indicating whether this instance is running.
            </summary>
            <value>
            	<c>true</c> if this instance is running; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DragDrop.DragDropManager.WorkspaceManager">
            <summary>
            Gets or sets the workspace manager.
            </summary>
            <value>The workspace manager.</value>
        </member>
        <member name="T:AnotherEditor.Helper.DependencyResolverHelper">
            <summary>
            This static class is used to get instances of the different managers. It can
            be used to change the implementation-types for unit testing.
            </summary>
        </member>
        <member name="M:AnotherEditor.Helper.DependencyResolverHelper.Initialize(AnotherEditor.Interfaces.IDependencyResolver)">
            <summary>
            Set the specified resolver. This should be done if you don't want to use 
            the standard implementations and register some mock objects instead. 
            </summary>
            <param name="resolver">The resolver.</param>
        </member>
        <member name="M:AnotherEditor.Helper.DependencyResolverHelper.Resolve``1">
            <summary>
            Resolves this instance.
            </summary>
            <typeparam name="T">Requested type.</typeparam>
            <returns>Instance of given type</returns>
        </member>
        <member name="T:DragDrop.Commands.DeleteConnectionCommand">
            <summary>
            Deletes a conneciton between two plugins
            </summary>  
        </member>
        <member name="M:DragDrop.Commands.DeleteConnectionCommand.#ctor(AnotherEditor.DragDrop.Connectors.Connection)">
            <summary>
            Initializes a new instance of the <see cref="T:DragDrop.Commands.DeleteConnectionCommand"/> class.
            </summary>
            <param name="Connection">The connection.</param>
        </member>
        <member name="M:DragDrop.Commands.DeleteConnectionCommand.Execute">
            <summary>
            Executes this instance.
            </summary>
        </member>
        <member name="M:DragDrop.Commands.DeleteConnectionCommand.Undo">
            <summary>
            Undoes this instance.
            </summary>
        </member>
        <member name="M:DragDrop.Commands.DeleteConnectionCommand.Redo">
            <summary>
            Redoes this instance.
            </summary>
        </member>
        <member name="E:DragDrop.Commands.DeleteConnectionCommand.OnGuiLogNotificationOccured">
            <summary>
            Occurs when [on GUI log notification occured].
            </summary>
        </member>
        <member name="P:DragDrop.Commands.DeleteConnectionCommand.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="T:DragDrop.Interfaces.DragDropMultiSelectManager">
            <summary>
            Perform hit-testing with current selection an call selection manager with current 
            area to select items.
            </summary>
        </member>
        <member name="M:DragDrop.Interfaces.DragDropMultiSelectManager.#ctor(DragDrop.Interfaces.IWorkspaceManager,System.Nullable{System.Windows.Point})">
            <summary>
            Initializes a new instance of the <see cref="T:DragDrop.Interfaces.DragDropMultiSelectManager"/> class.
            </summary>
            <param name="WorkspaceManager">The workspace manager.</param>
            <param name="DragStartPoint">The drag start point.</param>
        </member>
        <member name="M:DragDrop.Interfaces.DragDropMultiSelectManager.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseMove"/> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:DragDrop.Interfaces.DragDropMultiSelectManager.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseUp"/> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> that contains the event data. The event data reports that the mouse button was released.</param>
        </member>
        <member name="M:DragDrop.Interfaces.DragDropMultiSelectManager.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Called when [render].
            </summary>
            <param name="DrawingContext">The drawing context.</param>
        </member>
        <member name="M:DragDrop.Interfaces.DragDropMultiSelectManager.HitTestResultCallbackISelectable(System.Windows.Media.HitTestResult)">
            <summary>
            Hits the test result callback I selectable.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="T:AnotherEditor.Helper.PluginValidator">
            <summary>
            Calls IPlugin methods to determine if execeptions are thrown. 
            </summary>
        </member>
        <member name="M:AnotherEditor.Helper.PluginValidator.IsTypeAlreadyChecked(System.Type)">
            <summary>
            Determines whether [is type already checked] [the specified type].
            </summary>
            <param name="Type">The type.</param>
            <returns>
            	<c>true</c> if [is type already checked] [the specified type]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:AnotherEditor.Helper.PluginValidator.GuiText(System.String,Cryptool.PluginBase.NotificationLevel)">
            <summary>
            GUIs the text.
            </summary>
            <param name="message">The message.</param>
            <param name="notificationLevel">The notification level.</param>
        </member>
        <member name="M:AnotherEditor.Helper.PluginValidator.ValidatePlugin(System.Type)">
            <summary>
            Validates the plugin.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="E:AnotherEditor.Helper.PluginValidator.OnAnotherEditorStatusBarTextChanged">
            <summary>
            Occurs when [on another editor status bar text changed].
            </summary>
        </member>
        <member name="T:AnotherEditor.Helper.ContextMenuHelper">
            <summary>
            Creates context menus for the plugins based on the attributes in ISettings objects of plugins. 
            </summary>
        </member>
        <member name="M:AnotherEditor.Helper.ContextMenuHelper.GetContextMenu(Cryptool.PluginBase.IPlugin,Cryptool.PluginBase.DisplayLevel)">
            <summary>
            Gets the context menu.
            </summary>
            <param name="plugin">The plugin.</param>
            <param name="displayLevel">The display level.</param>
            <returns>The context menu for the plugin based on current display level.</returns>
        </member>
        <member name="M:AnotherEditor.Helper.ContextMenuHelper.settings_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Integer value changed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:AnotherEditor.Helper.ContextMenuHelper.OnAnotherEditorStatusBarTextChanged">
            <summary>
            Occurs when [on another editor status bar text changed].
            </summary>
        </member>
        <member name="T:AnotherEditor.Helper.ContextMenuComboBoxInfo">
            <summary>
            Helper container for context-menuc-combo-box representation
            </summary>
        </member>
        <member name="F:AnotherEditor.Helper.ContextMenuComboBoxInfo.BindingInfo">
            <summary>
            BindingInfo
            </summary>
        </member>
        <member name="F:AnotherEditor.Helper.ContextMenuComboBoxInfo.SelectedIndex">
            <summary>
            SelectedIndex
            </summary>
        </member>
        <member name="F:AnotherEditor.Helper.ContextMenuComboBoxInfo.Settings">
            <summary>
            Settings
            </summary>
        </member>
        <member name="F:AnotherEditor.Helper.ContextMenuComboBoxInfo.Item">
            <summary>
            Item
            </summary>
        </member>
        <member name="M:AnotherEditor.Helper.ContextMenuComboBoxInfo.#ctor(AnotherEditor.Helper.BindingInfo,System.Int32,Cryptool.PluginBase.ISettings,System.Windows.Controls.MenuItem)">
            <summary>
            Initializes a new instance of the <see cref="T:AnotherEditor.Helper.ContextMenuComboBoxInfo"/> class.
            </summary>
            <param name="bindingInfo">The binding info.</param>
            <param name="selectedIndex">Index of the selected.</param>
            <param name="settings">The settings.</param>
            <param name="item">The item.</param>
        </member>
        <member name="T:AnotherEditor.Helper.BindingInfo">
            <summary>
            Container for ContextMenuAttribute and PropertyInfo.
            </summary>
        </member>
        <member name="F:AnotherEditor.Helper.BindingInfo.ContextMenuAttribute">
            <summary>
            ContextMenuAttribute
            </summary>
        </member>
        <member name="F:AnotherEditor.Helper.BindingInfo.PropertyPath">
            <summary>
            PropertyPath
            </summary>
        </member>
        <member name="F:AnotherEditor.Helper.BindingInfo.PropertyInfo">
            <summary>
            PropertyInfo
            </summary>
        </member>
        <member name="M:AnotherEditor.Helper.BindingInfo.#ctor(Cryptool.PluginBase.ContextMenuAttribute,System.String,System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:AnotherEditor.Helper.BindingInfo"/> class.
            </summary>
            <param name="contextMenuAttribute">The context menu attribute.</param>
            <param name="propertyPath">The property path.</param>
            <param name="propertyInfo">The property info.</param>
        </member>
        <member name="T:AnotherEditor.Helper.BindingInfoComparer">
            <summary>
            Sorting helper
            </summary>
        </member>
        <member name="M:AnotherEditor.Helper.BindingInfoComparer.Compare(AnotherEditor.Helper.BindingInfo,AnotherEditor.Helper.BindingInfo)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value Condition Less than zero<paramref name="x"/> is less than <paramref name="y"/>.Zero<paramref name="x"/> equals <paramref name="y"/>.Greater than zero<paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
        </member>
        <member name="T:DragDrop.Commands.MoveElementCommand">
            <summary>
            Moves elements on workspace
            </summary>  
        </member>
        <member name="M:DragDrop.Commands.MoveElementCommand.#ctor(DragDrop.Interfaces.IWorkspace,System.Windows.Controls.ContentControl,System.Windows.Point,System.Windows.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:DragDrop.Commands.MoveElementCommand"/> class.
            </summary>
            <param name="Workspace">The workspace.</param>
            <param name="ContentControl">The content control.</param>
            <param name="Source">The source.</param>
            <param name="Target">The target.</param>
        </member>
        <member name="M:DragDrop.Commands.MoveElementCommand.Execute">
            <summary>
            Executes this instance.
            </summary>
        </member>
        <member name="M:DragDrop.Commands.MoveElementCommand.Undo">
            <summary>
            Undoes this instance.
            </summary>
        </member>
        <member name="M:DragDrop.Commands.MoveElementCommand.Redo">
            <summary>
            Redoes this instance.
            </summary>
        </member>
        <member name="E:DragDrop.Commands.MoveElementCommand.OnGuiLogNotificationOccured">
            <summary>
            Occurs when [on GUI log notification occured].
            </summary>
        </member>
        <member name="P:DragDrop.Commands.MoveElementCommand.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="T:AnotherEditor.Converter.SliderPercentConverter">
            <summary>
            Used to display the slider progress in desired format.
            </summary>
        </member>
        <member name="M:AnotherEditor.Converter.SliderPercentConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:AnotherEditor.Converter.SliderPercentConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Dummy - not used here. 
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:DragDrop.ElementManager">
            <summary>
            Handles all elements used on workspace. 
            </summary>
        </member>
        <member name="T:DragDrop.Interfaces.IElementManager">
            <summary>
            Handles all elements used on workspace. 
            </summary>
        </member>
        <member name="M:DragDrop.Interfaces.IElementManager.GetElement(System.Int32)">
            <summary>
            Gets the element.
            </summary>
            <param name="elementNr">The element nr.</param>
            <returns></returns>
        </member>
        <member name="M:DragDrop.Interfaces.IElementManager.AddElement(DragDrop.Interfaces.IBaseElement)">
            <summary>
            Adds the element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:DragDrop.Interfaces.IElementManager.RemoveElement(System.Int32)">
            <summary>
            Removes the element.
            </summary>
            <param name="elementNr">The element nr.</param>
        </member>
        <member name="M:DragDrop.Interfaces.IElementManager.ContainsElement(System.Int32)">
            <summary>
            Determines whether the specified element nr contains element.
            </summary>
            <param name="elementNr">The element nr.</param>
            <returns>
            	<c>true</c> if the specified element nr contains element; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DragDrop.Interfaces.IElementManager.ContainsElement(DragDrop.Interfaces.IBaseElement)">
            <summary>
            Determines whether the specified element contains element.
            </summary>
            <param name="element">The element.</param>
            <returns>
            	<c>true</c> if the specified element contains element; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DragDrop.Interfaces.IElementManager.GetElement(Cryptool.PluginBase.IPlugin)">
            <summary>
            Gets the element.
            </summary>
            <param name="plugin">The plugin.</param>
            <returns></returns>
        </member>
        <member name="M:DragDrop.Interfaces.IElementManager.GetInputElement(System.Int32)">
            <summary>
            Gets the input element.
            </summary>
            <param name="elementNr">The element nr.</param>
            <returns></returns>
        </member>
        <member name="M:DragDrop.Interfaces.IElementManager.RemoveDragable(AnotherEditor.DragDrop.Interfaces.IDragContent)">
            <summary>
            Removes the dragable.
            </summary>
            <param name="Dragable">The dragable.</param>
        </member>
        <member name="M:DragDrop.Interfaces.IElementManager.AddDragable(AnotherEditor.DragDrop.Interfaces.IDragContent)">
            <summary>
            Adds the dragable.
            </summary>
            <param name="Dragable">The dragable.</param>
        </member>
        <member name="P:DragDrop.Interfaces.IElementManager.ElementList">
            <summary>
            Gets the element list.
            </summary>
            <value>The element list.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IElementManager.InputElementList">
            <summary>
            Gets the input element list.
            </summary>
            <value>The input element list.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IElementManager.DragableList">
            <summary>
            Gets the dragable list.
            </summary>
            <value>The dragable list.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IElementManager.TunnelOutputList">
            <summary>
            Gets the tunnel output list.
            </summary>
            <value>The tunnel output list.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IElementManager.TunnelInputList">
            <summary>
            Gets the tunnel input list.
            </summary>
            <value>The tunnel input list.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IElementManager.SubWorkspaceMetaInfo">
            <summary>
            Gets the sub workspace meta info.
            </summary>
            <value>The sub workspace meta info.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IElementManager.SubWorkspaceMetaInfoSettings">
            <summary>
            Gets the sub workspace meta info settings.
            </summary>
            <value>The sub workspace meta info settings.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IElementManager.SubWorkspaceList">
            <summary>
            Gets the sub workspace list.
            </summary>
            <value>The sub workspace list.</value>
        </member>
        <member name="M:DragDrop.ElementManager.AddDragable(AnotherEditor.DragDrop.Interfaces.IDragContent)">
            <summary>
            Adds the dragable.
            </summary>
            <param name="DragContent">Content of the drag.</param>
        </member>
        <member name="M:DragDrop.ElementManager.AddElement(DragDrop.Interfaces.IBaseElement)">
            <summary>
            Adds the element.
            </summary>
            <param name="Element">The element.</param>
        </member>
        <member name="M:DragDrop.ElementManager.ContainsElement(System.Int32)">
            <summary>
            Determines whether the specified element contains element.
            </summary>
            <param name="Element">The element.</param>
            <returns>
            	<c>true</c> if the specified element contains element; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DragDrop.ElementManager.ContainsElement(DragDrop.Interfaces.IBaseElement)">
            <summary>
            Determines whether the specified element contains element.
            </summary>
            <param name="Element">The element.</param>
            <returns>
            	<c>true</c> if the specified element contains element; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DragDrop.ElementManager.GetElement(System.Int32)">
            <summary>
            Gets the element.
            </summary>
            <param name="thumbNr">The thumb nr.</param>
            <returns></returns>
        </member>
        <member name="M:DragDrop.ElementManager.GetElement(Cryptool.PluginBase.IPlugin)">
            <summary>
            Gets the element.
            </summary>
            <param name="plugin">The plugin.</param>
            <returns></returns>
        </member>
        <member name="M:DragDrop.ElementManager.GetInputElement(System.Int32)">
            <summary>
            Gets the input element.
            </summary>
            <param name="thumbNr">The thumb nr.</param>
            <returns></returns>
        </member>
        <member name="M:DragDrop.ElementManager.RemoveDragable(AnotherEditor.DragDrop.Interfaces.IDragContent)">
            <summary>
            Removes the dragable.
            </summary>
            <param name="DragContent">Content of the drag.</param>
        </member>
        <member name="M:DragDrop.ElementManager.RemoveElement(System.Int32)">
            <summary>
            Removes the element.
            </summary>
            <param name="Element">The element.</param>
        </member>
        <member name="P:DragDrop.ElementManager.DragableList">
            <summary>
            Gets the dragable list.
            </summary>
            <value>The dragable list.</value>
        </member>
        <member name="P:DragDrop.ElementManager.ElementList">
            <summary>
            Gets the element list.
            </summary>
            <value>The element list.</value>
        </member>
        <member name="P:DragDrop.ElementManager.InputElementList">
            <summary>
            Gets the input element list.
            </summary>
            <value>The input element list.</value>
        </member>
        <member name="P:DragDrop.ElementManager.SubWorkspaceList">
            <summary>
            Gets the sub workspace list.
            </summary>
            <value>The sub workspace list.</value>
        </member>
        <member name="P:DragDrop.ElementManager.SubWorkspaceMetaInfo">
            <summary>
            Gets the sub workspace meta info.
            </summary>
            <value>The sub workspace meta info.</value>
        </member>
        <member name="P:DragDrop.ElementManager.SubWorkspaceMetaInfoSettings">
            <summary>
            Gets the sub workspace meta info settings.
            </summary>
            <value>The sub workspace meta info settings.</value>
        </member>
        <member name="P:DragDrop.ElementManager.TunnelInputList">
            <summary>
            Gets the tunnel input list.
            </summary>
            <value>The tunnel input list.</value>
        </member>
        <member name="P:DragDrop.ElementManager.TunnelOutputList">
            <summary>
            Gets the tunnel output list.
            </summary>
            <value>The tunnel output list.</value>
        </member>
        <member name="T:AnotherEditor.DragDrop.Connectors.ConnectorAdorner">
            <summary>
            Adroner for connections. 
            </summary>
        </member>
        <member name="M:AnotherEditor.DragDrop.Connectors.ConnectorAdorner.#ctor(DragDrop.Interfaces.IWorkspaceManager,AnotherEditor.DragDrop.Connectors.Connector)">
            <summary>
            Initializes a new instance of the <see cref="T:AnotherEditor.DragDrop.Connectors.ConnectorAdorner"/> class.
            </summary>
            <param name="WorkspaceManager">The workspace manager.</param>
            <param name="SourceConnector">The source connector.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.Connectors.ConnectorAdorner.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseUp"/> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> that contains the event data. The event data reports that the mouse button was released.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.Connectors.ConnectorAdorner.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseMove"/> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.Connectors.ConnectorAdorner.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Called when [render].
            </summary>
            <param name="dc">The dc.</param>
        </member>
        <member name="P:AnotherEditor.DragDrop.Connectors.ConnectorAdorner.HitConnector">
            <summary>
            Gets or sets the hit connector.
            </summary>
            <value>The hit connector.</value>
        </member>
        <member name="T:AnotherEditor.AnotherEditor">
            <summary>
            Main class with Cryptool 2.0 IEitor interface handled by PluginManager.
            </summary>
        </member>
        <member name="M:AnotherEditor.AnotherEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AnotherEditor.AnotherEditor"/> class.
            </summary>
        </member>
        <member name="M:AnotherEditor.AnotherEditor.New">
            <summary>
            News this instance.
            </summary>
        </member>
        <member name="M:AnotherEditor.AnotherEditor.Open(System.String)">
            <summary>
            Opens the specified file name.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:AnotherEditor.AnotherEditor.Save(System.String)">
            <summary>
            Saves the specified file name.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:AnotherEditor.AnotherEditor.Add(System.Type)">
            <summary>
            Adds the specified type.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:AnotherEditor.AnotherEditor.AddEditorSpecific(Cryptool.PluginBase.EditorSpecificPluginInfo)">
            <summary>
            Adds the editor specific.
            </summary>
            <param name="espi">The espi.</param>
        </member>
        <member name="M:AnotherEditor.AnotherEditor.Undo">
            <summary>
            Undoes this instance.
            </summary>
        </member>
        <member name="M:AnotherEditor.AnotherEditor.Redo">
            <summary>
            Redoes this instance.
            </summary>
        </member>
        <member name="M:AnotherEditor.AnotherEditor.PreExecution">
            <summary>
            Dummy - not used here. 
            </summary>
        </member>
        <member name="M:AnotherEditor.AnotherEditor.Execute">
            <summary>
            Execute current workspace. 
            </summary>
        </member>
        <member name="M:AnotherEditor.AnotherEditor.PostExecution">
            <summary>
            Dummy - not used here. 
            </summary>
        </member>
        <member name="M:AnotherEditor.AnotherEditor.Pause">
            <summary>
            Dummy - not used here. 
            </summary>
        </member>
        <member name="M:AnotherEditor.AnotherEditor.Stop">
            <summary>
            Stops the running workspace. 
            </summary>
        </member>
        <member name="M:AnotherEditor.AnotherEditor.Initialize">
            <summary>
            Will be called from editor after restoring settings and before adding to workspace.
            </summary>
        </member>
        <member name="M:AnotherEditor.AnotherEditor.Dispose">
            <summary>
            Send dispose call to all plugins. 
            </summary>
        </member>
        <member name="M:AnotherEditor.AnotherEditor.SendOpenProjectFileEvent(System.String)">
            <summary>
            Sends the open project file event.
            </summary>
            <param name="Filename">The filename.</param>
        </member>
        <member name="M:AnotherEditor.AnotherEditor.LoadEditorSpecificPlugins">
            <summary>
            Loads the editor specific plugins.
            </summary>
        </member>
        <member name="M:AnotherEditor.AnotherEditor.ImportSubWorkspace(Cryptool.PluginBase.EditorSpecificPluginInfo)">
            <summary>
            Method is just for user convenience. Same function as the ribbon button. Presents
            an open file dialog and imports the selected sws. 
            </summary>
            <param name="espi">The espi.</param>
        </member>
        <member name="M:AnotherEditor.AnotherEditor.DeleteSubWorkspace(Cryptool.PluginBase.EditorSpecificPluginInfo)">
            <summary>
            Deletes the sub workspace.
            </summary>
            <param name="espi">The espi.</param>
        </member>
        <member name="M:AnotherEditor.AnotherEditor.ExportSubWorkspace(Cryptool.PluginBase.EditorSpecificPluginInfo)">
            <summary>
            Exports the sub workspace.
            </summary>
            <param name="espi">The espi.</param>
        </member>
        <member name="E:AnotherEditor.AnotherEditor.OnChangeDisplayLevel">
            <summary>
            Occurs when [on change display level].
            </summary>
        </member>
        <member name="E:AnotherEditor.AnotherEditor.OnSelectedPluginChanged">
            <summary>
            Occurs when [on selected plugin changed].
            </summary>
        </member>
        <member name="E:AnotherEditor.AnotherEditor.OnProjectTitleChanged">
            <summary>
            Occurs when [on project title changed].
            </summary>
        </member>
        <member name="E:AnotherEditor.AnotherEditor.OnOpenProjectFile">
            <summary>
            Occurs when [on open project file].
            </summary>
        </member>
        <member name="E:AnotherEditor.AnotherEditor.OnEditorSpecificPluginsChanged">
            <summary>
            Occurs when [on editor specific plugins changed].
            </summary>
        </member>
        <member name="E:AnotherEditor.AnotherEditor.OnPluginStatusChanged">
            <summary>
            Occurs when [on plugin status changed].
            </summary>
        </member>
        <member name="E:AnotherEditor.AnotherEditor.OnGuiLogNotificationOccured">
            <summary>
            Occurs when [on GUI log notification occured].
            </summary>
        </member>
        <member name="E:AnotherEditor.AnotherEditor.OnPluginProgressChanged">
            <summary>
            Occurs when [on plugin progress changed].
            </summary>
        </member>
        <member name="E:AnotherEditor.AnotherEditor.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:AnotherEditor.AnotherEditor.PluginManager">
            <summary>
            Gets or sets the plugin manager.
            </summary>
            <value>The plugin manager.</value>
        </member>
        <member name="P:AnotherEditor.AnotherEditor.DisplayLevel">
            <summary>
            Gets or sets the display level. Can be reverted using the OnChangeDisplayLevel event.
            </summary>
            <value>The display level.</value>
        </member>
        <member name="P:AnotherEditor.AnotherEditor.Settings">
            <summary>
            Gets or sets the settings.
            </summary>
            <value>The settings.</value>
        </member>
        <member name="P:AnotherEditor.AnotherEditor.CanUndo">
            <summary>
            Gets a value indicating whether this instance can undo.
            </summary>
            <value><c>true</c> if this instance can undo; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:AnotherEditor.AnotherEditor.CanRedo">
            <summary>
            Gets a value indicating whether this instance can redo.
            </summary>
            <value><c>true</c> if this instance can redo; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:AnotherEditor.AnotherEditor.CanExecute">
            <summary>
            Gets a value indicating whether this instance can execute.
            </summary>
            <value>
            	<c>true</c> if this instance can execute; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:AnotherEditor.AnotherEditor.CanStop">
            <summary>
            Gets a value indicating whether this instance can stop.
            </summary>
            <value><c>true</c> if this instance can stop; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:AnotherEditor.AnotherEditor.HasChanges">
            <summary>
            Gets or sets a value indicating whether this instance has changes.
            </summary>
            <value>
            	<c>true</c> if this instance has changes; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:AnotherEditor.AnotherEditor.Presentation">
            <summary>
            The visual part of the editor.
            </summary>
            <value>The presentation.</value>
        </member>
        <member name="P:AnotherEditor.AnotherEditor.QuickWatchPresentation">
            <summary>
            Dummy - not used here. 
            </summary>
            <value>The quick watch presentation.</value>
        </member>
        <member name="P:AnotherEditor.AnotherEditor.EditorSpecificPlugins">
            <summary>
            Gets the editor specific plugins, e.g. connector plugins to build subworkspace and the
            currently available subworkspaces.
            </summary>
            <value>The editor specific plugins.</value>
        </member>
        <member name="T:AnotherEditor.SWS.TunnelInputSettings">
            <summary>
            The properties in this class are set using the "normal" binding mechanism in the
            settings pane. But they are accesed direct in class SubWorkspace that has specific knowledge
            about the tunnel elements and does not use the Setting-Interface.
            </summary>
        </member>
        <member name="M:AnotherEditor.SWS.TunnelInputSettings.OnPropertyChanged(System.String)">
            <summary>
            Called when [property changed].
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:AnotherEditor.SWS.TunnelInputSettings.Caption">
            <summary>
            Gets or sets the caption.
            </summary>
            <value>The caption.</value>
        </member>
        <member name="P:AnotherEditor.SWS.TunnelInputSettings.ToolTip">
            <summary>
            Gets or sets the tool tip.
            </summary>
            <value>The tool tip.</value>
        </member>
        <member name="P:AnotherEditor.SWS.TunnelInputSettings.IsMandatory">
            <summary>
            Gets or sets a value indicating whether this instance is mandatory.
            </summary>
            <value>
            	<c>true</c> if this instance is mandatory; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:AnotherEditor.SWS.TunnelInputSettings.HasChanges">
            <summary>
            Gets or sets a value indicating whether this instance has changes.
            </summary>
            <value>
            	<c>true</c> if this instance has changes; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:AnotherEditor.SWS.TunnelInputSettings.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:AnotherEditor.SWS.TunnelOutputSettings">
            <summary>
            The properties in this class are set using the "normal" binding mechanism in the
            settings pane. But they are accesed direct in class SubWorkspace that has specific knowledge
            about the tunnel elements and does not use the Setting-Interface.
            </summary>
        </member>
        <member name="M:AnotherEditor.SWS.TunnelOutputSettings.OnPropertyChanged(System.String)">
            <summary>
            Called when [property changed].
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:AnotherEditor.SWS.TunnelOutputSettings.Caption">
            <summary>
            Gets or sets the caption for the dynmaic property. 
            </summary>
            <value>The caption.</value>
        </member>
        <member name="P:AnotherEditor.SWS.TunnelOutputSettings.ToolTip">
            <summary>
            Gets or sets the tool tip fot the dynamic property. 
            </summary>
            <value>The tool tip.</value>
        </member>
        <member name="P:AnotherEditor.SWS.TunnelOutputSettings.HasChanges">
            <summary>
            Gets or sets a value indicating whether this instance has changes.
            </summary>
            <value>
            	<c>true</c> if this instance has changes; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:AnotherEditor.SWS.TunnelOutputSettings.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:AnotherEditor.DragDrop.Connectors.Connection">
            <summary>
            The connections between the dock points.
            </summary>
        </member>
        <member name="T:AnotherEditor.DragDrop.Interfaces.ISelectable">
            <summary>
            Selectable items implement this interface.
            </summary>
        </member>
        <member name="P:AnotherEditor.DragDrop.Interfaces.ISelectable.IsSelected">
            <summary>
            Gets or sets a value indicating whether this instance is selected.
            </summary>
            <value>
            	<c>true</c> if this instance is selected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:AnotherEditor.DragDrop.Connectors.Connection.#ctor(DragDrop.Interfaces.IWorkspaceManager,AnotherEditor.DragDrop.Connectors.Connector,AnotherEditor.DragDrop.Connectors.Connector)">
            <summary>
            Initializes a new instance of the <see cref="T:AnotherEditor.DragDrop.Connectors.Connection"/> class.
            </summary>
            <param name="WorkspaceManager">The workspace manager.</param>
            <param name="Source">The source.</param>
            <param name="Sink">The sink.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.Connectors.Connection.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:AnotherEditor.DragDrop.Connectors.Connection.OnPropertyChanged(System.String)">
            <summary>
            Called when [property changed].
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:AnotherEditor.DragDrop.Connectors.Connection.Source">
            <summary>
            Gets or sets the source.
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.Connectors.Connection.Sink">
            <summary>
            Gets or sets the sink.
            </summary>
            <value>The sink.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.Connectors.Connection.PathGeometry">
            <summary>
            Gets or sets the path geometry.
            </summary>
            <value>The path geometry.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.Connectors.Connection.AnchorPositionSource">
            <summary>
            Gets or sets the anchor position source.
            </summary>
            <value>The anchor position source.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.Connectors.Connection.AnchorAngleSource">
            <summary>
            Gets or sets the anchor angle source.
            </summary>
            <value>The anchor angle source.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.Connectors.Connection.AnchorPositionSink">
            <summary>
            Gets or sets the anchor position sink.
            </summary>
            <value>The anchor position sink.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.Connectors.Connection.AnchorAngleSink">
            <summary>
            Gets or sets the anchor angle sink.
            </summary>
            <value>The anchor angle sink.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.Connectors.Connection.SourceArrowSymbol">
            <summary>
            Gets or sets the source arrow symbol.
            </summary>
            <value>The source arrow symbol.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.Connectors.Connection.SinkArrowSymbol">
            <summary>
            Gets or sets the sink arrow symbol.
            </summary>
            <value>The sink arrow symbol.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.Connectors.Connection.LabelPosition">
            <summary>
            Gets or sets the label position.
            </summary>
            <value>The label position.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.Connectors.Connection.StrokeDashArray">
            <summary>
            Gets or sets the stroke dash array.
            </summary>
            <value>The stroke dash array.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.Connectors.Connection.IsRunning">
            <summary>
            Gets or sets a value indicating whether this instance is running.
            </summary>
            <value>
            	<c>true</c> if this instance is running; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:AnotherEditor.DragDrop.Connectors.Connection.IsSelected">
            <summary>
            Gets or sets a value indicating whether this instance is selected.
            </summary>
            <value>
            	<c>true</c> if this instance is selected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:AnotherEditor.DragDrop.Connectors.Connection.IsInPlayMode">
            <summary>
            If true no edit possible.
            </summary>
            <value>
            	<c>true</c> if this instance is in play mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:AnotherEditor.DragDrop.Connectors.Connection.IsSubWorkspace">
            <summary>
            If true no edit possible.
            </summary>
            <value>
            	<c>true</c> if this instance is sub workspace; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:AnotherEditor.DragDrop.Connectors.Connection.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:AnotherEditor.DragDrop.Connectors.ArrowSymbol">
            <summary>
            Different arrows symbols
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.Connectors.ArrowSymbol.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.Connectors.ArrowSymbol.Arrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.Connectors.ArrowSymbol.Diamond">
            <summary>
            
            </summary>
        </member>
        <member name="T:DragDrop.Thumbs.BaseElement">
            <summary>
            Basic Container for IPlugin elements. 
            </summary>
        </member>
        <member name="T:DragDrop.Interfaces.IBaseElement">
            <summary>
            Base class that contains the plugin and is added to workspace. 
            </summary>
        </member>
        <member name="M:DragDrop.Interfaces.IBaseElement.RestorePosition">
            <summary>
            Restores the position after loading a save file. 
            </summary>
        </member>
        <member name="M:DragDrop.Interfaces.IBaseElement.GetDockPointCoordinates(System.Windows.Shapes.Path)">
            <summary>
            Gets the dock point coordinates for the path object. 
            </summary>
            <param name="pathDockPoint">The path dock point.</param>
            <returns></returns>
        </member>
        <member name="M:DragDrop.Interfaces.IBaseElement.GetConnectorFromVisual(System.Windows.Shapes.Path)">
            <summary>
            Gets the connector from visual.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:DragDrop.Interfaces.IBaseElement.ExecutePlugin(System.Int32)">
            <summary>
            Executes the plugin.
            </summary>
            <param name="ExecutionDelay">The execution delay.</param>
        </member>
        <member name="M:DragDrop.Interfaces.IBaseElement.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
        </member>
        <member name="M:DragDrop.Interfaces.IBaseElement.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:DragDrop.Interfaces.IBaseElement.PreExecution">
            <summary>
            Pres the execution.
            </summary>
        </member>
        <member name="M:DragDrop.Interfaces.IBaseElement.PostExecution">
            <summary>
            Posts the execution.
            </summary>
        </member>
        <member name="M:DragDrop.Interfaces.IBaseElement.ClearChainRun">
            <summary>
            Clears the chain run.
            </summary>
        </member>
        <member name="M:DragDrop.Interfaces.IBaseElement.UnsetConnectionHighlights">
            <summary>
            Unsets the connection highlights.
            </summary>
        </member>
        <member name="M:DragDrop.Interfaces.IBaseElement.GetOutputConnectorForPropertyName(System.String)">
            <summary>
            Gets the name of the output connector for property.
            </summary>
            <param name="PropertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="P:DragDrop.Interfaces.IBaseElement.Nr">
            <summary>
            Gets or sets the nr.
            </summary>
            <value>The nr.</value>
        </member>
        <member name="E:DragDrop.Interfaces.IBaseElement.SizeChanged">
            <summary>
            Occurs when [size changed].
            </summary>
        </member>
        <member name="P:DragDrop.Interfaces.IBaseElement.Restore_X">
            <summary>
            Canvas position in save moment
            </summary>
            <value>The restore_ X.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IBaseElement.Restore_Y">
            <summary>
            Canvas position in save moment
            </summary>
            <value>The restore_ Y.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IBaseElement.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IBaseElement.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IBaseElement.ContextMenu">
            <summary>
            Gets or sets the context menu.
            </summary>
            <value>The context menu.</value>
        </member>
        <member name="E:DragDrop.Interfaces.IBaseElement.MouseDoubleClick">
            <summary>
            Occurs when [mouse double click].
            </summary>
        </member>
        <member name="P:DragDrop.Interfaces.IBaseElement.ToolTip">
            <summary>
            Gets or sets the tool tip.
            </summary>
            <value>The tool tip.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IBaseElement.DockPointsIn">
            <summary>
            Gets the dock points in.
            </summary>
            <value>The dock points in.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IBaseElement.DockPointsOut">
            <summary>
            Gets the dock points out.
            </summary>
            <value>The dock points out.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IBaseElement.Plugin">
            <summary>
            Gets or sets the plugin.
            </summary>
            <value>The plugin.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IBaseElement.Visual">
            <summary>
            Gets the visual.
            </summary>
            <value>The visual.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IBaseElement.ActualWidth">
            <summary>
            Gets the actual width.
            </summary>
            <value>The actual width.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IBaseElement.ActualHeight">
            <summary>
            Gets the actual height.
            </summary>
            <value>The actual height.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IBaseElement.IsBlocked">
            <summary>
            Gets or sets a value indicating whether this instance is blocked by execution.
            </summary>
            <value>
            	<c>true</c> if this instance is blocked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DragDrop.Interfaces.IBaseElement.Stop">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:DragDrop.Interfaces.IBaseElement"/> is stop.
            </summary>
            <value><c>true</c> if stop; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IBaseElement.CanExecute">
            <summary>
            Gets a value indicating whether this instance can execute.
            </summary>
            <value>
            	<c>true</c> if this instance can execute; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DragDrop.Interfaces.IBaseElement.WillBeExecutedInRun">
            <summary>
            Gets a value indicating whether [will be executed in run].
            </summary>
            <value>
            	<c>true</c> if [will be executed in run]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:DragDrop.Thumbs.BaseElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DragDrop.Thumbs.BaseElement"/> class.
            </summary>
        </member>
        <member name="M:DragDrop.Thumbs.BaseElement.PreExecution">
            <summary>
            Set pre executing stuff like transparency and running flag. 
            </summary>
        </member>
        <member name="M:DragDrop.Thumbs.BaseElement.PostExecution">
            <summary>
            Will call Plugin.PostExecution and connectors.RunFinished to un-highlight
            the connections. 
            </summary>
        </member>
        <member name="M:DragDrop.Thumbs.BaseElement.UnsetConnectionHighlights">
            <summary>
            Unsets the connection highlights.
            </summary>
        </member>
        <member name="M:DragDrop.Thumbs.BaseElement.ClearChainRun">
            <summary>
            Clears the chain run. Remove progress rectangle, transparency, IsRunning flag and log markers. 
            </summary>
        </member>
        <member name="M:DragDrop.Thumbs.BaseElement.Initialize">
            <summary>
            Forwards the initialize calls
            </summary>
        </member>
        <member name="M:DragDrop.Thumbs.BaseElement.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
        </member>
        <member name="M:DragDrop.Thumbs.BaseElement.RestorePosition">
            <summary>
            Restores the position.
            </summary>
        </member>
        <member name="M:DragDrop.Thumbs.BaseElement.GetDockPointCoordinates(System.Windows.Shapes.Path)">
            <summary>
            Calculate the point-coordinate for a given visual dock-point of this thumb.
            </summary>
            <param name="pathDockPoint">visual dock-point</param>
            <returns>point on canvas</returns>
        </member>
        <member name="M:DragDrop.Thumbs.BaseElement.GetConnectorFromVisual(System.Windows.Shapes.Path)">
            <summary>
            Get the dockpoint for a given visual-dockpoint. Currently stored in visual
            dockpoint-tag.
            </summary>
            <param name="pathDockPoint">The path dock point.</param>
            <returns>The dock point belonging to the given path.</returns>
        </member>
        <member name="M:DragDrop.Thumbs.BaseElement.GetOutputConnectorForPropertyName(System.String)">
            <summary>
            Gets the connector for the proeprty name.
            </summary>
            <param name="PropertyName">Name of the property.</param>
            <returns>The connector belonging to the given property of null if not found.</returns>
        </member>
        <member name="M:DragDrop.Thumbs.BaseElement.PluginDynamicPropertiesChanged(Cryptool.PluginBase.IPlugin)">
            <summary>
            Handles the plugin properties changed event => rebuild the connectors.
            </summary>
            <param name="plugin">The plugin.</param>
        </member>
        <member name="M:DragDrop.Thumbs.BaseElement.SetDockPoints">
            <summary>
            Create the visual elements dock points based on the attributes and dynamic properties. 
            </summary>
        </member>
        <member name="M:DragDrop.Thumbs.BaseElement.Select">
            <summary>
            Selects this instance.
            </summary>
        </member>
        <member name="M:DragDrop.Thumbs.BaseElement.Unselect">
            <summary>
            Unselects this instance.
            </summary>
        </member>
        <member name="M:DragDrop.Thumbs.BaseElement.RemoveMarkers">
            <summary>
            Removes the log markers
            </summary>
        </member>
        <member name="M:DragDrop.Thumbs.BaseElement.ExecutePlugin(System.Int32)">
            <summary>
            Executes the plugin. 
            </summary>
            <param name="ExecutionDelay">The execution delay.</param>
        </member>
        <member name="M:DragDrop.Thumbs.BaseElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Renaming on delayed double click.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:DragDrop.Thumbs.BaseElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Used when renaming element on workspace. Main F2-Key is handled in
            SelectionManager, because we don't get F2 event here if user has
            just clicked element and not TextBlock.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:DragDrop.Thumbs.BaseElement.OnPropertyChanged(System.String)">
            <summary>
            Called when [property changed].
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:DragDrop.Thumbs.BaseElement.DragDrop#Interfaces#IBaseElement#add_SizeChanged(System.Windows.SizeChangedEventHandler)">
            <summary>
            Basic Container for IPlugin elements. 
            </summary>
        </member>
        <member name="M:DragDrop.Thumbs.BaseElement.DragDrop#Interfaces#IBaseElement#remove_SizeChanged(System.Windows.SizeChangedEventHandler)">
            <summary>
            Basic Container for IPlugin elements. 
            </summary>
        </member>
        <member name="M:DragDrop.Thumbs.BaseElement.DragDrop#Interfaces#IBaseElement#get_ContextMenu">
            <summary>
            Basic Container for IPlugin elements. 
            </summary>
        </member>
        <member name="M:DragDrop.Thumbs.BaseElement.DragDrop#Interfaces#IBaseElement#set_ContextMenu(System.Windows.Controls.ContextMenu)">
            <summary>
            Basic Container for IPlugin elements. 
            </summary>
        </member>
        <member name="M:DragDrop.Thumbs.BaseElement.DragDrop#Interfaces#IBaseElement#add_MouseDoubleClick(System.Windows.Input.MouseButtonEventHandler)">
            <summary>
            Basic Container for IPlugin elements. 
            </summary>
        </member>
        <member name="M:DragDrop.Thumbs.BaseElement.DragDrop#Interfaces#IBaseElement#remove_MouseDoubleClick(System.Windows.Input.MouseButtonEventHandler)">
            <summary>
            Basic Container for IPlugin elements. 
            </summary>
        </member>
        <member name="M:DragDrop.Thumbs.BaseElement.DragDrop#Interfaces#IBaseElement#get_ToolTip">
            <summary>
            Basic Container for IPlugin elements. 
            </summary>
        </member>
        <member name="M:DragDrop.Thumbs.BaseElement.DragDrop#Interfaces#IBaseElement#set_ToolTip(System.Object)">
            <summary>
            Basic Container for IPlugin elements. 
            </summary>
        </member>
        <member name="P:DragDrop.Thumbs.BaseElement.Width">
            <summary>
            Gets or sets the width of the element.  This is a dependency property.
            </summary>
            <value></value>
            <returns>The width of the element, in device-independent units (1/96th inch per unit). The default value is <see cref="F:System.Double.NaN"/>. This value must be equal to or greater than 0.0. See Remarks for upper bound information.</returns>
        </member>
        <member name="P:DragDrop.Thumbs.BaseElement.Height">
            <summary>
            Gets or sets the suggested height of the element.  This is a dependency property.
            </summary>
            <value></value>
            <returns>The height of the element, in device-independent units (1/96th inch per unit). The default value is <see cref="F:System.Double.NaN"/>. This value must be equal to or greater than 0.0. See Remarks for upper bound information.</returns>
        </member>
        <member name="P:DragDrop.Thumbs.BaseElement.Restore_X">
            <summary>
            Canvas position in save moment
            </summary>
            <value>The restore_ X.</value>
        </member>
        <member name="P:DragDrop.Thumbs.BaseElement.Restore_Y">
            <summary>
            Canvas position in save moment
            </summary>
            <value>The restore_ Y.</value>
        </member>
        <member name="P:DragDrop.Thumbs.BaseElement.Nr">
            <summary>
            Gets or sets the nr of the element. This number is used to handle so connections between the 
            plugins.
            </summary>
            <value>The nr.</value>
        </member>
        <member name="P:DragDrop.Thumbs.BaseElement.Visual">
            <summary>
            Gets the visual.
            </summary>
            <value>The visual.</value>
        </member>
        <member name="P:DragDrop.Thumbs.BaseElement.DockPointsIn">
            <summary>
            Gets the dock points in.
            </summary>
            <value>The dock points in.</value>
        </member>
        <member name="P:DragDrop.Thumbs.BaseElement.DockPointsOut">
            <summary>
            Gets the dock points out.
            </summary>
            <value>The dock points out.</value>
        </member>
        <member name="P:DragDrop.Thumbs.BaseElement.Plugin">
            <summary>
            Gets or sets the plugin.
            </summary>
            <value>The plugin.</value>
        </member>
        <member name="P:DragDrop.Thumbs.BaseElement.CanExecute">
            <summary>
            Check if all inputs are set - if true this element is ready for execution.
            </summary>
        </member>
        <member name="P:DragDrop.Thumbs.BaseElement.WillBeExecutedInRun">
            <summary>
            Gets a value indicating whether element will be executed in run.
            </summary>
            <value>
            	<c>true</c> if element will be executed in run; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DragDrop.Thumbs.BaseElement.IsSelected">
            <summary>
            Gets or sets a value indicating whether this instance is selected.
            </summary>
            <value>
            	<c>true</c> if this instance is selected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DragDrop.Thumbs.BaseElement.IsExpanded">
            <summary>
            Gets or sets a value indicating whether this instance is expanded.
            </summary>
            <value>
            	<c>true</c> if this instance is expanded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DragDrop.Thumbs.BaseElement.IsBlocked">
            <summary>
            Value is used by workspaceManager to determine if the plugin can execute again 
            or execution is still in progress. 
            </summary>
            <value>
            	<c>true</c> if this instance is blocked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DragDrop.Thumbs.BaseElement.Stop">
            <summary>
            Flag is used by workspaceManager to determine if postExecution has to be called on 
            Execution callback. 
            </summary>
            <value><c>true</c> if stop; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:DragDrop.Thumbs.BaseElement.ActualWidth">
            <summary>
            Gets the rendered width of this element.  This is a dependency property.
            </summary>
            <value></value>
            <returns>The element's width, as a value in device-independent units (1/96th inch per unit). The default value is 0 (zero).</returns>
        </member>
        <member name="P:DragDrop.Thumbs.BaseElement.ActualHeight">
            <summary>
            Gets the rendered height of this element.  This is a dependency property.
            </summary>
            <value></value>
            <returns>The element's height, as a value in device-independent units (1/96th inch per unit). The default value is 0 (zero).</returns>
        </member>
        <member name="E:DragDrop.Thumbs.BaseElement.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:DragDrop.Commands.MacroCommand">
            <summary>
            Makro Command using Composite Pattern. 
            </summary>  
        </member>
        <member name="M:DragDrop.Commands.MacroCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DragDrop.Commands.MacroCommand"/> class.
            </summary>
        </member>
        <member name="M:DragDrop.Commands.MacroCommand.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DragDrop.Commands.MacroCommand"/> class.
            </summary>
            <param name="title">The title.</param>
        </member>
        <member name="M:DragDrop.Commands.MacroCommand.init">
            <summary>
            Inits this instance.
            </summary>
        </member>
        <member name="M:DragDrop.Commands.MacroCommand.AddCmd(DragDrop.Interfaces.IWorkspaceCommand)">
            <summary>
            Adds the CMD.
            </summary>
            <param name="cmd">The CMD.</param>
        </member>
        <member name="M:DragDrop.Commands.MacroCommand.Execute">
            <summary>
            Executes this instance.
            </summary>
        </member>
        <member name="M:DragDrop.Commands.MacroCommand.Undo">
            <summary>
            Undoes this instance.
            </summary>
        </member>
        <member name="M:DragDrop.Commands.MacroCommand.Redo">
            <summary>
            Redoes this instance.
            </summary>
        </member>
        <member name="E:DragDrop.Commands.MacroCommand.OnGuiLogNotificationOccured">
            <summary>
            Occurs when [on GUI log notification occured].
            </summary>
        </member>
        <member name="P:DragDrop.Commands.MacroCommand.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="T:AnotherEditor.DragDrop.Events.ChildEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:AnotherEditor.DragDrop.Events.ChildEventArgs.#ctor(DragDrop.Interfaces.IBaseElement)">
            <summary>
            Initializes a new instance of the <see cref="T:AnotherEditor.DragDrop.Events.ChildEventArgs"/> class.
            </summary>
            <param name="thumb">The thumb.</param>
        </member>
        <member name="P:AnotherEditor.DragDrop.Events.ChildEventArgs.Child">
            <summary>
            Gets or sets the child.
            </summary>
            <value>The child.</value>
        </member>
        <member name="T:AnotherEditor.Manager.PluginInstanceManager">
            <summary>
            Used to cretea Plugin instances based on the types fetched from PluginManager. 
            </summary>
        </member>
        <member name="M:AnotherEditor.Manager.PluginInstanceManager.CreatePluginInstance(System.String,System.String)">
            <summary>
            Creates the plugin instance.
            </summary>
            <param name="assemblyQualifiedName">Name of the assembly qualified.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="P:AnotherEditor.Manager.PluginInstanceManager.PluginManager">
            <summary>
            Gets or sets the plugin manager.
            </summary>
            <value>The plugin manager.</value>
        </member>
        <member name="P:AnotherEditor.Manager.PluginInstanceManager.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:AnotherEditor.AnotherEditorSettings">
            <summary>
            Settings of the plugin editor
            </summary>
        </member>
        <member name="F:AnotherEditor.AnotherEditorSettings.ZOOM_MIN">
            <summary>
            Minimum zoom value.
            </summary>
        </member>
        <member name="F:AnotherEditor.AnotherEditorSettings.ZOOM_MAX">
            <summary>
            Maximum zoom value.
            </summary>
        </member>
        <member name="F:AnotherEditor.AnotherEditorSettings.MIN_EXECUTION_DELAY">
            <summary>
            Minimum execution delay. 
            </summary>
        </member>
        <member name="M:AnotherEditor.AnotherEditorSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AnotherEditor.AnotherEditorSettings"/> class.
            </summary>
            
        </member>
        <member name="M:AnotherEditor.AnotherEditorSettings.AddWorkspace">
            <summary>
            Adds the workspace.
            </summary>
        </member>
        <member name="M:AnotherEditor.AnotherEditorSettings.RemoveWorkspace">
            <summary>
            Removes the workspace.
            </summary>
        </member>
        <member name="M:AnotherEditor.AnotherEditorSettings.ImportSubWorkspace">
            <summary>
            Exports the sub workspace.
            </summary>
        </member>
        <member name="M:AnotherEditor.AnotherEditorSettings.OnPropertyChanged(System.String)">
            <summary>
            Called when [property changed].
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:AnotherEditor.AnotherEditorSettings.ProjectManager">
            <summary>
            Gets or sets the project manager.
            </summary>
            <value>The project manager.</value>
        </member>
        <member name="P:AnotherEditor.AnotherEditorSettings.ExtraTabGroup">
            <summary>
            Gets or sets a value indicating whether [extra tab group].
            </summary>
            <value><c>true</c> if [extra tab group]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:AnotherEditor.AnotherEditorSettings.GlobalExecutionDelay">
            <summary>
            Gets or sets the global execution delay.
            </summary>
            <value>The global execution delay.</value>
        </member>
        <member name="P:AnotherEditor.AnotherEditorSettings.DelayValue">
            <summary>
            Gets or sets the delay value.
            </summary>
            <value>The delay value.</value>
        </member>
        <member name="P:AnotherEditor.AnotherEditorSettings.SnapToGrid">
            <summary>
            Gets or sets the snap to grid vertical.
            </summary>
            <value>The snap to grid vertical.</value>
        </member>
        <member name="P:AnotherEditor.AnotherEditorSettings.Offset">
            <summary>
            Gets or sets the delay value.
            </summary>
            <value>The delay value.</value>
        </member>
        <member name="P:AnotherEditor.AnotherEditorSettings.MemUsage">
            <summary>
            Gets or sets the global execution delay.
            </summary>
            <value>The global execution delay.</value>
        </member>
        <member name="P:AnotherEditor.AnotherEditorSettings.CollectionWorkspaces">
            <summary>
            Gets or sets the collection workspaces.
            </summary>
            <value>The collection workspaces.</value>
        </member>
        <member name="P:AnotherEditor.AnotherEditorSettings.CurrentWorkspace">
            <summary>
            Gets or sets the current workspace.
            </summary>
            <value>The current workspace.</value>
        </member>
        <member name="E:AnotherEditor.AnotherEditorSettings.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:AnotherEditor.AnotherEditorSettings.HasChanges">
            <summary>
            Gets or sets a value indicating whether this instance has changes.
            </summary>
            <value>
            	<c>true</c> if this instance has changes; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:AnotherEditor.AnotherEditorSettings.OnAnotherEditorStatusBarTextChanged">
            <summary>
            Occurs when [on another editor status bar text changed].
            </summary>    
        </member>
        <member name="T:AnotherEditor.SWS.SubWorkspaceSettings">
            <summary>
            Dummy settings class for SubWorkspace. 
            </summary>
        </member>
        <member name="P:AnotherEditor.SWS.SubWorkspaceSettings.CanChangeProperty">
            <summary>
            Gets or sets a value indicating whether this instance can change property.
            </summary>
            <value>
            	<c>true</c> if this instance can change property; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:AnotherEditor.SWS.SubWorkspaceSettings.HasChanges">
            <summary>
            Gets or sets a value indicating whether this instance has changes.
            </summary>
            <value>
            	<c>true</c> if this instance has changes; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:AnotherEditor.SWS.SubWorkspaceSettings.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:AnotherEditor.Properties.Exceptions">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Exceptions.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Exceptions.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Exceptions.connectors_same_direction">
            <summary>
              Looks up a localized string similar to Can&apos;t connect two connectors with same direction..
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Exceptions.incompatible_connector_types">
            <summary>
              Looks up a localized string similar to Types:{0} and {1} can&apos;t be connected..
            </summary>
        </member>
        <member name="P:AnotherEditor.Properties.Exceptions.input_already_connected">
            <summary>
              Looks up a localized string similar to Input is already connected..
            </summary>
        </member>
        <member name="T:AnotherEditor.Helper.QuickWatchContentControl">
            <summary>
            This is a dummy-helper class used as container for the quickWatch content. 
            In class DragDropManager in combination with VisualTreeHelperEx it is used 
            as search target OnPreviewMouseLeftButtonDown. If this class is found we know
            that the click was performed on an item in the quickWatchArea, so the DragDropManager
            does not handle that click and returns. This clicks have to be handled by
            the content of the QuickWatchk like buttons and scrollbars.
            </summary>
        </member>
        <member name="T:DragDrop.Commands.SwitchDockPointsCommand">
            <summary>
            This command is used to change an existing connection between to elements. That
            means set a new start or end-point to an connection. 
            </summary>
        </member>
        <member name="M:DragDrop.Commands.SwitchDockPointsCommand.#ctor(DragDrop.Interfaces.IWorkspaceManager,DragDrop.Interfaces.IConnector,DragDrop.Interfaces.IConnector,AnotherEditor.DragDrop.Connectors.Connection)">
            <summary>
            Initializes a new instance of the <see cref="T:DragDrop.Commands.SwitchDockPointsCommand"/> class.
            </summary>
            <param name="WorkspaceManager">The workspace manager.</param>
            <param name="OldDockPoint">The old dock point.</param>
            <param name="NewDockPoint">The new dock point.</param>
        </member>
        <member name="M:DragDrop.Commands.SwitchDockPointsCommand.Execute">
            <summary>
            Executes this instance.
            </summary>
        </member>
        <member name="M:DragDrop.Commands.SwitchDockPointsCommand.Undo">
            <summary>
            Undoes this instance.
            </summary>
        </member>
        <member name="M:DragDrop.Commands.SwitchDockPointsCommand.Redo">
            <summary>
            Redoes this instance.
            </summary>
        </member>
        <member name="E:DragDrop.Commands.SwitchDockPointsCommand.OnGuiLogNotificationOccured">
            <summary>
            Occurs when [on GUI log notification occured].
            </summary>
        </member>
        <member name="P:DragDrop.Commands.SwitchDockPointsCommand.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="T:DragDrop.Commands.ConnectDockPointsCommand">
            <summary>
            Connects to dockPoints of plugins.
            </summary>
        </member>
        <member name="M:DragDrop.Commands.ConnectDockPointsCommand.#ctor(DragDrop.Interfaces.IWorkspaceManager,DragDrop.Interfaces.IConnector,DragDrop.Interfaces.IConnector)">
            <summary>
            Initializes a new instance of the <see cref="T:DragDrop.Commands.ConnectDockPointsCommand"/> class.
            </summary>
            <param name="WorkspaceManager">The workspace manager.</param>
            <param name="DockPointIn">The dock point in.</param>
            <param name="DockPointOut">The dock point out.</param>
        </member>
        <member name="M:DragDrop.Commands.ConnectDockPointsCommand.Execute">
            <summary>
            Executes this instance.
            </summary>
        </member>
        <member name="M:DragDrop.Commands.ConnectDockPointsCommand.Undo">
            <summary>
            Undoes this instance.
            </summary>
        </member>
        <member name="M:DragDrop.Commands.ConnectDockPointsCommand.Redo">
            <summary>
            Redoes this instance.
            </summary>
        </member>
        <member name="E:DragDrop.Commands.ConnectDockPointsCommand.OnGuiLogNotificationOccured">
            <summary>
            Occurs when [on GUI log notification occured].
            </summary>
        </member>
        <member name="P:DragDrop.Commands.ConnectDockPointsCommand.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="T:AnotherEditor.SWS.TunnelInput">
            <summary>
            Editor specific plugin used do create a input property on a SubWorkspace. 
            </summary>
        </member>
        <member name="M:AnotherEditor.SWS.TunnelInput.PreExecution">
            <summary>
            Dispose. 
            </summary>
        </member>
        <member name="M:AnotherEditor.SWS.TunnelInput.Execute">
            <summary>
            Fire output and set progress to 100%
            </summary>
        </member>
        <member name="M:AnotherEditor.SWS.TunnelInput.PostExecution">
            <summary>
            Dispose. 
            </summary>
        </member>
        <member name="M:AnotherEditor.SWS.TunnelInput.Pause">
            <summary>
            Not defined yet.
            </summary>
        </member>
        <member name="M:AnotherEditor.SWS.TunnelInput.Stop">
            <summary>
            Dummy - not used. 
            </summary>
        </member>
        <member name="M:AnotherEditor.SWS.TunnelInput.Initialize">
            <summary>
            Dummy - not used. 
            </summary>
        </member>
        <member name="M:AnotherEditor.SWS.TunnelInput.Dispose">
            <summary>
            Close streams. 
            </summary>
        </member>
        <member name="M:AnotherEditor.SWS.TunnelInput.OnPropertyChanged(System.String)">
            <summary>
            Called when [property changed].
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:AnotherEditor.SWS.TunnelInput.InputValue">
            <summary>
            Gets or sets the input value.
            </summary>
            <value>The input value.</value>
        </member>
        <member name="E:AnotherEditor.SWS.TunnelInput.OnPluginStatusChanged">
            <summary>
            Occurs when [on plugin status changed].
            </summary>
        </member>
        <member name="E:AnotherEditor.SWS.TunnelInput.OnGuiLogNotificationOccured">
            <summary>
            Occurs when [on GUI log notification occured].
            </summary>
        </member>
        <member name="E:AnotherEditor.SWS.TunnelInput.OnPluginProgressChanged">
            <summary>
            Occurs when [on plugin progress changed].
            </summary>
        </member>
        <member name="P:AnotherEditor.SWS.TunnelInput.Settings">
            <summary>
            Gets the settings.
            </summary>
            <value>The settings.</value>
        </member>
        <member name="P:AnotherEditor.SWS.TunnelInput.TunnelSettings">
            <summary>
            Gets the tunnel settings.
            </summary>
            <value>The tunnel settings.</value>
        </member>
        <member name="P:AnotherEditor.SWS.TunnelInput.Presentation">
            <summary>
            Dummy - not used. 
            </summary>
            <value>The presentation.</value>
        </member>
        <member name="P:AnotherEditor.SWS.TunnelInput.QuickWatchPresentation">
            <summary>
            Dummy - not used. 
            </summary>
            <value>The quick watch presentation.</value>
        </member>
        <member name="E:AnotherEditor.SWS.TunnelInput.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:AnotherEditor.Helper.ExceptionHelper">
            <summary>
            Get inner exception. 
            </summary>
        </member>
        <member name="M:AnotherEditor.Helper.ExceptionHelper.GetInnerException(System.Exception)">
            <summary>
            Gets the inner exception.
            </summary>
            <param name="Exception">The exception.</param>
            <returns>The inner exception.</returns>
        </member>
        <member name="T:AnotherEditor.Helper.DependencyResolver">
            <summary>
            Create manager instances based on given interface. 
            </summary>
        </member>
        <member name="T:AnotherEditor.Interfaces.IDependencyResolver">
            <summary>
            Get class based on given Type
            </summary>
        </member>
        <member name="M:AnotherEditor.Interfaces.IDependencyResolver.Resolve``1">
            <summary>
            Retrun a class instance for a given type. 
            </summary>
            <typeparam name="T">Requested type.</typeparam>
            <returns>Instance of given type.</returns>
        </member>
        <member name="M:AnotherEditor.Helper.DependencyResolver.Resolve``1">
            <summary>
            Retrun a class instance for a given type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AnotherEditor.Helper.DependencyResolver.Register(System.Type,System.Type)">
            <summary>
            Registers the specified interface type.
            </summary>
            <param name="interfaceType">Type of the interface.</param>
            <param name="concreteType">Type of the concrete.</param>
        </member>
        <member name="T:DragDrop.Commands.AddDragableCommand">
            <summary>
            Add editor internal (non IPlugin) dragable elements. (Currently only InfoElement)
            </summary>
        </member>
        <member name="M:DragDrop.Commands.AddDragableCommand.#ctor(DragDrop.Interfaces.IWorkspaceManager,AnotherEditor.DragDrop.Interfaces.IDragContent)">
            <summary>
            Initializes a new instance of the <see cref="T:DragDrop.Commands.AddDragableCommand"/> class.
            </summary>
            <param name="WorkspaceManager">The workspace manager.</param>
            <param name="DragContent">Content of the drag.</param>
        </member>
        <member name="M:DragDrop.Commands.AddDragableCommand.Execute">
            <summary>
            Executes this instance.
            </summary>
        </member>
        <member name="M:DragDrop.Commands.AddDragableCommand.Undo">
            <summary>
            Undoes this instance.
            </summary>
        </member>
        <member name="M:DragDrop.Commands.AddDragableCommand.Redo">
            <summary>
            Redoes this instance.
            </summary>
        </member>
        <member name="E:DragDrop.Commands.AddDragableCommand.OnGuiLogNotificationOccured">
            <summary>
            Occurs when [on GUI log notification occured].
            </summary>
        </member>
        <member name="P:DragDrop.Commands.AddDragableCommand.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="T:AnotherEditor.SWS.SubWorkspaceMetaInfoSettings">
            <summary>
            SubWorkspace description is stored in this class. 
            </summary>
        </member>
        <member name="P:AnotherEditor.SWS.SubWorkspaceMetaInfoSettings.Identifier">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:AnotherEditor.SWS.SubWorkspaceMetaInfoSettings.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:AnotherEditor.SWS.SubWorkspaceMetaInfoSettings.HasChanges">
            <summary>
            Gets or sets a value indicating whether this instance has changes.
            </summary>
            <value>
            	<c>true</c> if this instance has changes; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:AnotherEditor.SWS.SubWorkspaceMetaInfoSettings.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:AnotherEditor.Extensions.FileHelper">
            <summary>
            Provides some simplified file operations.
            </summary>
        </member>
        <member name="M:AnotherEditor.Extensions.FileHelper.GetFileStream(System.String,System.IO.FileMode)">
            <summary>
            Get a filestream from file. Display Msgbox on error.
            </summary>
            <param name="Filename">The filename.</param>
            <param name="FileMode">The file mode.</param>
            <returns>The file stream for given file.</returns>
        </member>
        <member name="M:AnotherEditor.Extensions.FileHelper.DeleteFile(System.String)">
            <summary>
            Delete a file. Display Msgbox on error.
            </summary>
            <param name="Filename">The filename.</param>
        </member>
        <member name="M:AnotherEditor.Extensions.FileHelper.Filesize(System.String)">
            <summary>
            Return filesize in MB
            </summary>
            <param name="Filename">The filename.</param>
            <returns>The filesize.</returns>
        </member>
        <member name="M:AnotherEditor.Extensions.FileHelper.OpenFile">
            <summary>
            Opens the file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnotherEditor.Extensions.FileHelper.OpenFile(System.String,System.String)">
            <summary>
            Opens the file.
            </summary>
            <param name="Filter">The filter.</param>
            <param name="path">The path.</param>
            <returns>Full path to selected file.</returns>
        </member>
        <member name="M:AnotherEditor.Extensions.FileHelper.SaveFile">
            <summary>
            Saves the file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnotherEditor.Extensions.FileHelper.SaveFile(System.String,System.String,System.String)">
            <summary>
            Saves the file.
            </summary>
            <param name="Filter">The filter.</param>
            <param name="path">The path.</param>
            <param name="suggestedFilename">The suggested filename.</param>
            <returns>Full path to selected file.</returns>
        </member>
        <member name="T:AnotherEditor.Helper.HitTestResultHelper">
            <summary>
            Hit test dock points on visual elements
            </summary>
        </member>
        <member name="M:AnotherEditor.Helper.HitTestResultHelper.HitTestVisualDockPoint(System.Windows.Point,System.Windows.Media.Visual)">
            <summary>
            Hits the test visual dock point.
            </summary>
            <param name="point">The point.</param>
            <param name="visual">The visual.</param>
            <returns>The path element of the clicked dock point.</returns>
        </member>
        <member name="M:AnotherEditor.Helper.HitTestResultHelper.GetElemenForVisualConnector(System.Windows.Shapes.Path)">
            <summary>
            Gets the elemen for visual connector.
            </summary>
            <param name="VisualConnector">The visual connector.</param>
            <returns>The underlaying BaseElement</returns>
        </member>
        <member name="P:AnotherEditor.Helper.HitTestResultHelper.HitPath">
            <summary>
            Gets the hit path.
            </summary>
            <value>The hit path.</value>
        </member>
        <member name="T:DragDrop.Interfaces.IConnector">
            <summary>
            Describes the dock points (I/Os) off the plugins. 
            </summary>
        </member>
        <member name="M:DragDrop.Interfaces.IConnector.AddDockPoint(DragDrop.Interfaces.IConnector,AnotherEditor.DragDrop.Connectors.Connection)">
            <summary>
            Adds the dock point.
            </summary>
            <param name="DockPointToConnect">The dock point to connect.</param>
            <param name="Connection">The connection.</param>
        </member>
        <member name="M:DragDrop.Interfaces.IConnector.RemoveDockPoint(DragDrop.Interfaces.IConnector)">
            <summary>
            Removes the dock point.
            </summary>
            <param name="DockPoint">The dock point.</param>
            <returns></returns>
        </member>
        <member name="M:DragDrop.Interfaces.IConnector.ShowCanConnect(System.Boolean)">
            <summary>
            Shows the can connect.
            </summary>
            <param name="CanConnect">if set to <c>true</c> [can connect].</param>
        </member>
        <member name="M:DragDrop.Interfaces.IConnector.RemoveShowCanConnect">
            <summary>
            Removes the show can connect.
            </summary>
        </member>
        <member name="M:DragDrop.Interfaces.IConnector.GetPropertyValue">
            <summary>
            Gets the property value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DragDrop.Interfaces.IConnector.SetPropertyValue(System.Object)">
            <summary>
            Sets the property value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:DragDrop.Interfaces.IConnector.UnsetPropertyValue">
            <summary>
            Unsets the property value.
            </summary>
        </member>
        <member name="M:DragDrop.Interfaces.IConnector.UnsetConnectionHighlights">
            <summary>
            Unsets the connection highlights.
            </summary>
        </member>
        <member name="M:DragDrop.Interfaces.IConnector.UpdateConnectionPosition">
            <summary>
            Updates the connection position.
            </summary>
        </member>
        <member name="M:DragDrop.Interfaces.IConnector.SetValueFromBuffer">
            <summary>
            Sets the value from buffer.
            </summary>
        </member>
        <member name="P:DragDrop.Interfaces.IConnector.PropertyName">
            <summary>
            Gets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IConnector.DockType">
            <summary>
            Gets the type of the dock.
            </summary>
            <value>The type of the dock.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IConnector.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IConnector.VisualDockPoint">
            <summary>
            Gets or sets the visual dock point.
            </summary>
            <value>The visual dock point.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IConnector.BufferValue">
            <summary>
            Gets or sets the buffer value.
            </summary>
            <value>The buffer value.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IConnector.DockPoints">
            <summary>
            Gets the dock points.
            </summary>
            <value>The dock points.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IConnector.Connections">
            <summary>
            Gets the connections.
            </summary>
            <value>The connections.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IConnector.Orientation">
            <summary>
            Gets the orientation.
            </summary>
            <value>The orientation.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IConnector.DisplayLevel">
            <summary>
            Gets the property information.
            </summary>
            <value>The property information.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IConnector.HasValue">
            <summary>
            Gets a value indicating whether this instance has value.
            </summary>
            <value><c>true</c> if this instance has value; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:DragDrop.Interfaces.IConnector.IsConnected">
            <summary>
            Gets a value indicating whether this instance is connected.
            </summary>
            <value>
            	<c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DragDrop.Interfaces.IConnector.IsConnectedOrOptional">
            <summary>
            Gets a value indicating whether this instance is connected or optional.
            </summary>
            <value>
            	<c>true</c> if this instance is connected or optional; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:AnotherEditor.DragDrop.Thumbs.DragDropContentInfoElement">
            <summary>
            Based on Style "DragDropContentElementStyle" definded in InfoElement.xaml
            </summary>
        </member>
        <member name="T:AnotherEditor.DragDrop.Interfaces.IDragContent">
            <summary>
            Base class for IDragable
            </summary>
        </member>
        <member name="M:AnotherEditor.DragDrop.Interfaces.IDragContent.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources. Will be called
            by execution manager before saving the class. 
            </summary>
        </member>
        <member name="M:AnotherEditor.DragDrop.Interfaces.IDragContent.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="E:AnotherEditor.DragDrop.Interfaces.IDragContent.OnAnotherEditorStatusBarTextChanged">
            <summary>
            Occurs when [on another editor status bar text changed].
            </summary>
        </member>
        <member name="P:AnotherEditor.DragDrop.Interfaces.IDragContent.Settings">
            <summary>
            Gets the settings. Will be stored by persistence manager.
            </summary>
            <value>The settings.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.Interfaces.IDragContent.Dragable">
            <summary>
            Gets the dragable.
            </summary>
            <value>The dragable.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.Interfaces.IDragContent.Title">
            <summary>
            Gets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.Interfaces.IDragContent.ParentElement">
            <summary>
            Gets the parent element.
            </summary>
            <value>The parent element.</value>
        </member>
        <member name="M:AnotherEditor.DragDrop.Thumbs.DragDropContentInfoElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AnotherEditor.DragDrop.Thumbs.DragDropContentInfoElement"/> class.
            </summary>
        </member>
        <member name="M:AnotherEditor.DragDrop.Thumbs.DragDropContentInfoElement.Dispose">
            <summary>
            Writes current state to settings. 
            </summary>
        </member>
        <member name="M:AnotherEditor.DragDrop.Thumbs.DragDropContentInfoElement.Initialize">
            <summary>
            Load save state from settings
            </summary>
        </member>
        <member name="M:AnotherEditor.DragDrop.Thumbs.DragDropContentInfoElement.OnPropertyChanged(System.String)">
            <summary>
            Called when [property changed].
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="E:AnotherEditor.DragDrop.Thumbs.DragDropContentInfoElement.OnAnotherEditorStatusBarTextChanged">
            <summary>
            Occurs when [on another editor status bar text changed].
            </summary>
        </member>
        <member name="P:AnotherEditor.DragDrop.Thumbs.DragDropContentInfoElement.IsSelected">
            <summary>
            Gets or sets a value indicating whether this instance is selected.
            </summary>
            <value>
            	<c>true</c> if this instance is selected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:AnotherEditor.DragDrop.Thumbs.DragDropContentInfoElement.Settings">
            <summary>
            Gets the settings. Will be stored by persistence manager.
            </summary>
            <value>The settings.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.Thumbs.DragDropContentInfoElement.Title">
            <summary>
            Gets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.Thumbs.DragDropContentInfoElement.ParentElement">
            <summary>
            Gets the parent element.
            </summary>
            <value>The parent element.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.Thumbs.DragDropContentInfoElement.Dragable">
            <summary>
            Gets the dragable.
            </summary>
            <value>The dragable.</value>
        </member>
        <member name="E:AnotherEditor.DragDrop.Thumbs.DragDropContentInfoElement.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:DragDrop.WorkspaceManager">
            <summary>
            WorkspaceManager creates the other manager classes and handles the Workspace commands
            and chain execution.
            </summary>
        </member>
        <member name="M:DragDrop.WorkspaceManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DragDrop.WorkspaceManager"/> class.
            </summary>
        </member>
        <member name="M:DragDrop.WorkspaceManager.AddElement(DragDrop.Interfaces.IBaseElement)">
            <summary>
            Adds the element to workspace using the custom AddElementCommand.
            </summary>
            <param name="Element">The element.</param>
        </member>
        <member name="M:DragDrop.WorkspaceManager.Command_OnGuiLogNotificationOccured(Cryptool.PluginBase.IPlugin,Cryptool.PluginBase.GuiLogEventArgs)">
            <summary>
            Handles the messages of the IWorkspaceCommands and forwards them.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:Cryptool.PluginBase.GuiLogEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:DragDrop.WorkspaceManager.DragContent_SizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Resets the DragContent elements position after the element has been rendered. After
            the the drop the element size is 0/0 so so correct position can first be determined 
            at this point.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.SizeChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:DragDrop.WorkspaceManager.Element_MouseDoubleClick(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Shows the plugins presentation on double click.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:DragDrop.WorkspaceManager.GuiText(System.String,Cryptool.PluginBase.NotificationLevel)">
            <summary>
            Sends text to GUI log message window.
            </summary>
            <param name="message">The message.</param>
            <param name="notificationLevel">The notification level.</param>
        </member>
        <member name="M:DragDrop.WorkspaceManager.PluginDynamicPropertiesChanged(Cryptool.PluginBase.IPlugin)">
            <summary>
            Hanldes the PluginDynamicPropertiesChanged event of plugins. The switch of the 
            properties is done in BaseElement but here we have to flush the Undo history, because
            after new I/Os have been added to the plugin the old command won't work any longer - they
            still hold references the old I/Os.
            </summary>
            <param name="plugin">The plugin.</param>
        </member>
        <member name="M:DragDrop.WorkspaceManager.Plugin_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            This is the main method that handles the Play-Mode.
            Handles new Output-data on PropertyChanged event if IsInPlayMode
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:DragDrop.WorkspaceManager.SetDefaultEventsOnElement(DragDrop.Interfaces.IBaseElement)">
            <summary>
            Sets the default events on element. Things like double click, size, properties, messages
            and context menu.
            </summary>
            <param name="Element">The element.</param>
        </member>
        <member name="M:DragDrop.WorkspaceManager.SetNewDisplayLevelToElements(Cryptool.PluginBase.DisplayLevel)">
            <summary>
            Sets the new display level to elements and creates new context menus based on 
            the new level.
            </summary>
            <param name="displayLevel">The display level.</param>
        </member>
        <member name="M:DragDrop.WorkspaceManager.init">
            <summary>
            Inits this instance. Creates all the necessary managers.
            </summary>
        </member>
        <member name="M:DragDrop.WorkspaceManager.AddDragContent(AnotherEditor.DragDrop.Interfaces.IDragContent,System.Windows.Point)">
            <summary>
            Adds an editor internal drag element to workspace using the AddDragableCommand.
            </summary>
            <param name="dragContent">Content of the drag.</param>
            <param name="targetPoint">The target point.</param>
        </member>
        <member name="M:DragDrop.WorkspaceManager.AddPlugin(Cryptool.PluginBase.IPlugin,System.Windows.Point)">
            <summary>
            Adds a plugin to workspace and places it at given point.
            </summary>
            <param name="Plugin">The plugin.</param>
            <param name="TargetPoint">The target point.</param>
            <returns></returns>
        </member>
        <member name="M:DragDrop.WorkspaceManager.AddPlugin(Cryptool.PluginBase.IPlugin,System.Boolean)">
            <summary>
            Add a plugin to workspace and set the needed values like, contextMenu
            and events.
            </summary>
            <param name="Plugin">The plugin.</param>
            <returns></returns>
        </member>
        <member name="M:DragDrop.WorkspaceManager.AddRestoreConnection(DragDrop.Interfaces.IConnector,DragDrop.Interfaces.IConnector)">
            <summary>
            Adds a connection while loading a save file. Flush of undo manager right after 
            adding connection.
            </summary>
            <param name="DockPointIn">The dock point in.</param>
            <param name="DockPointOut">The dock point out.</param>
        </member>
        <member name="M:DragDrop.WorkspaceManager.AddRestoreDragContent(AnotherEditor.DragDrop.Interfaces.IDragContent,System.Windows.Point)">
            <summary>
            Adds an editor internal drag element to workspace while loading a save file.
            </summary>
            <param name="dragContent">Content of the drag.</param>
            <param name="point">The point.</param>
        </member>
        <member name="M:DragDrop.WorkspaceManager.AddRestorePlugin(Cryptool.PluginBase.IPlugin)">
            <summary>
            Adds the restore plugin.
            </summary>
            <param name="Plugin">The plugin.</param>
            <returns></returns>
        </member>
        <member name="M:DragDrop.WorkspaceManager.DeleteCurrentSelection">
            <summary>
            Deletes the current selection.
            </summary>
        </member>
        <member name="M:DragDrop.WorkspaceManager.ElementSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Resets the Plugin-elements position after the element has been rendered. After
            the the drop the element size is 0/0 so so correct position can first be determined 
            at this point.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.SizeChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:DragDrop.WorkspaceManager.LinkDockPoint(DragDrop.Interfaces.IConnector,DragDrop.Interfaces.IConnector)">
            <summary>
            Connects two plugins using the necessary ConnectDockPointsCommand.
            </summary>
            <param name="DockPointIn">The dock point in.</param>
            <param name="DockPointOut">The dock point out.</param>
        </member>
        <member name="M:DragDrop.WorkspaceManager.Move_Element(System.Collections.Generic.List{System.Windows.Controls.ContentControl},System.Collections.Generic.Dictionary{System.Windows.Controls.ContentControl,System.Windows.Point},System.Collections.Generic.Dictionary{System.Windows.Controls.ContentControl,System.Windows.Point})">
            <summary>
            Moves the list of elements from their source points to new target points using a macro-move-command
            to support undo for a group-move.
            </summary>
            <param name="Elements">The elements.</param>
            <param name="SourcePoints">The source points.</param>
            <param name="TargetPoints">The target points.</param>
        </member>
        <member name="M:DragDrop.WorkspaceManager.OnElementFinish(System.IAsyncResult)">
            <summary>
            Callback method of running IPlugins execute method. 
            </summary>
            <param name="ar">The ar.</param>
        </member>
        <member name="M:DragDrop.WorkspaceManager.PluginInitCallBack(System.IAsyncResult)">
            <summary>
            This callback method is referenced in AddElementCommand and is called after
            Plugin init method finished. This information is necessary to send init finish
            event, which is used in PersistanceManager to wait for SubWorkspace to finish 
            init process. (The dynamic input/output dockpoints of the subworkspaces are available 
            after init process)
            </summary>
            <param name="ar">The ar.</param>
        </member>
        <member name="M:DragDrop.WorkspaceManager.Plugin_OnGuiLogNotificationOccured(Cryptool.PluginBase.IPlugin,Cryptool.PluginBase.GuiLogEventArgs)">
            <summary>
            If plugins send GUI log notifications the editor collects them and gives them to the gui.
            The editor will add the current title of the plugin to the event args for user convenience.
            This method is attached to event in AddElementCommand
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:Cryptool.PluginBase.GuiLogEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:DragDrop.WorkspaceManager.PreExecution">
            <summary>
            Call PreExec method on all elements.
            </summary>
        </member>
        <member name="M:DragDrop.WorkspaceManager.ReDo">
            <summary>
            Redo
            </summary>
        </member>
        <member name="M:DragDrop.WorkspaceManager.RestoreSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            This event handeler is just added after re-loading saved workspace data. It is
            needed, because we have to wait for the thumbs to be displayed. This is the first
            time when we can recalculate the relative position because the workspace and the
            thumbs have their rendersize now.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DragDrop.WorkspaceManager.Run(DragDrop.Interfaces.RunMethod)">
            <summary>
            RunMethod.RunSubWorkspace is used by SWS plugin to start SWS without calling PreExecution
            again. This would result in deleting already set inputs on TunnelInput Plugins, because
            in PreExecution the method Dispose() is called. 
            </summary>
            <param name="method">The method.</param>
        </member>
        <member name="M:DragDrop.WorkspaceManager.Stop">
            <summary>
            Stops running chain.
            </summary>
        </member>
        <member name="M:DragDrop.WorkspaceManager.SwitchDockPoint(DragDrop.Interfaces.IConnector,DragDrop.Interfaces.IConnector,AnotherEditor.DragDrop.Connectors.Connection)">
            <summary>
            Changes existing connection 
            </summary>
            <param name="OldDockPoint">The old dock point.</param>
            <param name="NewDockPoint">The new dock point.</param>
        </member>
        <member name="M:DragDrop.WorkspaceManager.UnDo">
            <summary>
            Undo
            </summary>
        </member>
        <member name="P:DragDrop.WorkspaceManager.CanRedo">
            <summary>
            Gets a value indicating whether this instance can redo.
            </summary>
            <value><c>true</c> if this instance can redo; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:DragDrop.WorkspaceManager.CanUndo">
            <summary>
            Gets a value indicating whether this instance can undo.
            </summary>
            <value><c>true</c> if this instance can undo; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:DragDrop.WorkspaceManager.DisplayLevel">
            <summary>
            Gets or sets the display level.
            </summary>
            <value>The display level.</value>
        </member>
        <member name="P:DragDrop.WorkspaceManager.ElementManager">
            <summary>
            Gets or sets the element manager.
            </summary>
            <value>The element manager.</value>
        </member>
        <member name="P:DragDrop.WorkspaceManager.ExecutionDelay">
            <summary>
            Gets or sets the execution delay.
            </summary>
            <value>The execution delay.</value>
        </member>
        <member name="P:DragDrop.WorkspaceManager.HasChanges">
            <summary>
            Gets a value indicating whether this instance has changes.
            </summary>
            <value>
            	<c>true</c> if this instance has changes; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DragDrop.WorkspaceManager.IsInPlayMode">
            <summary>
            Gets a value indicating whether this instance is in play mode.
            </summary>
            <value>
            	<c>true</c> if this instance is in play mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DragDrop.WorkspaceManager.LinkManager">
            <summary>
            Gets the link manager.
            </summary>
            <value>The link manager.</value>
        </member>
        <member name="P:DragDrop.WorkspaceManager.ListInitElements">
            <summary>
            IPlugins with still running Initialize method are placed in this list. This
            list has to be empty to start a run, because all IPlugins have to finish init before. 
            </summary>
            <value>The list init elements.</value>
        </member>
        <member name="P:DragDrop.WorkspaceManager.SelectedThumb">
            <summary>
            Gets or sets the selected thumb.
            </summary>
            <value>The selected thumb.</value>
        </member>
        <member name="P:DragDrop.WorkspaceManager.SelectionManager">
            <summary>
            Gets the selection manager.
            </summary>
            <value>The selection manager.</value>
        </member>
        <member name="P:DragDrop.WorkspaceManager.UndoManager">
            <summary>
            Gets the undo manager.
            </summary>
            <value>The undo manager.</value>
        </member>
        <member name="P:DragDrop.WorkspaceManager.Workspace">
            <summary>
            Gets the workspace.
            </summary>
            <value>The workspace.</value>
        </member>
        <member name="E:DragDrop.WorkspaceManager.OnAnotherEditorStatusBarTextChanged">
            <summary>
            Occurs when [on another editor status bar text changed].
            </summary>
        </member>
        <member name="E:DragDrop.WorkspaceManager.OnGuiLogNotificationOccured">
            <summary>
            Events of plugins are "filled" with title
            </summary>
        </member>
        <member name="E:DragDrop.WorkspaceManager.OnRunFinished">
            <summary>
            Occurs when [on run finished].
            </summary>
        </member>
        <member name="T:AnotherEditor.EditorCommands">
            <summary>
            Commands used by editor. The command bindings are defined in AnotherEditorPresentation.xaml
            </summary>
        </member>
        <member name="F:AnotherEditor.EditorCommands.AddWorkspaceCommand">
            <summary>
            Adds a workspace to project. 
            </summary>
        </member>
        <member name="F:AnotherEditor.EditorCommands.RemoveWorkspaceCommand">
            <summary>
            Removes a workspace from project. 
            </summary>
        </member>
        <member name="F:AnotherEditor.EditorCommands.ShowSliderCommand">
            <summary>
            Switch the lower options bar on/off
            </summary>
        </member>
        <member name="F:AnotherEditor.EditorCommands.ZoomTo100Command">
            <summary>
            Zoom workspace to 100%
            </summary>
        </member>
        <member name="F:AnotherEditor.EditorCommands.ZoomFitToScreenCommand">
            <summary>
            Show all workspace content without scrollbars. (Only if it fits into 0,25% view)
            </summary>
        </member>
        <member name="F:AnotherEditor.EditorCommands.SaveSubWorkspaceCommand">
            <summary>
            Crates a SubWorksapce from current workspace. 
            </summary>
        </member>
        <member name="T:AnotherEditor.Helper.ByteToStringHelper">
            <summary>
            Converter helper
            </summary>
        </member>
        <member name="M:AnotherEditor.Helper.ByteToStringHelper.GetStringFromStream(System.Int32,System.IO.Stream)">
            <summary>
            Gets the string from stream.
            </summary>
            <param name="bytesToString">The bytes to string. May be longer than stream.Length.</param>
            <param name="stream">The stream.</param>
            <returns>The stream as string.</returns>
        </member>
        <member name="T:AnotherEditor.DragDrop.Thumbs.GeometricOperations.ResizeThumb">
            <summary>
            Used to resize the elements on workspace. This class is used in BaseElementStyle
            as part of the ControlTemplate. 
            </summary>
        </member>
        <member name="M:AnotherEditor.DragDrop.Thumbs.GeometricOperations.ResizeThumb.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AnotherEditor.DragDrop.Thumbs.GeometricOperations.ResizeThumb"/> class.
            </summary>
        </member>
        <member name="T:AnotherEditor.Helper.ColorHelper">
            <summary>
            Defines colors for the different interfaces and connector types.
            </summary>
        </member>
        <member name="M:AnotherEditor.Helper.ColorHelper.GetFillColorForType(System.Type)">
            <summary>
            Gets the fill color for the type. 
            </summary>
            <param name="Type">The type.</param>
            <returns>Color for given tpye.</returns>
        </member>
        <member name="M:AnotherEditor.Helper.ColorHelper.GetFillColorForPlugin(Cryptool.PluginBase.IPlugin)">
            <summary>
            Gets the fill color for the plugin.
            </summary>
            <param name="plugin">The plugin.</param>
            <returns>Color for given plugin.</returns>
        </member>
        <member name="T:DragDrop.Commands.DeleteElementCommand">
            <summary>
            Deletes IPlugins from workspace.
            </summary>  
        </member>
        <member name="M:DragDrop.Commands.DeleteElementCommand.#ctor(DragDrop.Interfaces.IWorkspaceManager,DragDrop.Interfaces.IBaseElement)">
            <summary>
            Initializes a new instance of the <see cref="T:DragDrop.Commands.DeleteElementCommand"/> class.
            </summary>
            <param name="WorkspaceManager">The workspace manager.</param>
            <param name="Element">The element.</param>
        </member>
        <member name="M:DragDrop.Commands.DeleteElementCommand.Execute">
            <summary>
            Executes this instance.
            </summary>
        </member>
        <member name="M:DragDrop.Commands.DeleteElementCommand.Undo">
            <summary>
            Undoes this instance.
            </summary>
        </member>
        <member name="M:DragDrop.Commands.DeleteElementCommand.Redo">
            <summary>
            Redoes this instance.
            </summary>
        </member>
        <member name="E:DragDrop.Commands.DeleteElementCommand.OnGuiLogNotificationOccured">
            <summary>
            Occurs when [on GUI log notification occured].
            </summary>
        </member>
        <member name="P:DragDrop.Commands.DeleteElementCommand.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="T:AnotherEditor.Converter.VisualCanvasConverter">
            <summary>
            Determines how wide the progress indicator should be, based on how far 
            the execution of a plugin has been performed.
            </summary>
        </member>
        <member name="M:AnotherEditor.Converter.VisualCanvasConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts source values to a value for the binding target. The data binding engine calls this method when it propagates the values from source bindings to the binding target.
            </summary>
            <param name="values">The array of values that the source bindings in the <see cref="T:System.Windows.Data.MultiBinding"/> produces. The value <see cref="F:System.Windows.DependencyProperty.UnsetValue"/> indicates that the source binding has no value to provide for conversion.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value.If the method returns null, the valid null value is used.A return value of <see cref="T:System.Windows.DependencyProperty"/>.<see cref="F:System.Windows.DependencyProperty.UnsetValue"/> indicates that the converter did not produce a value, and that the binding will use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"/> if it is available, or else will use the default value.A return value of <see cref="T:System.Windows.Data.Binding"/>.<see cref="F:System.Windows.Data.Binding.DoNothing"/> indicates that the binding does not transfer the value or use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"/> or the default value.
            </returns>
        </member>
        <member name="M:AnotherEditor.Converter.VisualCanvasConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Dummy - not used here. 
            </summary>
            <param name="value">The value that the binding target produces.</param>
            <param name="targetTypes">The array of types to convert to. The array length indicates the number and types of values that are suggested for the method to return.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            An array of values that have been converted from the target value back to the source values.
            </returns>
        </member>
        <member name="T:AnotherEditor.SWS.SubWorkspaceMetaInfo">
            <summary>
            Class provides meta info for sub workspaces. 
            </summary>
            <summary>
            SubWorkspaceMetaInfo
            </summary>
        </member>
        <member name="M:AnotherEditor.SWS.SubWorkspaceMetaInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AnotherEditor.SWS.SubWorkspaceMetaInfo"/> class.
            </summary>
        </member>
        <member name="M:AnotherEditor.SWS.SubWorkspaceMetaInfo.PreExecution">
            <summary>
            Dummy - not used here.
            </summary>
        </member>
        <member name="M:AnotherEditor.SWS.SubWorkspaceMetaInfo.Execute">
            <summary>
            Dummy - not used here.
            </summary>
        </member>
        <member name="M:AnotherEditor.SWS.SubWorkspaceMetaInfo.PostExecution">
            <summary>
            Dummy - not used here.
            </summary>
        </member>
        <member name="M:AnotherEditor.SWS.SubWorkspaceMetaInfo.Pause">
            <summary>
            Dummy - not used here.
            </summary>
        </member>
        <member name="M:AnotherEditor.SWS.SubWorkspaceMetaInfo.Stop">
            <summary>
            Dummy - not used here.
            </summary>
        </member>
        <member name="M:AnotherEditor.SWS.SubWorkspaceMetaInfo.Initialize">
            <summary>
            Dummy - not used here.
            </summary>
        </member>
        <member name="M:AnotherEditor.SWS.SubWorkspaceMetaInfo.Dispose">
            <summary>
            Dummy - not used here.
            </summary>
        </member>
        <member name="M:AnotherEditor.SWS.SubWorkspaceMetaInfo.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="E:AnotherEditor.SWS.SubWorkspaceMetaInfo.OnPluginStatusChanged">
            <summary>
            Dummy - not used here.
            </summary>
        </member>
        <member name="E:AnotherEditor.SWS.SubWorkspaceMetaInfo.OnGuiLogNotificationOccured">
            <summary>
            Dummy - not used here.
            </summary>
        </member>
        <member name="E:AnotherEditor.SWS.SubWorkspaceMetaInfo.OnPluginProgressChanged">
            <summary>
            Dummy - not used here.
            </summary>
        </member>
        <member name="P:AnotherEditor.SWS.SubWorkspaceMetaInfo.Settings">
            <summary>
            Gets the settings.
            </summary>
            <value>The settings.</value>
        </member>
        <member name="P:AnotherEditor.SWS.SubWorkspaceMetaInfo.Presentation">
            <summary>
            User control with options for SubWorkspace
            </summary>
            <value>The presentation.</value>
        </member>
        <member name="P:AnotherEditor.SWS.SubWorkspaceMetaInfo.QuickWatchPresentation">
            <summary>
            User control with options for SubWorkspace
            </summary>
            <value>The quick watch presentation.</value>
        </member>
        <member name="E:AnotherEditor.SWS.SubWorkspaceMetaInfo.PropertyChanged">
            <summary>
            Dummy - not used here.
            </summary>
        </member>
        <member name="T:AnotherEditor.SWS.SWSDescription">
            <summary>
            Dummy plugin to provide SubWrokspace description. 
            </summary>
            <summary>
            SWSDescription
            </summary>
        </member>
        <member name="M:AnotherEditor.SWS.SWSDescription.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AnotherEditor.SWS.SWSDescription"/> class.
            </summary>
        </member>
        <member name="M:AnotherEditor.SWS.SWSDescription.PreExecution">
            <summary>
            Dummy - not used here. 
            </summary>
        </member>
        <member name="M:AnotherEditor.SWS.SWSDescription.Execute">
            <summary>
            Dummy - not used here. 
            </summary>
        </member>
        <member name="M:AnotherEditor.SWS.SWSDescription.PostExecution">
            <summary>
            Dummy - not used here. 
            </summary>
        </member>
        <member name="M:AnotherEditor.SWS.SWSDescription.Pause">
            <summary>
            Dummy - not used here. 
            </summary>
        </member>
        <member name="M:AnotherEditor.SWS.SWSDescription.Stop">
            <summary>
            Dummy - not used here. 
            </summary>
        </member>
        <member name="M:AnotherEditor.SWS.SWSDescription.Initialize">
            <summary>
            Dummy - not used here. 
            </summary>
        </member>
        <member name="M:AnotherEditor.SWS.SWSDescription.Dispose">
            <summary>
            Dummy - not used here. 
            </summary>
        </member>
        <member name="M:AnotherEditor.SWS.SWSDescription.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="E:AnotherEditor.SWS.SWSDescription.OnPluginStatusChanged">
            <summary>
            Dummy - not used here. 
            </summary>
        </member>
        <member name="E:AnotherEditor.SWS.SWSDescription.OnGuiLogNotificationOccured">
            <summary>
            Dummy - not used here. 
            </summary>
        </member>
        <member name="E:AnotherEditor.SWS.SWSDescription.OnPluginProgressChanged">
            <summary>
            Dummy - not used here. 
            </summary>
        </member>
        <member name="P:AnotherEditor.SWS.SWSDescription.Settings">
            <summary>
            Gets the settings.
            </summary>
            <value>The settings.</value>
        </member>
        <member name="P:AnotherEditor.SWS.SWSDescription.Presentation">
            <summary>
            Options.
            </summary>
            <value>The presentation.</value>
        </member>
        <member name="P:AnotherEditor.SWS.SWSDescription.QuickWatchPresentation">
            <summary>
            Options.
            </summary>
            <value>The quick watch presentation.</value>
        </member>
        <member name="E:AnotherEditor.SWS.SWSDescription.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:AnotherEditor.Extensions.DictionaryHelper">
            <summary>
            DicHelper: creates new entry if not exists. 
            </summary>
        </member>
        <member name="M:AnotherEditor.Extensions.DictionaryHelper.GetOrCreate``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Gets or create an Dic entry. 
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <returns>The value for the given key.</returns>
        </member>
        <member name="T:AnotherEditor.DragDrop.Interfaces.IDragableSaveSettings">
            <summary>
            Marker interface for persistance manager
            </summary>
        </member>
        <member name="P:AnotherEditor.DragDrop.Interfaces.IDragableSaveSettings.HasChanges">
            <summary>
            Gets or sets a value indicating whether this instance has changes.
            </summary>
            <value>
            	<c>true</c> if this instance has changes; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:AnotherEditor.DragDrop.Thumbs.InfoElementSettings">
            <summary>
            Settings of InfoElement are stored here. 
            </summary>
        </member>
        <member name="P:AnotherEditor.DragDrop.Thumbs.InfoElementSettings.HasChanges">
            <summary>
            Gets or sets a value indicating whether this instance has changes.
            </summary>
            <value>
            	<c>true</c> if this instance has changes; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:AnotherEditor.DragDrop.Thumbs.InfoElementSettings.XAMLRichtTextBox">
            <summary>
            Gets or sets the XAML richt text box.
            </summary>
            <value>The XAML richt text box.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.Thumbs.InfoElementSettings.IsExpanded">
            <summary>
            Gets or sets a value indicating whether this instance is expanded.
            </summary>
            <value>
            	<c>true</c> if this instance is expanded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:AnotherEditor.DragDrop.Thumbs.InfoElementSettings.CurrentColor">
            <summary>
            Gets or sets the color of the current.
            </summary>
            <value>The color of the current.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.Thumbs.InfoElementSettings.CurrentText">
            <summary>
            Gets or sets the current text.
            </summary>
            <value>The current text.</value>
        </member>
        <member name="T:AnotherEditor.DragDrop.Connectors.Connector">
            <summary>
            The OutputConnectors will be carried in a list that is created by the thumbs. Each
            thumb can have 0..* Connectors
            </summary>
        </member>
        <member name="M:AnotherEditor.DragDrop.Connectors.Connector.#ctor(DragDrop.Interfaces.IBaseElement,Cryptool.PluginBase.PropertyInfoAttribute,AnotherEditor.DragDrop.Connectors.ConnectorOrientation)">
            <summary>
            Initializes a new instance of the <see cref="T:AnotherEditor.DragDrop.Connectors.Connector"/> class.
            </summary>
            <param name="ParentElement">The parent element.</param>
            <param name="PropertyInformation">The property information.</param>
            <param name="Orientation">The orientation.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.Connectors.Connector.#ctor(DragDrop.Interfaces.IBaseElement,Cryptool.PluginBase.DynamicProperty,AnotherEditor.DragDrop.Connectors.ConnectorOrientation)">
            <summary>
            Initializes a new instance of the <see cref="T:AnotherEditor.DragDrop.Connectors.Connector"/> class. 
            </summary>
            <param name="ParentElement">The parent element.</param>
            <param name="dynamicProperty">The dynamic property.</param>
            <param name="Orientation">The orientation.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.Connectors.Connector.Connector_LayoutUpdated(System.Object,System.EventArgs)">
            <summary>
            When the layout changes we update the position property
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AnotherEditor.DragDrop.Connectors.Connector.OnPropertyChanged(System.String)">
            <summary>
            Called when [property changed].
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.Connectors.Connector.GetPropertyInfo">
            <summary>
            Get static or dynamic PropertyInfoAttribute, depending which one is available.
            One of both must be != null.
            </summary>
            <returns>static or dynamic property info</returns>
        </member>
        <member name="M:AnotherEditor.DragDrop.Connectors.Connector.AddDockPoint(DragDrop.Interfaces.IConnector,AnotherEditor.DragDrop.Connectors.Connection)">
            <summary>
            Connect this Connector to another one and store the associated connection. 
            </summary>
            <param name="DockPoint"></param>
            <param name="Connection"></param>
        </member>
        <member name="M:AnotherEditor.DragDrop.Connectors.Connector.GetPropertyValue">
            <summary>
            Get value from this Property. This method is e.g. called from execute-manager, 
            to execute the chains on workspace.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnotherEditor.DragDrop.Connectors.Connector.RemoveDockPoint(DragDrop.Interfaces.IConnector)">
            <summary>
            Remove a connected dockpoint from list and return associated connection if 
            one exists. The return value is e.g. used in the delete element command to store 
            the old connection for undo reasons.
            </summary>
            <param name="DockPoint"></param>
        </member>
        <member name="M:AnotherEditor.DragDrop.Connectors.Connector.RemoveShowCanConnect">
            <summary>
            Removes the show can connect. (green/red glow effect)
            </summary>
        </member>
        <member name="M:AnotherEditor.DragDrop.Connectors.Connector.SetPropertyValue(System.Object)">
            <summary>
            Sets the property value.
            </summary>
            <param name="Value">The value.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.Connectors.Connector.SetValueFromBuffer">
            <summary>
            Sets the value from buffer. 
            </summary>
        </member>
        <member name="M:AnotherEditor.DragDrop.Connectors.Connector.ShowCanConnect(System.Boolean)">
            <summary>
            Dispay red/green highlight
            </summary>
            <param name="CanConnect">true highlights green, false highlights red</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.Connectors.Connector.UnsetConnectionHighlights">
            <summary>
            Unsets the connection highlights.
            </summary>
        </member>
        <member name="M:AnotherEditor.DragDrop.Connectors.Connector.UnsetPropertyValue">
            <summary>
            Used to set HasValue to false, after chain was executed. 
            </summary>
        </member>
        <member name="M:AnotherEditor.DragDrop.Connectors.Connector.UpdateConnectionPosition">
            <summary>
            Updates the connection position.
            </summary>
        </member>
        <member name="P:AnotherEditor.DragDrop.Connectors.Connector.DockPoints">
            <summary>
            Get the conected DockPoints
            </summary>
            <returns></returns>
        </member>
        <member name="P:AnotherEditor.DragDrop.Connectors.Connector.Connections">
            <summary>
            Gets the connections.
            </summary>
            <value>The connections.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.Connectors.Connector.DockType">
            <summary>
            Gets the type of the dock.
            </summary>
            <value>The type of the dock.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.Connectors.Connector.HasValue">
            <summary>
            Used to determine if the (containing)plugin CanExecute. This case needs all Properties to
            have a value. The optional part is calculated here, too. 
            </summary>    
        </member>
        <member name="P:AnotherEditor.DragDrop.Connectors.Connector.BufferValue">
            <summary>
            Gets or sets the buffer value.
            </summary>
            <value>The buffer value.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.Connectors.Connector.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.Connectors.Connector.IsConnected">
            <summary>
            Gets a value indicating whether this instance is connected.
            </summary>
            <value>
            	<c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:AnotherEditor.DragDrop.Connectors.Connector.IsConnectedOrOptional">
            <summary>
            Gets a value indicating whether this instance is connected or optional.
            </summary>
            <value>
            	<c>true</c> if this instance is connected or optional; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:AnotherEditor.DragDrop.Connectors.Connector.Orientation">
            <summary>
            Gets the orientation.
            </summary>
            <value>The orientation.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.Connectors.Connector.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.Connectors.Connector.Position">
            <summary>
            Posisiton fires OnPropertyChanged for Connections to be updated
            </summary>
        </member>
        <member name="P:AnotherEditor.DragDrop.Connectors.Connector.PropertyName">
            <summary>
            Gets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.Connectors.Connector.VisualDockPoint">
            <summary>
            Gets or sets the visual dock point.
            </summary>
            <value>The visual dock point.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.Connectors.Connector.Workspace">
            <summary>
            Gets or sets the workspace.
            </summary>
            <value>The workspace.</value>
        </member>
        <member name="E:AnotherEditor.DragDrop.Connectors.Connector.PropertyChanged">
            <summary>
            Occurs when [property changed].
            </summary>
        </member>
        <member name="T:AnotherEditor.DragDrop.Connectors.ConnectorOrientation">
            <summary>
            Only Left and right is used for plugin elements
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.Connectors.ConnectorOrientation.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.Connectors.ConnectorOrientation.Left">
            <summary>
            
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.Connectors.ConnectorOrientation.Top">
            <summary>
            
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.Connectors.ConnectorOrientation.Right">
            <summary>
            
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.Connectors.ConnectorOrientation.Bottom">
            <summary>
            
            </summary>
        </member>
        <member name="T:AnotherEditor.DragDrop.Connectors.ConnectionAdorner">
            <summary>
            Adorner class for the connections.
            </summary>
        </member>
        <member name="M:AnotherEditor.DragDrop.Connectors.ConnectionAdorner.GetVisualChild(System.Int32)">
            <summary>
            Overrides <see cref="M:System.Windows.Media.Visual.GetVisualChild(System.Int32)"/>, and returns a child at the specified index from a collection of child elements.
            </summary>
            <param name="index">The zero-based index of the requested child element in the collection.</param>
            <returns>
            The requested child element. This should not return null; if the provided index is out of range, an exception is thrown.
            </returns>
        </member>
        <member name="M:AnotherEditor.DragDrop.Connectors.ConnectionAdorner.#ctor(DragDrop.Interfaces.IWorkspaceManager,AnotherEditor.DragDrop.Connectors.Connection)">
            <summary>
            Initializes a new instance of the <see cref="T:AnotherEditor.DragDrop.Connectors.ConnectionAdorner"/> class.
            </summary>
            <param name="WorkspaceManager">The workspace manager.</param>
            <param name="Connection">The connection.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.Connectors.ConnectionAdorner.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Called when [render].
            </summary>
            <param name="dc">The dc.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.Connectors.ConnectionAdorner.ArrangeOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement"/> derived class.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="P:AnotherEditor.DragDrop.Connectors.ConnectionAdorner.VisualChildrenCount">
            <summary>
            Gets the number of visual child elements within this element.
            </summary>
            <value></value>
            <returns>The number of visual child elements for this element.</returns>
        </member>
        <member name="T:AnotherEditor.SWS.TunnelOutput">
            <summary>
            Editor specific plugin used do create a output property on a SubWorkspace. 
            </summary>
        </member>
        <member name="M:AnotherEditor.SWS.TunnelOutput.PreExecution">
            <summary>
            Dispose call.
            </summary>
        </member>
        <member name="M:AnotherEditor.SWS.TunnelOutput.Execute">
            <summary>
            Show progress. 
            </summary>
        </member>
        <member name="M:AnotherEditor.SWS.TunnelOutput.PostExecution">
            <summary>
            Dispose call.
            </summary>
        </member>
        <member name="M:AnotherEditor.SWS.TunnelOutput.Pause">
            <summary>
            Not defined yet.
            </summary>
        </member>
        <member name="M:AnotherEditor.SWS.TunnelOutput.Stop">
            <summary>
            Dummy - not used here. 
            </summary>
        </member>
        <member name="M:AnotherEditor.SWS.TunnelOutput.Initialize">
            <summary>
            Dummy - not used here. 
            </summary>
        </member>
        <member name="M:AnotherEditor.SWS.TunnelOutput.Dispose">
            <summary>
            Close streams. 
            </summary>
        </member>
        <member name="M:AnotherEditor.SWS.TunnelOutput.OnPropertyChanged(System.String)">
            <summary>
            Called when [property changed].
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:AnotherEditor.SWS.TunnelOutput.OutputValue">
            <summary>
            Gets or sets the output value.
            </summary>
            <value>The output value.</value>
        </member>
        <member name="E:AnotherEditor.SWS.TunnelOutput.OnPluginStatusChanged">
            <summary>
            Occurs when [on plugin status changed].
            </summary>
        </member>
        <member name="E:AnotherEditor.SWS.TunnelOutput.OnGuiLogNotificationOccured">
            <summary>
            Occurs when [on GUI log notification occured].
            </summary>
        </member>
        <member name="E:AnotherEditor.SWS.TunnelOutput.OnPluginProgressChanged">
            <summary>
            Occurs when [on plugin progress changed].
            </summary>
        </member>
        <member name="P:AnotherEditor.SWS.TunnelOutput.Settings">
            <summary>
            Gets the settings.
            </summary>
            <value>The settings.</value>
        </member>
        <member name="P:AnotherEditor.SWS.TunnelOutput.TunnelSettings">
            <summary>
            Gets the tunnel settings. Not described in interface - editor internal use only.
            </summary>
            <value>The tunnel settings.</value>
        </member>
        <member name="P:AnotherEditor.SWS.TunnelOutput.Presentation">
            <summary>
            Dummy - not used here. 
            </summary>
            <value>The presentation.</value>
        </member>
        <member name="P:AnotherEditor.SWS.TunnelOutput.QuickWatchPresentation">
            <summary>
            Dummy - not used here. 
            </summary>
            <value>The quick watch presentation.</value>
        </member>
        <member name="E:AnotherEditor.SWS.TunnelOutput.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:AnotherEditor.Extensions.VisualTreeHelperEx">
            <summary>
            Generic extension to get parent objects of a specific type. 
            </summary>
        </member>
        <member name="M:AnotherEditor.Extensions.VisualTreeHelperEx.GetParent``1(System.Windows.DependencyObject)">
            <summary>
            Find parent element.
            </summary>
            <typeparam name="T">Type of object to be searched.</typeparam>
            <param name="obj">Starting object to search for parents or itself.</param>
            <returns>Returns the next parent object with requested type or null if not found.</returns>
        </member>
        <member name="M:AnotherEditor.Extensions.VisualTreeHelperEx.GetParentFromHitTestVisibleObjects``1(System.Windows.DependencyObject)">
            <summary>
            This is a special version for workspace hittest result, that just "looks" at 
            HitTestVisible objects. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">The obj.</param>
            <returns>Returns the next parent object with requested type or null if not found.</returns>
        </member>
        <member name="T:AnotherEditor.DragDrop.ProjectManager">
            <summary>
            Main class that connects the differents managers and delegates the commands
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.ProjectManager.dockWindowGroupDetails">
            <summary>
            dockWindowGroupDetails is used to "split" the workspace. Tabs and worksapce are shown parallel, usefull for users with large displays
            </summary>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AnotherEditor.DragDrop.ProjectManager"/> class.
            </summary>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.GuiLogMessage(System.String,Cryptool.PluginBase.NotificationLevel)">
            <summary>
            Send message to LogWindow.
            </summary>
            <param name="Message">The message.</param>
            <param name="notificationLevel">The notification level.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.MainWindow_KeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            Handles hot keys.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.Manager_OnAnotherEditorStatusBarTextChanged(System.Object,System.String,Cryptool.PluginBase.NotificationLevel)">
            <summary>
            Forwards the messages of the different managers to the GUI.
            </summary>
            <param name="sender">The sender.</param>
            <param name="message">The message.</param>
            <param name="notificationLevel">The notification level.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.MouseLeave(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Mouse leave event is used to reset curso after using middle mouse button to navigate on workspace.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:System.Windows.Input.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.MouseMove(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles middle mouse button workspace navigation.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:System.Windows.Input.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.MousePressed(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Changes cursor for middle mouse button navigation.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.MouseReleased(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Reset cursor after releasing middle mouse button. 
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.MouseWheel(System.Object,System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Handles workspace zooming by using mouse wheel while pressing control key. 
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:System.Windows.Input.MouseWheelEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.GetPersistanceManager">
            <summary>
            Gets the persistance manager based on singleton pattern. Event subscription is done here.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.SelectionManager_PluginChanged(System.Object,Cryptool.PluginBase.PluginChangedEventArgs)">
            <summary>
            Send plugin changed events to editor (will be forwarded to CrypWin). If no plugin was
            selected, the editor will be sent as selected plugin.
            This method is registred at all worspaceManagers, so we get all events together here
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.SetEventsOnWorkspace(DragDrop.Interfaces.IWorkspaceManager)">
            <summary>
            Sets the events on workspace switch.
            </summary>
            <param name="workspaceManager">The workspace manager.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.Settings_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles the PropertyChanged event of the Editor-Settings control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.dockWindow_Closing(System.Object,DevComponents.WpfDock.CancelSourceRoutedEventArgs)">
            <summary>
            Handles the Closing event of the dockWindow control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:DevComponents.WpfDock.CancelSourceRoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.dockWindow_MouseDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Closing dock window on middle mouse button down.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.goToWorkspace(DragDrop.Interfaces.IWorkspaceManager)">
            <summary>
            Goes to workspace.
            </summary>
            <param name="workspaceManager">The workspace manager.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.init">
            <summary>
            Inits this instance.
            </summary>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.infoElementMenuClick_PreviewMouseMove(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Drag drop support for the info element in the lower menu of the editor.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.infoElementMenuClick_PreviewMouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Start drag drop
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.dockWinMain_PreviewMouseRightButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Focus on right click.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.buttonSlider_PreviewMouseLeftButton(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Zoom workspace based on slider move.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.setContextMenuItemsIsEnabled(System.Boolean)">
            <summary>
            Sets the context menu items is enabled. Used to disable entries in PlayMode.
            </summary>
            <param name="IsEnabled">if set to <c>true</c> [is enabled].</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.workspaceManager_OnGuiLogNotificationOccured(Cryptool.PluginBase.IPlugin,Cryptool.PluginBase.GuiLogEventArgs)">
            <summary>
            Handles the GUI Log events of the workspace manager. The workspace adds the title to the event args.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:Cryptool.PluginBase.GuiLogEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.addItemToDockWindow(System.Object)">
            <summary>
            Adds the item to the active dock window.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.removeItemFromDockWindow(System.Object)">
            <summary>
            Removes the item from the active dock window.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.GetDefaultDockWindow">
            <summary>
            Helper method to create a default context menu for tab items. 
            </summary>
            <param name="dockWindow">The dock window.</param>
            <returns></returns>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.copyTabItemHeaderToClipboard_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Click event of the copyTabItemHeaderToClipboard control (context menu).
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.closeTabItem_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Click event of the closeTabItem control (context menu).
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.OnPropertyChanged(System.String)">
            <summary>
            Called when [property changed].
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.AddPlugin(Cryptool.PluginBase.IPlugin)">
            <summary>
            Adds the plugin.
            </summary>
            <param name="plugin">The plugin.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.AddSubWorkspace(Cryptool.PluginBase.EditorSpecificPluginInfo)">
            <summary>
            Adds the sub workspace.
            </summary>
            <param name="espi">The EditorSpecificPluginInfo.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.AddPlugin(Cryptool.PluginBase.IPlugin,System.Windows.Point,System.String)">
            <summary>
            Adds SubWorkspace plugin to target point. 
            </summary>
            <param name="plugin">The plugin.</param>
            <param name="point">The point.</param>
            <param name="swsTitle">The SWS title.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.plugin_OnPluginStatusChanged(Cryptool.PluginBase.IPlugin,Cryptool.PluginBase.StatusEventArgs)">
            <summary>
            If plugin want's to change the GUI e.g. because of a setting change or data input 
            this event is fired and we have to update to tab with the presentation.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:Cryptool.PluginBase.StatusEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.AddWorkspaceManager">
            <summary>
            Adds the workspace.
            </summary>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.AddWorkspaceManager(DragDrop.Interfaces.IWorkspaceManager)">
            <summary>
            Adds the workspace manager.
            </summary>
            <param name="workspaceManager">The workspace manager.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.CanSwitchToDisplayLevel(Cryptool.PluginBase.DisplayLevel)">
            <summary>
            Determines whether this instance [can switch to display level] the specified new level.
            </summary>
            <param name="newLevel">The new level.</param>
            <returns>
            	<c>true</c> if this instance [can switch to display level] the specified new level; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.CloseTabItem(DevComponents.WpfDock.DockWindow)">
            <summary>
            Closes the tab item and updates the corresponding dictionaries (used to restore tab structure on workspace switch). 
            </summary>
            <param name="dockWindow">The dock window.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.CloseWorkspace">
            <summary>
            Closes the active workspace if more than one workspace is opended.
            </summary>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.DeleteCurrentItem">
            <summary>
            Forwards the delete command to the current workspace manager and closes opended 
            tabs of plugins that will be deleted. 
            </summary>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.ShowHelp">
            <summary>
            Shows the tab with the help information.
            </summary>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.ShowPluginPresentation">
            <summary>
            Shows presentation of currently selected plugin.
            </summary>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.ShowPluginPresentation(Cryptool.PluginBase.IPlugin)">
            <summary>
            Shows the plugin presentation.
            </summary>
            <param name="plugin">The plugin.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.LoadProject(Cryptool.Core.PluginManager,System.String)">
            <summary>
            Loads the project.
            </summary>
            <param name="pluginManager">The plugin manager.</param>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.NewProject">
            <summary>
            Creates a new project. 
            </summary>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.Redo">
            <summary>
            Redoes command on current workspaceManager.
            </summary>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.Run">
            <summary>
            Execute the current chain. 
            </summary>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.SaveProject(Cryptool.Core.PluginManager,System.String)">
            <summary>
            Display SaveFileDialog and save project to selected file.
            </summary>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.validateSubWorkspace">
            <summary>
            Checks if current workspace is valid to be saved as a SubWorkspace.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.SaveSubWorkspace">
            <summary>
            Saves the sub workspace.
            </summary>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.DeleteSubWorkspace(System.String)">
            <summary>
            Deletes the sub workspace.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.LoadSubworkspaceQuickInfos">
            <summary>
            Loads the subworkspace quick infos.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.ShowEditorDescription">
            <summary>
            Shows the editor description.
            </summary>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.ShowDescription">
            <summary>
            Shows the XAML-description of a plugin if available.
            </summary>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.ShowDescription(Cryptool.PluginBase.IPlugin,System.Windows.Documents.FlowDocument)">
            <summary>
            Shows the description.
            </summary>
            <param name="plugin">The plugin.</param>
            <param name="flowDocument">The flow document.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.ShowSlider">
            <summary>
            Shows the slider.
            </summary>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.Stop">
            <summary>
            Stops the running workspace.
            </summary>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.Undo">
            <summary>
            Undoes command on current workspaceManager.
            </summary>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.ZoomTo100">
            <summary>
            Zooms to 100%.
            </summary>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.ZoomFitScreen">
            <summary>
            Shows all elements without scrollbars
            </summary>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.Workspace_Drop(System.Object,System.Windows.DragEventArgs)">
            <summary>
            Handles the Drop event of the Workspace control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.DragEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.CreateSubWorkspace(System.String)">
            <summary>
            Creates the sub workspace.
            </summary>
            <param name="identifier">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:AnotherEditor.DragDrop.ProjectManager.GetActiveTabTitle">
            <summary>
            Gets the active tab title.
            </summary>
            <returns></returns>
        </member>
        <member name="P:AnotherEditor.DragDrop.ProjectManager.AnotherEditor">
            <summary>
            Gets or sets another editor.
            </summary>
            <value>Another editor.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.ProjectManager.CanAddWorkspace">
            <summary>
            Gets a value indicating whether this instance can add workspace.
            </summary>
            <value>
            	<c>true</c> if this instance can add workspace; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:AnotherEditor.DragDrop.ProjectManager.CanCloseWorkspace">
            <summary>
            Gets a value indicating whether this instance can close workspace.
            </summary>
            <value>
            	<c>true</c> if this instance can close workspace; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:AnotherEditor.DragDrop.ProjectManager.CanCreateComparator">
            <summary>
            Gets a value indicating whether this instance can create comparator.
            </summary>
            <value>
            	<c>true</c> if this instance can create comparator; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:AnotherEditor.DragDrop.ProjectManager.CanCreateInput">
            <summary>
            Gets a value indicating whether this instance can create input.
            </summary>
            <value>
            	<c>true</c> if this instance can create input; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:AnotherEditor.DragDrop.ProjectManager.CanDeleteItem">
            <summary>
            Gets a value indicating whether this instance can delete item.
            </summary>
            <value>
            	<c>true</c> if this instance can delete item; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:AnotherEditor.DragDrop.ProjectManager.CanEdit">
            <summary>
            Gets a value indicating whether this instance can edit.
            </summary>
            <value><c>true</c> if this instance can edit; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.ProjectManager.CanLoad">
            <summary>
            Gets a value indicating whether this instance can load.
            </summary>
            <value><c>true</c> if this instance can load; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.ProjectManager.CanRedo">
            <summary>
            Gets a value indicating whether this instance can redo.
            </summary>
            <value><c>true</c> if this instance can redo; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.ProjectManager.CanRun">
            <summary>
            Gets a value indicating whether this instance can run.
            </summary>
            <value><c>true</c> if this instance can run; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.ProjectManager.CanSave">
            <summary>
            Gets a value indicating whether this instance can save.
            </summary>
            <value><c>true</c> if this instance can save; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.ProjectManager.CanShowOptions">
            <summary>
            Gets a value indicating whether this instance can show options.
            </summary>
            <value>
            	<c>true</c> if this instance can show options; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:AnotherEditor.DragDrop.ProjectManager.CanStop">
            <summary>
            Gets a value indicating whether this instance can stop.
            </summary>
            <value><c>true</c> if this instance can stop; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.ProjectManager.CanSwitchToProject">
            <summary>
            Gets a value indicating whether this instance can switch to project.
            </summary>
            <value>
            	<c>true</c> if this instance can switch to project; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:AnotherEditor.DragDrop.ProjectManager.CanUndo">
            <summary>
            Gets a value indicating whether this instance can undo.
            </summary>
            <value><c>true</c> if this instance can undo; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.ProjectManager.CanZoomTo100">
            <summary>
            Gets a value indicating whether this instance can zoom to100.
            </summary>
            <value>
            	<c>true</c> if this instance can zoom to100; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:AnotherEditor.DragDrop.ProjectManager.CanSaveSubWorkspace">
            <summary>
            Gets a value indicating whether this instance can save sub workspace.
            </summary>
            <value>
            	<c>true</c> if this instance can save sub workspace; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:AnotherEditor.DragDrop.ProjectManager.CountWorkspaceManager">
            <summary>
            Gets the count workspace manager.
            </summary>
            <value>The count workspace manager.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.ProjectManager.CurrentDisplayLevel">
            <summary>
            Gets or sets the current display level.
            </summary>
            <value>The current display level.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.ProjectManager.HasChanges">
            <summary>
            Checks all elements on all workspaces for changes.
            </summary>
            <value>
            	<c>true</c> if this instance has changes; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:AnotherEditor.DragDrop.ProjectManager.IsRunning">
            <summary>
            Gets or sets a value indicating whether this instance is running.
            </summary>
            <value>
            	<c>true</c> if this instance is running; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:AnotherEditor.DragDrop.ProjectManager.PresentationControl">
            <summary>
            Gets or sets the presentation control.
            </summary>
            <value>The presentation control.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.ProjectManager.SaveFilename">
            <summary>
            Gets or sets the save filename.
            </summary>
            <value>The save filename.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.ProjectManager.SavePath">
            <summary>
            Gets or sets the save path.
            </summary>
            <value>The save path.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.ProjectManager.SelectedPlugin">
            <summary>
            Gets the selected plugin.
            </summary>
            <value>The selected plugin.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.ProjectManager.SelectedThumb">
            <summary>
            Gets or sets the selected thumb.
            </summary>
            <value>The selected thumb.</value>
        </member>
        <member name="P:AnotherEditor.DragDrop.ProjectManager.WorkspaceManager">
            <summary>
            Gets the current workspace manager.
            </summary>
            <value>The workspace manager.</value>
        </member>
        <member name="E:AnotherEditor.DragDrop.ProjectManager.OnAnotherEditorStatusBarTextChanged">
            <summary>
            Occurs when [on another editor status bar text changed].
            </summary>
        </member>
        <member name="E:AnotherEditor.DragDrop.ProjectManager.OnGuiLogNotificationOccured">
            <summary>
            Occurs when [on GUI log notification occured].
            </summary>
        </member>
        <member name="E:AnotherEditor.DragDrop.ProjectManager.OnProjectTitleChanged">
            <summary>
            Occurs when [on project title changed].
            </summary>
        </member>
        <member name="E:AnotherEditor.DragDrop.ProjectManager.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="E:AnotherEditor.DragDrop.ProjectManager.SelectedPluginChanged">
            <summary>
            Occurs when [selected plugin changed].
            </summary>
        </member>
        <member name="T:AnotherEditor.DragDrop.ContainerDockWindow">
            <summary>
            Helper class to manage the different tabs
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.ContainerDockWindow.TabType">
            <summary>
            Presentation or Description
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.ContainerDockWindow.Plugin">
            <summary>
            The Plugin
            </summary>
        </member>
        <member name="M:AnotherEditor.DragDrop.ContainerDockWindow.#ctor(AnotherEditor.DragDrop.TabType,Cryptool.PluginBase.IPlugin)">
            <summary>
            Initializes a new instance of the <see cref="T:AnotherEditor.DragDrop.ContainerDockWindow"/> class.
            </summary>
            <param name="tabType">Type of the tab.</param>
            <param name="plugin">The plugin.</param>
        </member>
        <member name="T:AnotherEditor.DragDrop.TabType">
            <summary>
            Presentation, Description
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.TabType.Presentation">
            <summary>
            Presentation
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.TabType.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="T:AnotherEditor.DragDrop.PersistenceManager">
            <summary>
            Save workspaces and SubWorkspaces. 
            </summary>
        </member>
        <member name="M:AnotherEditor.DragDrop.PersistenceManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AnotherEditor.DragDrop.PersistenceManager"/> class.
            </summary>
        </member>
        <member name="M:AnotherEditor.DragDrop.PersistenceManager.AssemblyResolveEventHandler(System.Object,System.ResolveEventArgs)">
            <summary>
            This is used in unit-test environment
            Need this when using deserialize-method in WorkspaceManager to load Data.
            The custom types are not found if we don't return our plugin assembly here.
            Found solution at: http://support.microsoft.com/kb/837908 but used some shorter code.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:System.ResolveEventArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:AnotherEditor.DragDrop.PersistenceManager.CreateSubWorkspace(System.String)">
            <summary>
            Creates the sub workspace.
            </summary>
            <param name="Identifier">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:AnotherEditor.DragDrop.PersistenceManager.Load(System.String,DragDrop.Interfaces.PersistenceMethod)">
            <summary>
            Loads the specified filename.
            </summary>
            <param name="Filename">The filename.</param>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="M:AnotherEditor.DragDrop.PersistenceManager.LoadSubWorkspaceQuickInfos">
            <summary>
            Loads the sub workspace quick infos.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AnotherEditor.DragDrop.PersistenceManager.Save(System.Collections.Generic.List{DragDrop.Interfaces.IWorkspaceManager},System.String,DragDrop.Interfaces.PersistenceMethod)">
            <summary>
            Saves the specified list workspace manager.
            </summary>
            <param name="listWorkspaceManager">The list workspace manager.</param>
            <param name="Filename">The filename.</param>
            <param name="method">The method.</param>
            <returns>true on success else false</returns>
        </member>
        <member name="M:AnotherEditor.DragDrop.PersistenceManager.SaveSubWorkspace(System.Collections.Generic.List{DragDrop.Interfaces.IWorkspaceManager})">
            <summary>
            Saves the sub workspace.
            </summary>
            <param name="listWorkspaceManager">The list workspace manager.</param>
            <returns></returns>
        </member>
        <member name="E:AnotherEditor.DragDrop.PersistenceManager.OnAnotherEditorStatusBarTextChanged">
            <summary>
            Occurs when [on another editor status bar text changed].
            </summary>
        </member>
        <member name="T:AnotherEditor.DragDrop.PropertyInfoComparer">
            <summary>
            Used to create order on save and load. Properties will be ordered alphabetically or numerically, if
            PropertySaveOrderAttribute is being used. If properties with and without PropertySaveOrder are
            being used in parallel, properties with PropertySaveOrder will be listed first, following by
            alphabetically ordered properties without PropertySaveOrderAttribute.
            </summary>
        </member>
        <member name="M:AnotherEditor.DragDrop.PropertyInfoComparer.Compare(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
            <summary>
            Compares two properties by PropertySaveOrderAttribute and returns a value indicating whether one is less than,
            equal to or greater than the other. If only one of the two properties has the attribute set, it has always higher
            priority (smaller value) than the other one. If neither of them has the attribute set, they are compared by
            alphabet.
            
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value Condition Less than zero<paramref name="x"/> is less than <paramref name="y"/>.Zero<paramref name="x"/> equals <paramref name="y"/>.Greater than zero<paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
        </member>
        <member name="T:AnotherEditor.DragDrop.RestoreConnections">
            <summary>
            Container element is used to store a connection between plugins. 
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.RestoreConnections.ConnectedElement">
            <summary>
            Target element. 
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.RestoreConnections.ConnectedElementInputConnectorPosition">
            <summary>
            Position of input
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.RestoreConnections.Element">
            <summary>
            Source element. 
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.RestoreConnections.OutputConnectorPosition">
            <summary>
            Source connector. 
            </summary>
        </member>
        <member name="T:AnotherEditor.DragDrop.RestoreDragContent">
            <summary>
            This class is used to persist editor internal elements like the info-elemnt
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.RestoreDragContent.ArrayRestoreSettings">
            <summary>
            ArrayRestoreSettings
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.RestoreDragContent.AssemblyQualifiedName">
            <summary>
            AssemblyQualifiedName
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.RestoreDragContent.LastExpandedHeight">
            <summary>
            LastExpandedHeight
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.RestoreDragContent.LastExpandedWidth">
            <summary>
            LastExpandedWidth
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.RestoreDragContent.Position_X">
            <summary>
            Position X
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.RestoreDragContent.Position_Y">
            <summary>
            Position Y
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.RestoreDragContent.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="T:AnotherEditor.DragDrop.RestoreElement">
            <summary>
            This class is used to persist all plugins used on a workspace
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.RestoreElement.ArrayRestoreSettings">
            <summary>
            ArrayRestoreSettings
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.RestoreElement.AssemblyQualifiedName">
            <summary>
            AssemblyQualifiedName
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.RestoreElement.ElementNr">
            <summary>
            Element nr
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.RestoreElement.LastExpandedHeight">
            <summary>
            LastExpandedHeight
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.RestoreElement.LastExpandedWidth">
            <summary>
            LastExpandedWidth
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.RestoreElement.Position_X">
            <summary>
            Position X on workspace. 
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.RestoreElement.Position_Y">
            <summary>
            Position Y on workspace. 
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.RestoreElement.QuickWatchPosition">
            <summary>
            Last quick watch position. 
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.RestoreElement.SubWorkspaceIdentifier">
            <summary>
            If this member is set, we now that this element is a subworkspace and needs special treatment.
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.RestoreElement.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.RestoreElement.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.RestoreElement.VisualHeight">
            <summary>
            Height of visual. 
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.RestoreElement.VisualWidth">
            <summary>
            Width of visual. 
            </summary>
        </member>
        <member name="T:AnotherEditor.DragDrop.RestoreProject">
            <summary>
            Container class used to store project elements. 
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.RestoreProject.ArrDragContent">
            <summary>
            Editor internal drag content elements. 
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.RestoreProject.ArrayConnections">
            <summary>
            Connections
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.RestoreProject.ArrayElements">
            <summary>
            The Plugin elements.
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.RestoreProject.DisplayLevel">
            <summary>
            The display level. 
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.RestoreProject.Workspace">
            <summary>
            the workspace size
            </summary>
        </member>
        <member name="T:AnotherEditor.DragDrop.RestoreSetting">
            <summary>
            Name-value pair for settings.
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.RestoreSetting.Name">
            <summary>
            Name. 
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.RestoreSetting.Value">
            <summary>
            Value. 
            </summary>
        </member>
        <member name="T:AnotherEditor.DragDrop.RestoreSubWorkspace">
            <summary>
            This class is used to store sub workspaces and has the name and the guid 
            as single attributes so that no workspace restore is necessary before using 
            the sub workspace.
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.RestoreSubWorkspace.RestoreProject">
            <summary>
            A Restore project that represents the sub workspace. 
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.RestoreSubWorkspace.SubWorkspaceQuickInfo">
            <summary>
            SWS Quick info. 
            </summary>
        </member>
        <member name="T:AnotherEditor.DragDrop.RestoreWorkspace">
            <summary>
            Last workspace size. 
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.RestoreWorkspace.Height">
            <summary>
            Height. 
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.RestoreWorkspace.Width">
            <summary>
            Width. 
            </summary>
        </member>
        <member name="T:AnotherEditor.DragDrop.SubWorkspaceQuickInfo">
            <summary>
            QuickInfo is used to store basic data for gui lists. Loading of sws only on request. 
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.SubWorkspaceQuickInfo.FileName">
            <summary>
            Filename for performance reasons
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.SubWorkspaceQuickInfo.Identifier">
            <summary>
            GUID
            </summary>
        </member>
        <member name="F:AnotherEditor.DragDrop.SubWorkspaceQuickInfo.Name">
            <summary>
            Name given by user
            </summary>
        </member>
        <member name="M:AnotherEditor.DragDrop.SubWorkspaceQuickInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AnotherEditor.DragDrop.SubWorkspaceQuickInfo"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="identifier">The identifier.</param>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="T:AnotherEditor.AnotherEditorStatusBarTextChangedHandler">
            <summary>
            Internal messages will be forwarded to the GUI message log
            </summary>
        </member>
        <member name="T:AnotherEditor.RunFinishedEventHandler">
            <summary>
            Fired by workspace manager after the run finished 
            </summary>
        </member>
        <member name="T:AnotherEditor.Initialize">
            <summary>
            Used to execute the initialize method of the plugins. Used in AddElementCommand, 
            callback is handled in workspace manager.  
            </summary>
        </member>
        <member name="T:AnotherEditor.PluginChangedHandler">
            <summary>
            Occurs when selected plugin changes
            </summary>
        </member>
        <member name="T:AnotherEditor.ChildRemovedEventHandler">
            <summary>
            Workspace throws event after child was removed.
            </summary>
        </member>
        <member name="T:AnotherEditor.ChildAddedEventHandler">
            <summary>
            Workspace throws event after child was added.
            </summary>
        </member>
        <member name="T:AnotherEditor.ExecuteDelegate">
            <summary>
            Used by WorkspaceManager to execute Plugins via the BaseElements execution method. 
            </summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
