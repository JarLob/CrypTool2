on:
  workflow_dispatch:
    inputs:
      force:
        required: false
        default: false
  schedule:
    - cron: "28 21 * * 5"

jobs:
  compare:
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.compare-commits.outputs.result }}

    steps:
      - uses: actions/github-script@v3.1.0
        id: compare-commits
        with:
          script: |
            const ret = await github.repos.compareCommits({
              owner: "JarLob",
              repo: "cryptool2",
              base: "mogulano:main",
              head: "JarLob:main",
            });

            return { behind_by: ret.data.behind_by, sha: ret.data.base_commit.sha };

  sync:
    needs: [compare, analyze]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        token: ${{ secrets.SYNC_TOKEN }}
        fetch-depth: 20

    - run: |
        git remote add upstream git://github.com/mogulano/cryptool2.git
        git config --global user.email "octokit@github.com"
        git config --global user.name "Octokit"
        git fetch upstream || exit 1
        git rebase ${{ fromJSON(needs.compare.outputs.result).sha }} || exit 1
        git push || exit 1

  analyze:
    needs: compare
    runs-on: windows-latest
    if: fromJSON(needs.compare.outputs.result).behind_by > 0 || github.event.inputs.force

    strategy:
      fail-fast: false
      matrix:
        # Supported options are ['csharp', 'cpp', 'go', 'java', 'javascript', 'python']
        # https://docs.github.com/en/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#overriding-automatic-language-detection
        language: ['csharp','python','javascript']

    steps:
    - uses: actions/checkout@v2
      with:
        persist-credentials: false

    - uses: github/codeql-action/init@v1
      with:
        languages: ${{ matrix.language }}
        config-file: ./.github/codeql-config.yml

    - name: Autobuild
      uses: github/codeql-action/autobuild@v1

    # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
    # üìö https://git.io/JvXDl

    # ‚úèÔ∏è If the Autobuild fails above, remove it and uncomment the following three lines
    #    and modify them (or add more) to build your code if your project
    #    uses a compiled language
    #- name: Add msbuild to PATH
    #  uses: microsoft/setup-msbuild@v1.0.2
    #- run: |
    #    nuget restore name.sln
    #    msbuild name.sln /p:UseSharedCompilation=false

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1
      with:
        upload: false

    - name: Export Temp Directory Environment Variable
      shell: bash
      run: echo '::set-output name=RUNNER_TEMP::'${RUNNER_TEMP//\\/\\\\}
      id: runner-temp

    - name: Zip CodeQL Database
      shell: pwsh
      run: Get-ChildItem -Path "${{steps.runner-temp.outputs.RUNNER_TEMP}}/codeql_databases/${{ matrix.language }}" -Exclude log | Compress-Archive -DestinationPath "${{steps.runner-temp.outputs.RUNNER_TEMP}}/${{ matrix.language }}.zip"

    - run: npm install @azure/storage-blob
    - run: npm install got

    - uses: actions/github-script@v3.1.0
      with:
        script: |
          const src = "${{ steps.runner-temp.outputs.RUNNER_TEMP }}/${{ matrix.language }}.zip";

          const { BlockBlobClient } = require(`${process.env.GITHUB_WORKSPACE}/node_modules/@azure/storage-blob`);
          const got = require(`${process.env.GITHUB_WORKSPACE}/node_modules/got`);

          const secret = ${{ secrets.CODEQL_STORAGE_CONNECTION_STRING }};

          try {
            const response = await got('https://github.com/JarLob/cryptool2/compare/mogulano:main...JarLob:main.patch');
            const blockBlobClient = new BlockBlobClient(secret.patch);
            blockBlobClient.upload(response.body, response.body.length);
          } catch (error) {
            console.log(error.response.body);
          }

          const blockBlobClient = new BlockBlobClient(secret.${{ matrix.language }});
          await blockBlobClient.uploadFile(src);
