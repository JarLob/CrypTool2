<?xml version="1.0" encoding="utf-8"?>
<sample>

  <title lang="en">One Time Pad Misusage</title>
  <summary lang="en">Misusage of the One Time Pad</summary>
  <description lang="en">This template shows why the One Time Pad should always be used only once. </description>
  <keywords>One time pad, XOR, perfect security, misusage</keywords>

  <title lang="de">One-Time-Pad-Fehlbenutzung</title>
  <summary lang="de">Fehlbenutzung des One-Time-Pads</summary>
  <description lang="de">Diese Vorlage zeigt, warum ein One-Time-Pad immer nur genau einmal benutzt werden sollte und nicht öfter.</description>
  <keywords lang="de">One time pad, perfekte Sicherheit, XOR, Fehlbenutzung</keywords>

  <icon file="One time pad misusagepng" />
  <relevantPlugins>
    <plugin name="Xor" />
    <plugin name="PictureOutput" />
  </relevantPlugins>

  <replacements lang="de">
    <replacement key="$Plaintext$" value="Klartext"/>
    <replacement key="$Ciphertext$" value="Geheimtext"/>
    <replacement key="$StringDecoder$" value="String-Decodierer"/>
    <replacement key="$StringEncoder$" value="String-Codierer"/>
    <replacement key="$concat$" value="Konaktenation"/>
    <replacement key="$One Time Pad$" value="One-Time-Pad"/>
	 <replacement key="$memo$" value="Diese Vorlage demonstriert, warum ein {\b One-Time-Pad} immer nur einmal verwendet werden sollte.\line\line Die Klartexte A und B werden beide mit demselben OTP verschlüsselt:\line\line Geheimtext A = Klartext A XOR One-Time-Pad\line Geheimtext B = Klartext B XOR One-Time-Pad\line\line Werden beide Geheimtext unabhängig voneinander analysiert, so gewinnt man keine Informationen über die Klartexte. Aber wenn der Angreifer Geheimtext A und Geheimtext B mit XOR verknüpft, gewinnt er viele Informationen.\line\line Dies kann man sich durch Betrachtung der Gleichungen leicht erklären:\line\line Geheimtext A XOR Geheimtext B = (Klartext A XOR One-Time-Pad) XOR (Klartext B XOR-One-Time Pad) = Klartext A XOR Klartext B\line\line Wird ein OTP zweimal benutzt, kann ein Angreifer diesen eliminieren und Informationen über beide Klartexte erlangen.\line\line Es ist also eine schlechte Idee, einen One-Time-Pad mehr als einmal zu benutzen."/> 
  </replacements>
  <replacements lang="en">
    <replacement key="$Plaintext$" value="Plaintext"/>
    <replacement key="$Ciphertext$" value="Ciphertext"/>
    <replacement key="$StringDecoder$" value="StringDecoder"/>
    <replacement key="$StringEncoder$" value="StringEncoder"/>
    <replacement key="$concat$" value="Concatenate"/>
    <replacement key="$One Time Pad$" value="One Time Pad"/>
	 <replacement key="$memo$" value="This template shows why the {\b One Time Pad} should always be used only once.\line\line Plaintext A and plaintext B are both encrypted using the same one time pad:\line\line Encrypted_A = Plaintext_A XOR One Time Pad\line Encrypted_B = Plaintext_B XOR One Time Pad\line\line Both cipertexts analysed independently do not offer any information if the attacker has not the one time pad. But if the attacker combines Encrypted_A and Encrypted_B using the XOR-function, he can reveal a huge amount of information.\line\line This can easily be explained by looking at the equations:\line\line Encrypted_A XOR Encrypted_B = (Plaintext_A XOR One Time Pad) XOR (Plaintext_B XOR One Time Pad) = Plaintext_A XOR Plaintext_B\line\line Thus using a one time pad twice an attacker may remove the one time pad completely from both ciphertexts and gain information about both plaintexts.\line\line So using a one time pad more than once is a bad idea :-)"/> 
  </replacements>

</sample>
