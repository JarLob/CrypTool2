<?xml version="1.0" encoding="utf-8"?>
<sample>
  <title lang="en">Camellia Cipher</title>
  <title lang="zh">茶花密码</title>
  <title lang="ru">Camellia Cipher</title>
  <summary lang="en">Usage of the <i>Camellia</i> cipher</summary>
  <summary lang="zh">茶花密码的用法</summary>
  <summary lang="ru">Использование шифрования Camellia</summary>
  <description lang="en">Camellia is a 128-bit block cipher jointly developed by Mitsubishi and NTT of Japan. The cipher has been approved for use by the ISO/IEC, the European Union's NESSIE project and the Japanese CRYPTREC project. <newline /><newline />
Source: <external ref="http://en.wikipedia.org/wiki/Camellia_%28cipher%29" /></description>
  <description lang="zh">山茶是日本三菱和日本NTT联合开发的128位分组密码。该密码已被ISO / IEC，欧盟的NESSIE项目和日本的CRYPTREC项目批准使用。资源：</description>
  <description lang="ru">Camellia - это 128-битный блок-шифр, разработанный Mitsubishi и NTT Японии. Шифр был одобрен для использования ISO / IEC, проектом NESSIE Европейского Союза и японским проектом CRYPTREC. Источник:</description>
  <keywords>symmetric, japan, mitsubishi, NTT</keywords>
  <keywords lang="zh">对称，日本，三菱，NTT</keywords>
  <keywords lang="ru">симметричный, японский, mitsubishi, NTT</keywords>
  <title lang="de">Camellia-Chiffre</title>
  <summary lang="de">Benutzung der <i>Camellia</i>-Chiffre</summary>
  <description lang="de">Camellia ist eine symmetrische Blockchiffre, die im Jahr 2000 in Zusammenarbeit von Mitsubishi und NTT entwickelt wurde. Camellia wurde vom europäischen NESSIE-Projekt und dem japanischen CRYPTREC-Projekt als einer ihrer empfohlenen Algorithmen ausgewählt.<newline /><newline />
Quelle: <external ref="http://de.wikipedia.org/wiki/Camellia_%28Algorithmus%29" /></description>
  <keywords lang="de">symmetrisch</keywords>
  <icon file="Camellia.png" />
  <relevantPlugins>
    <plugin name="Camellia" />
  </relevantPlugins>
  <replacements lang="de">
    <replacement key="$Plaintext$" value="Klartext" />
    <replacement key="$Ciphertext$" value="Geheimtext" />
    <replacement key="$Key$" value="Schlüssel (Hex)" />
    <replacement key="$Message Encoder$" value="Nachrichten-Codierer" />
    <replacement key="$Message Decoder$" value="Nachrichten-Decodierer" />
    <replacement key="$Key Decoder$" value="Schlüssel-Decodierer" />
    <replacement key="$Decrypted Ciphertext$" value="Entschlüsselter Geheimtext" />
    <replacement key="$text$" value="Franz jagt im komplett verwahrlosten Taxi quer durch Bayern." />
    <replacement key="$memo$" value="Mit dieser Komponente können Sie einen beliebigen Text, der in die Komponente {\b Klartext} auf der linken Seite eingegeben werden muss, mit der {\b Camellia}-Komponente verschlüsseln. Der resultierende verschlüsselte Text wird in der Komponente {\b Geheimtext} auf der rechten Seite angezeigt, nachdem die Vorlage durch Klicken der &quot;Starten&quot;-Schaltfläche ausgeführt wurde. Die {\b Camellia}-Komponente arbeitet mit binären Werten, d.h. Bytes. Daher wird der eingegebene Text zuerst mit der Komponente {\b Nachrichten-Decodierer} in Bytes konvertiert. Mit den gegebenen Einstellungen wird der Text im ASCII-Format interpretiert. Die so erhaltenen Bytes werden mit {\b Camellia} verschlüsselt und man erhält eine weitere Bytefolge. Diese wird dann mit Hilfe der {\b Nachrichten-Codierer}-Komponente ins hexadezimale Format konvertiert und ausgegeben. Diese Vorlage kann auch zur Entschlüsselung von Nachrichten verwendet werden. Dazu müssen zuerst die verschlüsselten hexadezimalen Werte in die Komponente {\b Klartext} kopiert werden. Dann müssen folgende Anpassungen vorgenommen werden: (1) Das Eingabeformat in der Komponente {\b Nachrichten-Decodierer} muss auf &quot;Hexadezimal&quot; gesetzt werden; (2) In der {\b Camellia}-Komponente muss die Aktion auf &quot;Entschlüsselung&quot; gesetzt werden; (3) Das Format in der Komponente {\b Nachrichten-Codierer} muss auf Text und die Kodierung auf &quot;ASCII&quot; gesetzt werden." />
  </replacements>
  <replacements lang="zh">
    <replacement key="$Plaintext$" value="纯文本" />
    <replacement key="$Ciphertext$" value="密文" />
    <replacement key="$Key$" value="密钥（十六进制）" />
    <replacement key="$Message Encoder$" value="讯息编码器" />
    <replacement key="$Message Decoder$" value="讯息解码器" />
    <replacement key="$Key Decoder$" value="密钥解码器" />
    <replacement key="$Decrypted Ciphertext$" value="解密密文" />
    <replacement key="$text$" value="弗朗兹（Franz）乘坐一辆完全残破的出租车在巴伐利亚州内搜寻。" />
    <replacement key="$memo$" value="使用此组件，您可以使用{\b Camellia}组件加密必须在左侧的{\b Klartext}组件中输入的任何文本。在通过单击“开始”按钮执行模板之后，生成的加密文本将显示在右侧的{\b密文}组件中。 {\b Camellia}组件可使用二进制值（即字节）。因此，首先使用组件{\b Message Decoder}将输入的文本转换为字节。使用给定的设置，文本将以ASCII格式解释。用{\b Camellia}加密以此方式获得的字节，您将获得另一个字节序列。然后将其转换为十六进制格式，并在{\b消息编码器}组件的帮助下输出。该模板也可以用于解密消息。为此，必须首先将加密的十六进制值复制到{\b Klartext}组件中。然后必须进行以下调整：（1）组件{\b消息解码器}中的输入格式必须设置为“十六进制”； （2）在{\b Camellia}组件中，必须将操作设置为“解密”； （3）必须将组件{\b Message Encoder}中的格式设置为文本，并将编码设置为“ ASCII”。" />
  </replacements>
  <replacements lang="ru">
    <replacement key="$Plaintext$" value="обычный текст" />
    <replacement key="$Ciphertext$" value="шифротекста" />
    <replacement key="$Key$" value="Ключ (hex)" />
    <replacement key="$Message Encoder$" value="Новости кодировщик" />
    <replacement key="$Message Decoder$" value="декодер сообщений" />
    <replacement key="$Key Decoder$" value="Ключ-декодер" />
    <replacement key="$Decrypted Ciphertext$" value="Расшифрованный зашифрованный текст" />
    <replacement key="$text$" value="Франц охотится на полностью забытое такси через Баварию." />
    <replacement key="$memo$" value="Этот компонент позволяет вам шифровать любой текст, который необходимо ввести в компоненте {\b plain text} с левой стороны, с помощью компонента {\b Camellia}. Полученный зашифрованный текст отображается в компоненте {\b Ciphertext} справа после запуска шаблона, нажав кнопку «Пуск». Компонент {\b Camellia} работает с двоичными значениями, то есть байтами. Поэтому исходный текст сначала преобразуется в байты с помощью компонента {\b Message Decoder}. С заданными настройками текст интерпретируется в формате ASCII. Результирующие байты зашифровываются с помощью {\b Camellia} и получается другая последовательность байтов. Затем он преобразуется в шестнадцатеричный формат с использованием компонента {\b message encoder} и вывода. Этот шаблон также можно использовать для дешифрования сообщений. Для этого зашифрованные шестнадцатеричные значения сначала должны быть скопированы в компонент {\b plaintext}. Затем необходимо выполнить следующие настройки: (1) Формат ввода в компоненте {\b декодер сообщений} должен быть установлен в &amp;quot;шестнадцатеричный&amp;quot;; (2) В компоненте {\b Camellia} действие должно быть установлено на «Расшифровка»; (3) Формат в компоненте {\b Message Encoder} должен быть установлен в текст, а кодировка - в «ASCII»." />
  </replacements>
  <replacements lang="en">
    <replacement key="$Plaintext$" value="Plaintext" />
    <replacement key="$Ciphertext$" value="Ciphertext" />
    <replacement key="$Key$" value="Key (Hex values)" />
    <replacement key="$Message Encoder$" value="Message Encoder" />
    <replacement key="$Message Decoder$" value="Message Decoder" />
    <replacement key="$Key Decoder$" value="Key Decoder" />
    <replacement key="$Decrypted_Ciphertext$" value="Decrypted Ciphertext" />
    <replacement key="$text$" value="The quick brown fox jumps over the lazy dog." />
    <replacement key="$memo$" value="With this template you can use the {\b Camellia} component to encrypt an arbitrary text entered in the {\b Plaintext} component on the left side. The resulting encrypted text is displayed in the {\b Ciphertext} component on the right side after hitting the Play button. The {\b Camellia} component works on binary values, i.e. bytes. Thus, the inputted text is first converted to bytes with the {\b Message decoder} component. With the current settings, it is interpreted as ASCII. The resulting bytes are then encrypted with {\b Camellia}, yielding another sequence of bytes. These bytes are then simply printed as hexadecimal values with the help of the {\b Message encoder} component. Note that you can also decrypt messages with this template. To do so, you first copy the encrypted hexadecimal values to the {\b Plaintext}. Then you have to change the following: (1) Set Input format of the {\b Message decoder} to Hexadecimal; (2) Set Action of {\b Camellia} to Decrypt; (3) Set Format of the {\b Message encoder} to Text and the encoding to ASCII." />
  </replacements>
</sample>