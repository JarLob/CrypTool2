<?xml version="1.0" encoding="utf-8"?>
<sample>

  <title lang="en">Twofish Cipher</title>
  <summary lang="en">Usage of the <i>Twofish</i> cipher</summary>
  <description lang="en">In cryptography, Twofish is a symmetric key block cipher with a block size of 128 bits and key sizes up to 256 bits. It was one of the five finalists of the Advanced Encryption Standard contest, but was not selected for standardisation. Twofish is related to the earlier block cipher Blowfish.<newline /><newline />
Source: <external ref="http://en.wikipedia.org/wiki/Twofish" /></description>
  <keywords>block, symmetric, Schneier, Finalist, AES, rounds, Feistel</keywords>

  <title lang="de">Twofish-Chiffre</title>
  <summary lang="de">Benutzung der <i>Twofish</i>-Chiffre</summary>
  <description lang="de">Twofish ist ein symmetrischer Verschlüsselungsalgorithmus, der von Bruce Schneier, Niels Ferguson, John Kelsey, Doug Whiting, David Wagner und Chris Hall entwickelt wurde. Es handelt sich um eine Blockchiffre mit einer Blockgröße von 128 Bit und 16 Runden, die Schlüssellängen betragen 128, 192 oder 256 Bit.<newline /><newline />
Quelle: <external ref="http://de.wikipedia.org/wiki/Twofish" /></description>
  <keywords lang="de">Blockchiffre, symmetrisch, Runden</keywords>

  <icon file="Twofish.png" />
  <relevantPlugins>
    <plugin name="Twofish" />
  </relevantPlugins>

  <replacements lang="de">
    <replacement key="$Plaintext$" value="Klartext"/>
    <replacement key="$Ciphertext$" value="Geheimtext"/>
    <replacement key="$Key$" value="Schlüssel (Hex)"/>
    <replacement key="$Message Encoder$" value="Nachrichten-Codierer"/>
    <replacement key="$Message Decoder$" value="Nachrichten-Decodierer"/>
    <replacement key="$Key Decoder$" value="Schlüssel-Decodierer"/>
    <replacement key="$Decrypted Ciphertext$" value="Entschlüsselter Geheimtext"/>
    <replacement key="$text$" value="Franz jagt im komplett verwahrlosten Taxi quer durch Bayern."/>
	 <replacement key="$memo$" value="Mit dieser Komponente können Sie einen beliebigen Text, der in die Komponente {\b Klartext} auf der linken Seite eingegeben werden muss, mit der {\b Twofish}-Komponente verschlüsseln. Der resultierende verschlüsselte Text wird in der Komponente {\b Geheimtext} auf der rechten Seite angezeigt, nachdem die Vorlage durch Klicken der &quot;Starten&quot;-Schaltfläche ausgeführt wurde. Die {\b Twofish}-Komponente arbeitet mit binären Werten, d.h. Bytes. Daher wird der eingegebene Text zuerst mit der Komponente {\b Nachrichten-Decodierer} in Bytes konvertiert. Mit den gegebenen Einstellungen wird der Text im ASCII-Format interpretiert. Die so erhaltenen Bytes werden mit {\b Twofish} verschlüsselt und man erhält eine weitere Bytefolge. Diese wird dann mit Hilfe der {\b Nachrichten-Codierer}-Komponente ins hexadezimale Format konvertiert und ausgegeben. Diese Vorlage kann auch zur Entschlüsselung von Nachrichten verwendet werden. Dazu müssen zuerst die verschlüsselten hexadezimalen Werte in die Komponente {\b Klartext} kopiert werden. Dann müssen folgende Anpassungen vorgenommen werden: (1) Das Eingabeformat in der Komponente {\b Nachrichten-Decodierer} muss auf &quot;Hexadezimal&quot; gesetzt werden; (2) In der {\b Twofish}-Komponente muss die Aktion auf &quot;Entschlüsselung&quot; gesetzt werden; (3) Das Format in der Komponente {\b Nachrichten-Codierer} muss auf Text und die Kodierung auf &quot;ASCII&quot; gesetzt werden."/>
 </replacements>
 <replacements lang="en">
    <replacement key="$Plaintext$" value="Plaintext"/>
    <replacement key="$Ciphertext$" value="Ciphertext"/>
    <replacement key="$Key$" value="Key (Hex values)"/>
    <replacement key="$Message Encoder$" value="Message Encoder"/>
    <replacement key="$Message Decoder$" value="Message Decoder"/>
    <replacement key="$Key Decoder$" value="Key Decoder"/>
    <replacement key="$Decrypted_Ciphertext$" value="Decrypted Ciphertext"/>
    <replacement key="$text$" value="The quick brown fox jumps over the lazy dog."/>
	 <replacement key="$memo$" value="With this template you can use the {\b Twofish}-component to encrypt an arbitrary text entered in the {\b Input message}-component on the left side. The resulting encrypted text is displayed in the {\b Output message}-component on the right side after hitting the Play-button. The {\b Twofish}-component works on binary values, i.e. bytes. Thus, the inputted text is first converted to bytes with the {\b Message decoder}-component. With the current settings, it is interpreted as ASCII. The resulting bytes are then encrypted with {\b Twofish}, yielding another sequence of bytes. These bytes are then simply printed as hexadecimal values with the help of the {\b Message encoder}-component. Note that you can also decrypt messages with this template. To do so, you first copy the encrypted hexadecimal values to the {\b Input message}. Then you have to change the following: (1) Set Input format of the {\b Message decoder} to Hexadecimal; (2) Set Action of {\b Twofish} to Decrypt; (3) Set Format of the {\b Message encoder} to Text and the encoding to ASCII."/>
 </replacements>

</sample>
