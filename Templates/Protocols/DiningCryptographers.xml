<?xml version="1.0" encoding="utf-8"?>
<sample>

  <title lang="en">Dining Cryptographers Protocol</title>
  <summary lang="en">Demonstration of the <i>Dining Cryptographers protocol</i></summary>
  <description lang="en">This template demonstrates the Dining Cryptographers problem. It is used as an example for multi-party computations, where multiple parties provide input for jointly computing the result of a function, while each party keeps its input secret to the other parties. The problem consists of the following setup:<newline /><newline /> Three cryptographers had dinner at a restaurant. The waiter informs them that they don't have to pay, because  the meal has already been paid for anonymously. The cryptographers are curious whether it was one of them or someone else, but, if it was one of them, they want the person to stay anonymous, They follow this protocol to find it out:<newline /><newline /> <b>Step 1:</b> Each cryptographer creates a shared secret consisting of one bit with each of the other 2 cryptographers, for example by secretly flipping a coin between them. So each cryptographer has 2 shared secrets.<newline /><newline /> <b>Step 2:</b> Each cryptographer XORs the two shared secrets he holds. If he was the one who paid, he then inverts the resulting value, otherwise he doesn't.<newline /><newline /> <b>Step 3:</b> All three cryptographers tell their result of the previous step and the three values are XORed. If the result is 'true', it was one of them who has paid. Otherwise, someone else did.<newline /><newline /> The cryptographers can not deduce the input of the other two cryptographers, as each of them only knows 2 of the 3 shared secrets. But by XORing the 3 values in the last step, the unknown secrets cancel out and leave the result.<newline /><newline /> <b>Note:</b> The Dining Cryptographers protocol assumes, that at most one of the cryptographers has paid. If two or three cryptographers have paid, the result gets distorted.
  </description>
  <keywords>dining cryptographers</keywords>

  <title lang="de">Dining Cryptographers-Protokoll</title>
  <summary lang="de">Demonstration des <i>Dining Cryptographers-Protokoll</i></summary>
  <description lang="de">Diese Vorlage demonstriert das Problem der speisenden Kryptographen (engl. &quot;The Dining Cryptographers&quot;). Dieses wird als Beispiel für Mehr-Parteien-Berechnungen (engl. multi-party computations) verwendet, bei dem mehrere Parteien Eingaben für eine gemeinsam zu berechnende Funktion liefern, wobei jede Partei ihre Eingabe vor den anderen Parteien geheim hält. Das Problem kann folgendermassen dargestellt werden:<newline /><newline /> Drei Kryptographen haben zusammen im Restaurant gegessen. Der Ober teilt ihnen mit, dass sie nichts bezahlen müssen, weil schon jemand anonym bezahlt hat. Die Kryptographen sind neugierig und wollen herausfinden, ob es einer von ihnen oder jemand anders war. Aber falls es einer von ihnen war, soll derjenige anonym bleiben können. Sie folgen nun diesem Protokoll, um es herauszufinden:<newline /><newline /> <b>Schritt 1:</b> Jeder Kryptograph generiert mit jedem der beiden anderen ein gemeinsames Geheimnis, bestehend aus einem Bit. Dies kann zum Beispiel durch einen geheimen Münzwurf zwischen den beiden geschehen. Damit hat jeder Kryptograph 2 gemeinsame Geheimnisse.<newline /><newline /> <b>Schritt 2:</b> Jeder Kryptograph verküpft seine beiden Geheimnisse mit XOR. Wenn er derjenige war, der bezahlt hat, so invertiert er das Resultat.<newline /><newline /> <b>Schritt 3:</b> Alle drei Kryptographen teilen das Ergebnis des letzten Schrittes mit und die drei Werte werden wieder mit XOR verknüpft. Wenn das Ergebnis 'wahr' ist, so war es einer von ihnen, der bezahlt hat. Andernfalls war es jemand anderes.<newline /><newline /> Die Kryptographen können daraus keine Rückschlüsse auf die Angaben der beiden anderen ziehen, da jeder nur 2 der 3 gemeinsamen Geheimnisse kennt. Aber durch die XOR-Verknüpfung der 3 Werte im letzten Schritt eliminieren sich die unbekannten Geheimnisse und hinterlassen das korrekte Ergebnis.<newline /><newline /> <b>Hinweis:</b> Das Protokoll der speisenden Kryptographen geht davon aus, dass höchstens einer der Kryptographen bezahlt hat. Haben zwei oder mehr bezahlt, so wird das Ergebnis verfälscht.
  </description>
  <keywords lang="de">dining cryptographers</keywords>

  <icon file="DiningCryptographers.png" />

  <relevantPlugins>
    <plugin name="BooleanOutput" />
  </relevantPlugins>

  <replacements lang="de">
    <replacement key="$Secret$" value="Geheimnis"/>
    <replacement key="$has paid$" value="hat bezahlt"/>
    <replacement key="$Boolean Output$" value="Boolesche Ausgabe"/>
	 <replacement key="$step1$" value="{\b Schritt 1:} Gemeinsame Geheimnisse\line\line Kryptographen A und B teilen das gemeinsame Geheimnis AB, das aus einem Bit besteht (erhalten z.B. durch einen Münzwurf). Kryptograph C kennt das Geheimnis nicht. Nach dem selben Prinzip werden die Geheimnisse BC und CA gebildet."/>
    <replacement key="$step2$" value="{\b Schritt 2:} XOR der Geheimnisse und Inversion, falls bezahlt"/>
    <replacement key="$step3$" value="{\b Schritt 3:} XOR der Ergebnisse"/>
	 <replacement key="$memo1$" value="{\b Die speisenden Kryptographen}\line\line Das Problem der speisenden Kryptographen (engl. &quot;The Dining Cryptographers&quot;) wird als Beispiel für Mehr-Parteien-Berechnungen (engl. multi-party computations) verwendet, bei dem mehrere Parteien Eingaben für eine gemeinsam zu berechnende Funktion liefern, wobei jede Partei ihre Eingabe vor den anderen Parteien geheim hält. Das Problem kann folgendermassen dargestellt werden:\line\line Drei Kryptographen haben zusammen im Restaurant gegessen. Der Ober teilt ihnen mit, dass sie nichts bezahlen müssen, weil schon jemand anonym bezahlt hat. Die Kryptographen sind neugierig und wollen herausfinden, ob es einer von ihnen oder jemand anders war. Aber falls es einer von ihnen war, soll derjenige anonym bleiben können. Sie folgen nun diesem Protokoll, um es herauszufinden:\line\line {\b Schritt 1:} Jeder Kryptograph generiert mit jedem der beiden anderen ein gemeinsames Geheimnis, bestehend aus einem Bit. Dies kann zum Beispiel durch einen geheimen Münzwurf zwischen den beiden geschehen. Damit hat jeder Kryptograph 2 gemeinsame Geheimnisse.\line\line {\b Schritt 2:} Jeder Kryptograph verküpft seine beiden Geheimnisse mit XOR. Wenn er derjenige war, der bezahlt hat, so invertiert er das Resultat.\line\line {\b Schritt 3:} Alle drei Kryptographen teilen das Ergebnis des letzten Schrittes mit und die drei Werte werden wieder mit XOR verknüpft. Wenn das Ergebnis 'wahr' ist, so war es einer von ihnen, der bezahlt hat. Andernfalls war es jemand anderes.\line\line Die Kryptographen können daraus keine Rückschlüsse auf die Angaben der beiden anderen ziehen, da jeder nur 2 der 3 gemeinsamen Geheimnisse kennt. Aber durch die XOR-Verknüpfung der 3 Werte im letzten Schritt eliminieren sich die unbekannten Geheimnisse und hinterlassen das korrekte Ergebnis.\line\line {\b Hinweis:} Das Protokoll der speisenden Kryptographen geht davon aus, dass höchstens einer der Kryptographen bezahlt hat. Haben zwei oder mehr bezahlt, so wird das Ergebnis verfälscht."/>
    <replacement key="$memo2$" value="Hat einer der Kryptographen bezahlt?"/>
  </replacements>
  <replacements lang="en">
    <replacement key="$Secret$" value="Secrect"/>
    <replacement key="$has paid$" value="has paid"/>
    <replacement key="$Boolean Output$" value="Boolean Output"/>
	 <replacement key="$step1$" value="{\b Step 1:} Shared secrets\line\line Cryptographers A and B share the common secret AB, which consists of one bit (for example by a coin flip) between them. Cryptographer C doesn't know its value. The same principle holds for secrets BC and CA."/>
    <replacement key="$step2$" value="{\b Step 2:} XORing the secrets and inverting, if paid"/>
    <replacement key="$step3$" value="{\b Step 3:} XORing the results"/>
	 <replacement key="$memo1$" value="{\b The Dining Cryptographers}\line\line The Dining Cryptographers problem is used as an example for multi-party computations, where multiple parties provide input for jointly computing the result of a function, while each party keeps its input secret to the other parties. The problem consists of the following setup:\line\line Three cryptographers had dinner at a restaurant. The waiter informs them that they don't have to pay, because  the meal has already been paid for anonymously. The cryptographers are curious whether it was one of them or someone else, but, if it was one of them, they want the person to stay anonymous, They follow this protocol to find it out:\line\line {\b Step 1:} Each cryptographer creates a shared secret consisting of one bit with each of the other 2 cryptographers, for example by secretly flipping a coin between them. So each cryptographer has 2 shared secrets.\line\line {\b Step 2:} Each cryptographer XORs the two shared secrets he holds. If he was the one who paid, he then inverts the resulting value, otherwise he doesn't.\line\line {\b Step 3:} All three cryptographers tell their result of the previous step and the three values are XORed. If the result is 'true', it was one of them who has paid. Otherwise, someone else did.\line\line The cryptographers can not deduce the input of the other two cryptographers, as each of them only knows 2 of the 3 shared secrets. But by XORing the 3 values in the last step, the unknown secrets cancel out and leave the result.\line\line {\b Note:} The Dining Cryptographers protocol assumes, that at most one of the cryptographers has paid. If two or three cryptographers have paid, the result gets distorted."/>
    <replacement key="$memo2$" value="Has one of the Cryptographers paid?"/>
  </replacements>

</sample>
