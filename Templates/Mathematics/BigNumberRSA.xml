<?xml version="1.0" encoding="utf-8"?>
<sample>

  <title lang="en">RSA with big numbers</title>
  <summary lang="en">Implementation of <i>RSA</i> using mathematical components</summary>
  <description lang="en">This template shows the implementation of <i>RSA</i> using mathematical components.</description>
  <keywords>precision, arbitrary, bignumber</keywords>

  <title lang="de">RSA mit großen Zahlen</title>
  <summary lang="de">Implementierung von <i>RSA</i> mit mathematischen Komponenten</summary>
  <description lang="de">Diese Vorlage zeigt die Implementierung von <i>RSA</i> mit mathematischen Komponenten.</description>
  <keywords lang="de">beliebige, Präzision, Stellen</keywords>

  <icon file="RSA.png" />

  <replacements lang="de">
    <replacement key="$Message$" value="Nachricht"/>
    <replacement key="$Public exponent$" value="Öffentlicher Exponent"/>
    <replacement key="$Prime number$" value="Primzahl"/>
    <replacement key="$Private key$" value="Privater Schlüssel"/>
    <replacement key="$Ciphertext$" value="Geheimtext"/>
    <replacement key="$Decrypted ciphertext$" value="Entschlüssleter Geheimtext"/>
	 <replacement key="$memo$" value="This sample demonstrates the RSA algorithm -- built up with simple mathematical components.\line\line RSA uses a public exponent {\b e} and a private exponent {\b d}. The exponent {\b e} is part of the public key {\b (e, N)} which can be known to everyone. Messages encrypted with the public key {\b e} can only be decrypted using the private key {\b d}.\line\line To encrypt a message, the cipher c is calculated by {\b c = m^e mod N} where {\b N} is the product of two randomly chosen prime numbers: {\b N = p * q}.\line\line To decrypt a message, the message {\b m} is calculated by {\b m = c^d mod N}.\line\line {\b d} is the multiplicative inverse of {\b e mod \u966?(N)} where {\b \u966?(N) = (p-1)(q-1)}.\line\line To decrypt a stolen message an attacker has to calculate d. As he only knows {\b N} and {\b e}, but not {\b p}, {\b q} or {\b \u966?(N)}, he has to factorize {\b N} and do the key generation again. However, with big {\b N} (size = more than 1024 bits) this takes centuries."/>
  </replacements>
  <replacements lang="en">
    <replacement key="$Message$" value="Message"/>
    <replacement key="$Public exponent$" value="Public exponent"/>
    <replacement key="$Prime number$" value="Prime number"/>
    <replacement key="$Private key$" value="Private key"/>
    <replacement key="$Ciphertext$" value="Ciphertext"/>
    <replacement key="$Decrypted ciphertext$" value="Decrypted ciphertext"/>
	 <replacement key="$memo$" value="This sample demonstrates the RSA algorithm -- built up with simple mathematical components.\line\line RSA uses a public exponent {\b e} and a private exponent {\b d}. The exponent {\b e} is part of the public key {\b (e, N)} which can be known to everyone. Messages encrypted with the public key {\b e} can only be decrypted using the private key {\b d}.\line\line To encrypt a message, the cipher c is calculated by {\b c = m^e mod N} where {\b N} is the product of two randomly chosen prime numbers: {\b N = p * q}.\line\line To decrypt a message, the message {\b m} is calculated by {\b m = c^d mod N}.\line\line {\b d} is the multiplicative inverse of {\b e mod \u966?(N)} where {\b \u966?(N) = (p-1)(q-1)}.\line\line To decrypt a stolen message an attacker has to calculate d. As he only knows {\b N} and {\b e}, but not {\b p}, {\b q} or {\b \u966?(N)}, he has to factorize {\b N} and do the key generation again. However, with big {\b N} (size = more than 1024 bits) this takes centuries."/>
  </replacements>

</sample>
