<?xml version="1.0" encoding="utf-8"?>
<sample>
  <title lang="en">RSA Common Factor Attack</title>
  <title lang="ru">Общая атака фактора на RSA</title>
  <title lang="de">RSA-Angriff auf gemeinsamen Faktor</title>
  
  <summary lang="en">Attack on the <i>RSA</i> algorithm if using modules N with common factors (shared primes)</summary>
  <summary lang="ru">Атака на алгоритм <i>RSA</i>, используемый с общими факторами</summary>
  <summary lang="de">Angriff auf den <i>RSA</i>-Algorithmus, der mit gemeinsamen Faktoren verwendet wird</summary>
  
  <description lang="en">Attack on the <i>RSA</i> algorithm if using modules N with common factors (shared primes)</description>
  <description lang="ru">така на алгоритм <i> RSA</i>, используемый с общими факторами</description>
  <description lang="de">Angriff auf den <i> RSA</i> Algorithmus, der mit gemeinsamen Primfaktoren verwendet wird</description>
  
  <keywords lang="en">RSA, attack, common factor, shared primes</keywords>  
  <keywords lang="de">RSA, Angriff, gemeinsamer Faktor, gemeinsame Primzahl</keywords>
  <keywords lang="ru">RSA, атака, общий коэффициент, общий простой</keywords>
  
  <icon file="RSA.png" />
  <relevantPlugins>
    <plugin name="NumberOperations" />
	<plugin name="PrimesGenerator" />
  </relevantPlugins>
  
    <replacements lang="en">
    <replacement key="$memo$" value="{\b Template to show the common factor attack (aka shared prime)}\line
\line
Given are 2 modules N1 = P*Q  and  N2 = R*Q,  which share one common prime factor Q.\line
You don't know the factors P, Q, and R, but only the two modules (products).\line
\line
Without factoring N1 or N2, you first find the common factor Q, and then by simple division the two other factors P and R.\line
\line
In reality, N1 and N2 are much bigger (e.g. 2^2048 or 10^620). Then, it's much much more obvious, that factorization is slow or even impossible, but calculating the according gcd is really fast.\line
\line
See the CT Book, section 4.11.5.4 about shared primes in RSA modules used in reality.\line" />
  </replacements>  
  
  <replacements lang="de"> 
    <replacement key="$memo$" value="{\b Angriff auf gemeinsamen Primfaktor (aka Shared Prime)}\line
\line
Gegeben sind 2 Module N1 = P * Q und N2 = R * Q, die sich einen gemeinsamen Primfaktor Q teilen.\line
Sie kennen die Faktoren P, Q und R nicht, sondern nur die beiden Module (Produkte).\line
\line
Ohne N1 oder N2 zu faktorisieren finden Sie zuerst den gemeinsamen Faktor Q und dann durch einfache Division die beiden anderen Faktoren P und R.\line
\line
In der Realität sind N1 und N2 viel größer (z. B. 2^2048 oder 10^620). Mit solchen Werten dauert die Faktorisierung sehr lange oder ist sogar unmöglich, aber die Berechnung des entsprechenden ggT (englisch gcd) ist sehr schnell.
\line
\line
Siehe CT-Buch, Abschnitt 4.11.5.4 über gemeinsame Primfaktoren in RSA-Modulen, die in der Realität verwendet wurden." />
  </replacements>
    
  <replacements lang="ru">
    <replacement key="$memo$" value="{\b Общая атака основного фактора (aka Shared Prime)}\line
\line
Даны 2 модуля N1 = P * Q и N2 = R * Q, которые имеют общий простой множитель Q.\line
Вы не знаете факторов P, Q и R, но только два модуля (продукты).\line
\line
Без факторизации N1 или N2 вы сначала найдете общий множитель Q, а затем простым делением других двух факторов P и R.\line
\line
На самом деле N1 и N2 намного больше (например, 2 ^ 2048 или 10 ^ 620). При таких значениях факторизация очень медленная или даже невозможная, но вычисление соответствующего GCD происходит очень быстро.\line
\line
См. Книгу CT, раздел 4.11.5.4, для обычных простых чисел в модулях RSA, используемых в реальности." />    
  </replacements>
</sample>