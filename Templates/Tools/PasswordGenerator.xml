<?xml version="1.0" encoding="utf-8"?>
<sample>

  <title lang="en">Password Generator</title>
  <summary lang="en">This sample demonstrates the generation of a strong password</summary>
  <description lang="en">This sample demonstrates the generation of a strong password.</description>
  <keywords>password</keywords>

  <title lang="de">Passwort-Generator</title>
  <summary lang="de">Benutzung der <i>Passwortstärke</i>-Komponente</summary>
  <description lang="de">Diese Vorlage zeigt die Generierung eines starken Passwortes.</description>
  <keywords lang="de">passwort</keywords>

  <icon file="PasswordStrength.png" />

  <relevantPlugins>
    <plugin name="Comparators" />
    <plugin name="Gate" />
    <plugin name="PasswordStrength" />
    <plugin name="RandomInput" />
    <plugin name="SHA" />
  </relevantPlugins>

  <replacements lang="de">
    <replacement key="$Random Seed$" value="Zufalls-Seed"/>
    <replacement key="$Substring$" value="Teilstring"/>
    <replacement key="$StringEncoder$" value="String-Kodierer"/>
    <replacement key="$StringDecoder$" value="String-Dekodierer"/>
    <replacement key="$Comparator$" value="Vergleicher"/>
    <replacement key="$Password Strength$" value="Passwort-Stärke"/>
    <replacement key="$KeePass Value$" value="KeePass-Wert"/>
    <replacement key="$Minimum KeePass Value$" value="Minimaler KeePass-Wert"/>
    <replacement key="$Generated Password$" value="Generiertes Passwort"/>
	 <replacement key="$memo$" value="This template shows the random generation of a &quot;strong password&quot; with a size of 80bit. (Mention that 80bit is the minimum size we recommend for passwords!)\line\line At first a random seed is generated by random number generator.\line This seed is hashed using a SHA-256 component.\line\line After that, the first 10 bytes of the hash value are tested by the password strength component. If the KeePass strength is greater or equal to 80 the password is shown in the &quot;Generated Password&quot; Textoutput as hex value. Otherwise the too weak password is hashed again by the SHA-256 component. This is done until a &quot;strong&quot; password with at least 80bit KeePass-strength is found.\line\line (Hint: Because of the non-determinism the search may take some time)"/>
  </replacements>
  <replacements lang="en">
    <replacement key="$Random Seed$" value="Random Seed"/>
    <replacement key="$Substring$" value="Substring"/>
    <replacement key="$StringEncoder$" value="String Encoder"/>
    <replacement key="$StringDecoder$" value="String Decoder"/>
    <replacement key="$Comparator$" value="Comparator"/>
    <replacement key="$Password Strength$" value="Password Strength"/>
    <replacement key="$KeePass Value$" value="KeePass Value"/>
    <replacement key="$Minimum KeePass Value$" value="Minimum KeePass Value"/>
    <replacement key="$Generated Password$" value="Generated Password"/>
	 <replacement key="$memo$" value="This template shows the random generation of a &quot;strong password&quot; with a size of 80bit. (Mention that 80bit is the minimum size we recommend for passwords!)\line\line At first a random seed is generated by random number generator.\line This seed is hashed using a SHA-256 component.\line\line After that, the first 10 bytes of the hash value are tested by the password strength component. If the KeePass strength is greater or equal to 80 the password is shown in the &quot;Generated Password&quot; Textoutput as hex value. Otherwise the too weak password is hashed again by the SHA-256 component. This is done until a &quot;strong&quot; password with at least 80bit KeePass-strength is found.\line\line (Hint: Because of the non-determinism the search may take some time)"/>
  </replacements>

</sample>
