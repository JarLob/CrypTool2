//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30128.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PKCS1.OnlineHelp.HelpFiles {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Help {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Help() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("PKCS1.OnlineHelp.HelpFiles.Help", typeof(Help).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt;Bleichenbacher Signatur generieren&lt;/h2&gt;
        ///In diesem Tab wird eine gefälschte Signatur generiert, welche in ver- und entschlüsselter Form dargestellt wird. 
        ///Die Signatur, welche von fehlerhaften Implementierungen als valide erkannt wird, hat folgende Struktur: 
        ///&apos;00&apos; &apos;01&apos; PS &apos;00&apos; HI HW GG. &lt;/br&gt;
        ///Im Einzelnen bedeutet dies:
        ///&lt;ul&gt;
        ///&lt;li&gt;
        ///&lt;strong&gt;&apos;00&apos;&lt;/strong&gt; 
        ///Einleitender Nullblock (8 Bit). Dadurch wird gewährleistet dass der numerische Wert der Signatur kleiner ist als das 
        ///&lt;a href=&quot;help://KeyGen_Modu [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Gen_Bleichenb_Sig_Tab {
            get {
                return ResourceManager.GetString("Gen_Bleichenb_Sig_Tab", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt;Datenblock generieren&lt;/h2&gt;
        ///In diesem Tab kann der Datenblock einer Signatur generiert werden. Der Datenblock besteht aus den zwei Teilen &quot;Hashfunction-Identifier&quot; und &quot;Hashwert&quot;.
        ///&lt;ul&gt;
        ///&lt;li&gt;
        ///&lt;strong&gt;Hashfunction-Identifier&lt;br /&gt;&lt;/strong&gt;
        ///Der Hashfunction-Identifier ist ein ASN.1 codierter Datenblock der unter anderem Information wie z.B. den Namen der verwendeten Hashfunktion (Algorithmidentifier), die Länge des gesamten Datenblocks, und die Länge des Hashwertes beinhaltet.&lt;/br&gt;
        ///Die Länge und der We [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Gen_Datablock_Tab {
            get {
                return ResourceManager.GetString("Gen_Datablock_Tab", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt;Kuehn Signatur generieren&lt;/h2&gt;
        ///Ihre Wahl der Methode zur Faktorisierung  bestimmt die Laufzeit und den Resourcenverbrauch der Faktorisierung. 
        ///&lt;ul&gt;
        ///&lt;li&gt;
        ///&lt;strong&gt;Probedivision&lt;br /&gt;&lt;/strong&gt;
        ///Die Probedivision ist das Verfahren mit der größen Laufzeit. Es benötig sehr viel Arbeitsspeicher und Prozessorzeit.
        ///Sollte nach 100.000 Versuchen kein Faktor gefunden werden, wird das Verfahren automatisch beendet.
        ///&lt;/li&gt;
        ///&lt;/ul&gt;
        ///.
        /// </summary>
        internal static string Gen_Kuehn_Sig_Tab {
            get {
                return ResourceManager.GetString("Gen_Kuehn_Sig_Tab", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt;Signatur generieren&lt;/h2&gt;
        ///In diesem Tab wird die komplette PKCS #1-Signatur erstellt. Die Signatur hat folgende Struktur: &apos;00&apos; &apos;01&apos; PS &apos;00&apos; HI HW. &lt;/br&gt;
        ///Im Einzelnen bedeutet dies:
        ///&lt;ul&gt;
        ///&lt;li&gt;
        ///&lt;strong&gt;&apos;00&apos;&lt;/strong&gt; 
        ///Einleitender Nullblock (8 Bit). Dadurch wird gewährleistet dass der numerische Wert der Signatur kleiner ist als das 
        ///&lt;a href=&quot;help://KeyGen_ModulusSize&quot;&gt;RSA-Modul.&lt;/a&gt;
        ///&lt;/li&gt;
        ///&lt;li&gt;
        ///&lt;strong&gt;&apos;01&apos;&lt;/strong&gt;
        ///Block Type. Dieser Block gibt an ob es sich um eine Verschlüsselung mit dem privat [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Gen_PKCS1_Sig_Tab {
            get {
                return ResourceManager.GetString("Gen_PKCS1_Sig_Tab", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt;RSA-Schlüsselgenerierung&lt;/h2&gt;
        ///Um PKCS #1-Signaturen generieren und validieren zu können ist ein RSA-Schlüsselpaar notwendig. Dieses besteht aus einem privaten und einem öffentlichen Schlüssel, sowie einem sog. RSA-Modul welches bei Beiden Schlüsseln gleich ist.&lt;/br&gt;
        ///Da für die hier dargestellten Angriffe auf die PKCS #1-Signaturen der Wert des öffentlichen Schlüssels und die Länge des Moduls (in Bit) wichtig sind, können hier diese Parameter eingegeben werden. Der öffentliche Schlüssel, sowie das Modu [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string KeyGen {
            get {
                return ResourceManager.GetString("KeyGen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt;RSA-Modul&lt;/h2&gt;
        ///Das Modul ist Bestandteil eines RSA-Schlüsselpaares und in dem öffentlichen und privaten Schlüssel gleich. &lt;/br&gt;
        ///
        ///Da für die Angriffe auf die PKCS #1-Signaturen nicht der Wert, sondern nur die Länge in Bit nötig ist, kann hier die Länge angegeben werden und es wird ein Modul erzeugt.
        ///In dem Bleichenbacher Angriff wurde von einer Bitlänge des Moduls von 3072 ausgegangen. Bei den Angriffen mit kürzeren Schlüsseln kann hier die Schlüssellänge reduziert werden.
        ///.
        /// </summary>
        internal static string KeyGen_ModulusSize {
            get {
                return ResourceManager.GetString("KeyGen_ModulusSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt;RSA öffentlicher Schlüssel&lt;/h2&gt;
        ///Der öffentliche Schlüssel (public Key) des RSA-Schlüsselpaares wird genutzt, um die mit dem privaten Schlüssel 
        ///verschlüsselten, Signaturen zu entschlüsseln. Aus Performance Gründen wird gewöhnlich ein Schlüssel mit einem geringen
        ///Hamming-Gewicht genutzt (z.B. 3, 17 oder 65537). Voraussetzung für den Bleichenbacher Angriff ist, dass der 
        ///öffentliche Schlüssel drei ist.
        ///
        ///.
        /// </summary>
        internal static string KeyGen_PubExponent {
            get {
                return ResourceManager.GetString("KeyGen_PubExponent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt;PKCS #1-Signaturgenerierung&lt;/h2&gt;
        ///&lt;strong&gt;Um PKCS#1 Signaturen erzeugen zu können muss zuerst ein RSA-Schlüsselpaar, in der entsprechenden Maske,
        /// generiert werden&lt;/strong&gt;&lt;/br&gt;
        /// &lt;strong&gt;Es muss zuerst der Datenblock generiert werden, bevor die komplette Signatur generiert werden kann!&lt;/strong&gt;
        /// &lt;/br&gt;&lt;/br&gt;
        ///Die PKCS #1-Signaturen basieren auf dem asymetrischen Verschlüsselungsalgorithmus RSA. Daher ist es notwendig einen
        ///RSA-Schlüssel zu generieren.&lt;/br&gt;
        ///Um eine PKCS#1-Signatur zu generieren wird z [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SigGen {
            get {
                return ResourceManager.GetString("SigGen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt;Bleichenbacher Angriff&lt;/h2&gt;
        ///&lt;strong&gt;Um den Bleichenbacher Angriff durchführen zu können, muss zuerst ein RSA-Schlüsselpaar, 
        ///in der entsprechenden Maske, generiert werden&lt;/strong&gt;&lt;/br&gt;
        /// &lt;strong&gt;Es muss zuerst der Datenblock generiert werden, bevor die komplette Signatur generiert werden kann!&lt;/strong&gt;
        /// &lt;/br&gt;&lt;/br&gt;
        /// Um eine gefälschte Signatur zu generieren wird zunächste der &lt;a href=&quot;help://Gen_Datablock_Tab&quot;&gt;Datenblock&lt;/a&gt; wie in
        /// einer regulären PKCS#1-Signatur generiert. Allerdings unterscheidet [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SigGenFakeBleichenbacher {
            get {
                return ResourceManager.GetString("SigGenFakeBleichenbacher", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt;Kühn&lt;/h2&gt;
        ///Ihre Wahl der Methode zur Faktorisierung  bestimmt die Laufzeit und den Resourcenverbrauch der Faktorisierung. 
        ///&lt;ul&gt;
        ///&lt;li&gt;
        ///&lt;strong&gt;Probedivision&lt;br /&gt;&lt;/strong&gt;
        ///Die Probedivision ist das Verfahren mit der größen Laufzeit. Es benötig sehr viel Arbeitsspeicher und Prozessorzeit.
        ///Sollte nach 100.000 Versuchen kein Faktor gefunden werden, wird das Verfahren automatisch beendet.
        ///&lt;/li&gt;
        ///&lt;/ul&gt;
        ///.
        /// </summary>
        internal static string SigGenFakeKuehn {
            get {
                return ResourceManager.GetString("SigGenFakeKuehn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt;Signaturvalidierung&lt;/h2&gt;
        ///Zur Validierung von PKCS #1-Signaturen werden diese Signaturen zunächst mit dem öffentlichen Schlüssel entschlüsselt.
        ///Die entschlüsselte Signatur sollte eine Struktur wie &lt;a href=&quot;help://Gen_PKCS1_Sig_Tab&quot;&gt;hier&lt;/a&gt; beschrieben, aufweisen.
        ///Bei der Validierung wird als nächster Schritt der &lt;a href=&quot;help://Gen_Datablock_Tab&quot;&gt;Datenblock&lt;/a&gt; ausgelesen.&lt;/br&gt;
        ///Dieses extrahieren des Datenblock kann auf eine korrekte oder fehlerhafte Art und Weise geschehen. Die fehlerhafte
        ///Impleme [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SigVal {
            get {
                return ResourceManager.GetString("SigVal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot;&gt;
        ///&lt;html&gt;
        ///	&lt;head&gt;
        ///		&lt;title&gt;&lt;/title&gt;
        ///		&lt;style type=&quot;text/css&quot;&gt;
        ///		  body
        ///		  {
        ///		  	font-family:Arial,Verdana,Georgia;
        ///		  	font-size:smaller;
        ///		  }
        ///		&lt;/style&gt;
        ///	&lt;/head&gt;
        ///	&lt;body&gt;
        ///	&lt;h2&gt;PKCS#1 Signaturen / Bleichenbacher Angriff&lt;/h2&gt;
        ///	&lt;p align=&quot;justify&quot;&gt;
        ///	PKCS#1 Signaturen basieren auf dem RSA Verschlüsselungsverfahren. Der Angriff von Daniel Bleichenbacher zielt nicht
        ///	auf das Verschlüsselungsverfahren selbst, sondern auf Implementierung [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Start {
            get {
                return ResourceManager.GetString("Start", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt;PKCS #1 / Bleichenbacher Angriff - Hilfe&lt;/h2&gt;
        ///Willkommen in der Hilfe des PKCS#1 / Bleichenbacher Angriff Plugins.&lt;/br&gt;
        ///Hier finden Sie detaillierte Informationen zu PKCS#1 Signaturen und dem Bleichenbacher Angriff.&lt;/br&gt;&lt;/br&gt;
        ///In die verschiedenen Masken dieses Plugins gelangen Sie indem Sie die Navigation auf der linken Seite nutzen. In den verschiedenen Masken
        ///wiederum finden Sie mehrere Hilfebuttons. Wenn Sie auf diese klicken, bekommen Sie detailierte Informationen über das jeweilige Thema.
        ///.
        /// </summary>
        internal static string StartControl {
            get {
                return ResourceManager.GetString("StartControl", resourceCulture);
            }
        }
    }
}
