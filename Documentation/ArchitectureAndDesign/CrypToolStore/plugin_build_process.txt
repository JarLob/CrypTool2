Plugin Build Process
------------------------------------------------------------------------

-1) Check for sources in state "UPLOADED"

Foreach Source found:

During the build, the source goes to state BUILDING to avoid the build of the same source twice at the same time

Start "Plugin Build Process" (Thread)

 0) Worker sets source to building state

 1) Worker creates folder for plugin (e.g. Build\Plugin-1-1, = Plugin-PluginId-SourceId)

 2) Worker creates folder structure in plugin folder
 --> \plugin contains source
 --> \build_output contains builded plugins
 --> build_plugin.xmlcontains msbuild script

 note: Also makes references to
 --> signing certificate
 --> custom build tasks
 --> ct2 libraries (CrypCore.dll and CrypPluginBase.dll)

 3) Worker downloads zip file
 4) Worker extracts zip file

 5) Worker searches for exactly one csproj file in the root folder, i.e. "plugin"
 --> if it finds 0 or more than 1, the build Worker fails at this point

 6) Worker modifies csproj file
 --> changes references to CrypPluginBase to correct path (hint: dont forget <private>false</private>)
 --> changes output folder of "Release" target to "build_output" folder

 7) Worker modifies msbuild script
 --> change name of target project to name of csproj file found in "plugin" folder

 8) Worker starts "msbuild.exe" (hint: set correct password for signtool to allow it opening signing certificate)
 --> msbuild compiles the plugin
 --> signtool is also started and signs the builded assembly file

 9) Worker checks, if assembly file exists in "build_output" (if not => ERROR)

 10) Create meta file containing meta information

 11) Worker zips everything located in "build_output" -- this also includes "de/ru" etc subfolders of the plugin
 --> zip name is "Assembly-1-1.zip, = Assembly-PluginId-SourceId")

 12) Worker uploads assembly zip file to CrypToolStore Server, and also updates source data in database

 13) Worker cleans up by deleting build folder (also in case of an error)
            
 14) Set state of source in database to BUILDED or ERROR
     also put build_log in database

if the build process reaches this point, we have no build error and everything is fine

General:

In case of an error at any build step, the source goes to state ERROR
In case of no error at all, the source goes to state SUCCESS
In both cases, the complete build log (i.e. the std out of msbuild, as well as the complete log of the worker) is uploaded to the database