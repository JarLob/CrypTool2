<FlowDocument PagePadding="5,0,5,0" AllowDrop="True" NumberSubstitution.CultureSource="User" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"><Paragraph><Run FontWeight="Bold" FontSize="14.6666666666667" xml:lang="de-de"><Run.TextDecorations><TextDecoration Location="Underline" /></Run.TextDecorations>Transposition</Run></Paragraph><Paragraph><Run FontSize="10.6666666666667">In a columnar transposition, the message is written out in rows of a fixed length, and then read out again column by column, and the columns are chosen in some scrambled order. Both the width of the rows and the permutation of the columns are usually defined by a keyword. For example, the word ZEBRAS is of length 6 (so the rows are of length 6), and the permutation is defined by the alphabetical order of the letters in the keyword. In this case, the order would be "</Run><Run FontWeight="Bold" FontSize="10.6666666666667">6 3 2 4 1 5</Run><Run FontSize="10.6666666666667">".</Run></Paragraph><Paragraph><Run FontSize="10.6666666666667" xml:space="preserve" /></Paragraph><Paragraph><Run FontSize="10.6666666666667">In a regular columnar transposition cipher, any spare spaces are filled with nulls; in an irregular columnar transposition cipher, the spaces are left blank. Finally, the message is read off in columns, in the order specified by the keyword. For example, suppose we use the keyword ZEBRAS and the message WE ARE DISCOVERED. FLEE AT ONCE. In a regular columnar transposition, we write this into the grid as:</Run></Paragraph><Paragraph><Run FontSize="10.6666666666667" xml:space="preserve" /></Paragraph><Paragraph><Run FontWeight="Bold" FontSize="10.6666666666667"><Run.TextDecorations><TextDecoration Location="Underline" /></Run.TextDecorations>6 3 2 4 1 5</Run></Paragraph><Paragraph><Run FontWeight="Bold" FontSize="10.6666666666667" xml:space="preserve">W E A R E D </Run></Paragraph><Paragraph><Run FontWeight="Bold" FontSize="10.6666666666667" xml:space="preserve">I S C O V E </Run></Paragraph><Paragraph><Run FontWeight="Bold" FontSize="10.6666666666667" xml:space="preserve">R E D F L E </Run></Paragraph><Paragraph><Run FontWeight="Bold" FontSize="10.6666666666667" xml:space="preserve">E A T O N C </Run></Paragraph><Paragraph><Run FontWeight="Bold" FontSize="10.6666666666667" xml:space="preserve">E Q K J E U </Run></Paragraph><Paragraph><Run FontSize="10.6666666666667" xml:space="preserve" /></Paragraph><Paragraph><Run FontSize="10.6666666666667">Providing five nulls (</Run><Run FontSize="10.6666666666667"><Run.TextDecorations><TextDecoration Location="Underline" /></Run.TextDecorations>QKJEU</Run><Run FontSize="10.6666666666667">) at the end. The ciphertext is then read off as:</Run></Paragraph><Paragraph><Run FontSize="10.6666666666667" xml:space="preserve" /></Paragraph><Paragraph><Run FontWeight="Bold" FontSize="10.6666666666667">EVLNE ACDTK ESEAQ ROFOJ DEECU WIREE</Run></Paragraph><Paragraph><Run FontSize="10.6666666666667" xml:space="preserve" /></Paragraph><Paragraph><Run FontSize="10.6666666666667">In the irregular case, the columns are not completed by nulls:</Run></Paragraph><Paragraph><Run FontSize="10.6666666666667" xml:space="preserve" /></Paragraph><Paragraph><Run FontWeight="Bold" FontSize="10.6666666666667"><Run.TextDecorations><TextDecoration Location="Underline" /></Run.TextDecorations>6 3 2 4 1 5</Run></Paragraph><Paragraph><Run FontWeight="Bold" FontSize="10.6666666666667" xml:space="preserve">W E A R E D </Run></Paragraph><Paragraph><Run FontWeight="Bold" FontSize="10.6666666666667" xml:space="preserve">I S C O V E </Run></Paragraph><Paragraph><Run FontWeight="Bold" FontSize="10.6666666666667" xml:space="preserve">R E D F L E </Run></Paragraph><Paragraph><Run FontWeight="Bold" FontSize="10.6666666666667" xml:space="preserve">E A T O N C </Run></Paragraph><Paragraph><Run FontWeight="Bold" FontSize="10.6666666666667" xml:space="preserve">E </Run></Paragraph><Paragraph><Run FontSize="10.6666666666667" xml:space="preserve" /></Paragraph><Paragraph><Run FontSize="10.6666666666667">This results in the following ciphertext:</Run></Paragraph><Paragraph><Run FontSize="10.6666666666667" xml:space="preserve" /></Paragraph><Paragraph><Run FontWeight="Bold" FontSize="10.6666666666667">EVLNA CDTES EAROF ODEEC WIREE</Run></Paragraph><Paragraph><Run FontSize="10.6666666666667" xml:space="preserve" /></Paragraph><Paragraph><Run FontSize="10.6666666666667">To decipher it, the recipient has to work out the column lengths by dividing the message length by the key length. Then he can write the message out in columns again, then re-order the columns by reforming the key word.</Run></Paragraph><Paragraph><Run FontSize="10.6666666666667" xml:space="preserve" /></Paragraph><Paragraph><Run FontSize="10.6666666666667">Columnar transposition continued to be used for serious purposes as a component of more complex ciphers at least into the 1950's.</Run></Paragraph><Paragraph><Run FontSize="10.6666666666667" xml:space="preserve" /></Paragraph><Paragraph><Run FontStyle="Italic" FontSize="10.6666666666667" xml:lang="de-de" xml:space="preserve">In Case of Combining two Transposition Plug-Ins: </Run></Paragraph><Paragraph><Run FontWeight="Bold" FontSize="10.6666666666667">Double transposition</Run><Run FontWeight="Bold" FontSize="10.6666666666667" xml:lang="de-de" xml:space="preserve"> </Run></Paragraph><Paragraph><Run FontSize="10.6666666666667" xml:space="preserve" /></Paragraph><Paragraph><Run FontSize="10.6666666666667">A single columnar transposition could be attacked by guessing possible column lengths, writing the message out in its columns (but in the wrong order, as the key is not yet known), and then looking for possible anagrams. Thus to make it stronger, a double transposition was often used. This is simply a columnar transposition applied twice. The same key can be used for both transpositions, or two different keys can be used.</Run></Paragraph><Paragraph><Run FontSize="10.6666666666667" xml:space="preserve" /></Paragraph><Paragraph><Run FontSize="10.6666666666667">As an example, we can take the result of the irregular columnar transposition in the previous section, and perform a second encryption with a different keyword, STRIPE, which gives the permutation "</Run><Run FontWeight="Bold" FontSize="10.6666666666667">564231</Run><Run FontSize="10.6666666666667">":</Run></Paragraph><Paragraph><Run FontSize="10.6666666666667" xml:space="preserve" /></Paragraph><Paragraph><Run FontWeight="Bold" FontSize="10.6666666666667" xml:space="preserve"><Run.TextDecorations><TextDecoration Location="Underline" /></Run.TextDecorations>5 6 4 2 3 1 </Run></Paragraph><Paragraph><Run FontWeight="Bold" FontSize="10.6666666666667">E V L N A C</Run></Paragraph><Paragraph><Run FontWeight="Bold" FontSize="10.6666666666667">D T E S E A</Run></Paragraph><Paragraph><Run FontWeight="Bold" FontSize="10.6666666666667">R O F O D E</Run></Paragraph><Paragraph><Run FontWeight="Bold" FontSize="10.6666666666667">E C W I R E</Run></Paragraph><Paragraph><Run FontWeight="Bold" FontSize="10.6666666666667">E</Run></Paragraph><Paragraph><Run FontSize="10.6666666666667" xml:space="preserve" /></Paragraph><Paragraph><Run FontSize="10.6666666666667" xml:space="preserve">As before, this is read off </Run><Run FontSize="10.6666666666667"><Run.TextDecorations><TextDecoration Location="Underline" /></Run.TextDecorations>columnwise</Run><Run FontSize="10.6666666666667" xml:space="preserve"> to give the ciphertext:</Run></Paragraph><Paragraph><Run FontSize="10.6666666666667" xml:space="preserve" /></Paragraph><Paragraph><Run FontWeight="Bold" FontSize="10.6666666666667">CAEEN SOIAE DRLEF WEDRE EVTOC</Run></Paragraph><Paragraph><Run FontSize="10.6666666666667" xml:space="preserve" /></Paragraph><Paragraph><Run FontSize="10.6666666666667" xml:space="preserve" /></Paragraph><Paragraph><Run FontSize="10.6666666666667" xml:lang="de-de" xml:space="preserve">source: </Run></Paragraph><Paragraph><Run FontSize="10.6666666666667" xml:lang="de-de">http://en.wikipedia.org/wiki/Transposition_cipher#Columnar_transposition</Run></Paragraph><Paragraph><Run FontSize="10.6666666666667" xml:space="preserve" /></Paragraph></FlowDocument>