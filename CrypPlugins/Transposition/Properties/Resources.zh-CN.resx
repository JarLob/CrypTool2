<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PluginCaption" xml:space="preserve">
    <value>换位</value>
  </data>
  <data name="PluginTooltip" xml:space="preserve">
    <value>换位密码</value>
  </data>
  <data name="InputCaption" xml:space="preserve">
    <value>输入值</value>
  </data>
  <data name="InputTooltip" xml:space="preserve">
    <value>要加密的文本。</value>
  </data>
  <data name="KeywordCaption" xml:space="preserve">
    <value>关键词</value>
  </data>
  <data name="KeywordTooltip" xml:space="preserve">
    <value>用于加密的关键字</value>
  </data>
  <data name="OutputCaption" xml:space="preserve">
    <value>输出量</value>
  </data>
  <data name="OutputTooltip" xml:space="preserve">
    <value>输出量</value>
  </data>
  <data name="ControlSlaveCaption" xml:space="preserve">
    <value>换位从属</value>
  </data>
  <data name="ControlSlaveTooltip" xml:space="preserve">
    <value>换位从属</value>
  </data>
  <data name="ActionCaption" xml:space="preserve">
    <value>行动</value>
  </data>
  <data name="ActionTooltip" xml:space="preserve">
    <value>选择算法动作</value>
  </data>
  <data name="NumberCaption" xml:space="preserve">
    <value>数字表示方式</value>
  </data>
  <data name="NumberTooltip" xml:space="preserve">
    <value>选择代表方式</value>
  </data>
  <data name="PermutationCaption" xml:space="preserve">
    <value>排列</value>
  </data>
  <data name="PermutationTooltip" xml:space="preserve">
    <value>选择排列类型</value>
  </data>
  <data name="PresentationSpeedCaption" xml:space="preserve">
    <value>演示速度</value>
  </data>
  <data name="PresentationSpeedTooltip" xml:space="preserve">
    <value>改变演讲的节奏</value>
  </data>
  <data name="ReadInCaption" xml:space="preserve">
    <value>读入</value>
  </data>
  <data name="ReadInTooltip" xml:space="preserve">
    <value>选择读入模式</value>
  </data>
  <data name="ReadOutCaption" xml:space="preserve">
    <value>读出</value>
  </data>
  <data name="ReadOutTooltip" xml:space="preserve">
    <value>选择读出类型</value>
  </data>
  <data name="ActionList1" xml:space="preserve">
    <value>加密</value>
  </data>
  <data name="ActionList2" xml:space="preserve">
    <value>解密</value>
  </data>
  <data name="NumberList1" xml:space="preserve">
    <value>字符</value>
  </data>
  <data name="NumberList2" xml:space="preserve">
    <value>字符代码</value>
  </data>
  <data name="PermutationList1" xml:space="preserve">
    <value>按行</value>
  </data>
  <data name="PermutationList2" xml:space="preserve">
    <value>按列</value>
  </data>
  <data name="ReadInList1" xml:space="preserve">
    <value>按行</value>
  </data>
  <data name="ReadInList2" xml:space="preserve">
    <value>按列</value>
  </data>
  <data name="ReadOutList1" xml:space="preserve">
    <value>按行</value>
  </data>
  <data name="ReadOutList2" xml:space="preserve">
    <value>按列</value>
  </data>
  <data name="Presentation" xml:space="preserve">
    <value>介绍</value>
  </data>
  <data name="accomplished" xml:space="preserve">
    <value>完成的</value>
  </data>
  <data name="permuting_by_column" xml:space="preserve">
    <value>按列排列</value>
  </data>
  <data name="permuting_by_row" xml:space="preserve">
    <value>按行排列</value>
  </data>
  <data name="reading_in_by_column" xml:space="preserve">
    <value>按栏阅读</value>
  </data>
  <data name="reading_in_by_row" xml:space="preserve">
    <value>逐行阅读</value>
  </data>
  <data name="reading_out_by_column" xml:space="preserve">
    <value>按列读出</value>
  </data>
  <data name="reading_out_by_row" xml:space="preserve">
    <value>逐行阅读</value>
  </data>
  <data name="PresentationGroup" xml:space="preserve">
    <value>介绍</value>
  </data>
  <data name="ModeList1" xml:space="preserve">
    <value>按字节</value>
  </data>
  <data name="ModeList2" xml:space="preserve">
    <value>按字符</value>
  </data>
  <data name="NumberModeCaption" xml:space="preserve">
    <value>处理类型</value>
  </data>
</root>