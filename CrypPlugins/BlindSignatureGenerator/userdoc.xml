<?xml version="1.0" encoding="utf-8"?>
<!-- You can edit this file manually or with the Util/CrypDocumentationEditor -->
<documentation>
  <language culture="en" />
  <language culture="zh-CN" />
  <language culture="de-DE" />
  <introduction lang="en">
    <section headline="Blind Signatures">
      Blind Signatures are a subtype of digital signatures. Their defining hallmark is, that the signature is not being created by the creator of the message to be signed,
      but an independent third party which will be unable to see the content of what it is signing.
      <newline /><newline />
      Blind Signatures were proposed in 1982 by David Chaum. The initial idea was that, in order to create specific digital services,
      which should allow some degree of anonymity, a third party would sign a message without being able to read its contents. Therefore a digital signature is no longer a
      statement about the content and integrity of a message but a proof that at some point of time the message was approved of by the institution. The field of use was intended to be digital financial
      transactions and electronic voting systems. Both of which should allow some degree of anonymity for its users.
      Sadly, despite being able to erase any flaws and possible points of attack on this system, the idea never caught on. Chaums own company for online financial transactions went bankrupt due to
      a lack of customers and acceptance in the industry. Until today blind signatures remain an interesting topic for research but have not been successfully realized and accepted for common use.
    </section>
  </introduction>
  <introduction lang="zh-CN">盲签名是数字签名的子类型。它们的标志是，签名不是由要签名的消息的创建者创建的，而是一个独立的第三方，该第三方将无法查看其签名内容。盲签名由David Chaum在1982年提出。最初的想法是，为了创建特定的数字服务（应允许一定程度的匿名性），第三方将签署一条消息而无法阅读其内容。因此，数字签名不再是关于消息的内容和完整性的声明，而是在某个时间点该消息已被机构批准的证明。使用领域旨在成为数字金融交易和电子投票系统。两者都应为其用户提供一定程度的匿名性。遗憾的是，尽管能够消除该系统上的任何缺陷和可能的攻击点，但这个想法从未得到普及。由于缺乏客户和行业认可，Chaums自己的在线金融交易公司破产了。直到今天，盲签名仍然是研究中一个有趣的话题，但尚未成功实现并被普遍接受。</introduction>
  <introduction lang="de-DE">
    <section headline="Blinde Signaturen">
      Blinde Signaturen sind eine Unterart von digitalen Signaturen. Ihre definierende Charakteristik ist, dass die Signatur nicht vom Ersteller der zu signierenden Nachricht erstellt wird, sondern
      von einer unabhängigen Dritt-Partei, welche den Inhalt dessen was signiert wird nicht sehen kann.
      <newline /><newline />
      Blinde Signaturen wurden 1982 von David Chaum vorgeschlagen. Die anfängliche Idee war, um spezifische digitale Dienste zu erschaffen, welche ein gewisses Maß an Anonymität bieten sollten, dass
      eine Dritt-Patei eine Nachricht signiert ohne den Inhalt lesen zu können. Dadurch ist eine digitale Signatur nicht länger eine Aussage, über den Inhalt und die Integrität einer Nachricht,
      sondern dass zu einem bestimmten Zeitpunkt die Nachricht durch eine Institution bestätigt wurde. Das Anwendungsfeld war für digitale Finanztransaktionen und elektronische Wahlsysteme vorgesehen.
      Beide dieser Felder sollten Nutzern ein gewisses Maß an Anonymität gewähren.
      Traurigerweise, trotzdessen dass jegliche möglichen Angriffswege beseitigt werden können, konnte die Idee sich nicht durchsetzen. Chaums eigenes Unternehmen für online Finanztransaktionen ging
      bankrott, aufgrund eines Mangels an Kunden und Akzeptanz in der Industrie. 
      Bis heute bleiben blinde Signaturen ein interessantes Thema für die Forschung, jedoch bislang ohne erfolgreich realisiert und für den allgemeinen Gebrauch angenommen zu werden.
    </section>
  </introduction>
  <usage lang="en">
    <section headline="Blind Signature Generator">
      The Blind Signature Generator is a CrypTool 2 plugin, which allows the creation of blind signatures with different hash- and signing-algorithms being offered for usage.
      <newline /><newline />
      Settings:
      <enum><item> Hash algorithm: this setting option allows you to choose freely between several hash algorithms, with which your message will be hashed and the hash blindly signed.</item><item> Signing algorithm: this setting option allows you to choose freely between several signing algorithms, with which your signature will be generated. 
          Remember to de-crypt the signature for verifying with the same algorithm you choose here.</item><item> Blind Signing Security Level: this setting option allows you to choose what level of security you whish against blind signing attacks. For this setting to have any effect it is nessecary to use both Message Inputs (both the "public" one and the regular one).</item></enum><newline />
      Input:
      <enum><item> Message M: Please input your message here.</item><item> Public Message M: Please input your publicly visible message here.</item><item> Modulo N: Please input the public Modulo N of the keys generated for your chosen signing Algorithm here.</item><item> Public Key E/G: Please input the public key E (exponent) or G of the keys generated for your chosen signing Algorithm here.</item><item> Private Key D/Lambda: Please input the private Key D/Lambda of the keys generated for your chosen signing Algorithm here.</item></enum><newline />
      Output:
      <enum><item> Blind Signature: The blind signature generated by the plugin will be emitted here in form of a byte array.</item><item> Blind Signature as a number: The blind signature generated by the plugin will be emitted here in form of a BigInteger number.</item><item> Blind Signature for Paillier: The two blind signatures generated by the plugin for the Paillier signing algorithm will be emitted here in form of a BigInteger array which holds the signatures as a BigInteger number.</item><item> Debug: The results of the important calculations will displayed here as a string for debugging purposes.</item></enum></section>
    <section headline="Blind Signature Verifier">
      The Blind Signature Verifier is a CrypTool 2 plugin, which allows the verification of blind signatures with different signing-algorithms being offered for usage.
      <newline /><newline />
      Settings:
      <enum><item>
          Signing algorithm: this setting option allows you to choose freely between several signing algorithms, with which your signature will be verified.
        </item></enum><newline />
      Input:
      <enum><item> Modulo N: Please input the public Modulo N of the keys generated for your chosen signing Algorithm here.</item><item> Public Key E/G: Please input the public key E (exponent) or G of the keys generated for your chosen signing Algorithm here.</item><item> Blind Signature: please input the previously generated Blind Signature here</item><item> Blind Signature as a number:: please input the previously generated Blind Signature  here as a number</item><item> Blind Signature for Paillier: please input the previously generated Blind Signature for Paillier here</item></enum><newline />
      Output:
      <enum><item> Decrypted Blind Signature: The decrypted blind signature will be emitted here in form of a byte array.</item><item> DecryptedBlind Signature as a number: The decrypted blind signature will be emitted here in form of a BigInteger number.</item></enum></section>
  </usage>
  <usage lang="zh-CN">Blind Signature Generator是一个CrypTool 2插件，它允许创建具有不同哈希和签名算法供使用的盲签名。设置：散列算法：此设置选项使您可以在几种散列算法之间自由选择，通过这些散列算法，您的消息将被散列，并且哈希被盲目签名。签名算法：此设置选项使您可以在几种签名算法之间自由选择，并使用这些算法生成签名。请记住要解密签名，以使用您在此处选择的相同算法进行验证。盲签名安全级别：此设置选项使您可以选择针对盲签名攻击的安全级别。为使此设置有效，必须同时使用两个消息输入（“公共”输入和常规输入）。输入：消息M：请在此处输入您的消息。公开消息M：请在此处输入您公开可见的消息。模数N：请在此处输入为您选择的签名算法生成的密钥的公共模数N。公钥E / G：请在此处输入为您选择的签名算法生成的公钥E（指数）或G。私钥D / Lambda：请在此处输入为您选择的签名算法生成的密钥的私钥D / Lambda。输出：盲签名：插件生成的盲签名将以字节数组的形式在此处发出。盲签名为数字：由插件生成的盲签名将以BigInteger编号的形式在此处发出。 Paillier的盲签名：插件为Paillier签名算法生成的两个盲签名将以BigInteger数组的形式在此处发出，该数组将签名保存为BigInteger编号。调试：重要计算的结果将在此处显示为字符串，以进行调试。 Blind Signature Verifier是一个CrypTool 2插件，它允许使用不同的签名算法来验证盲签名。设置：签名算法：此设置选项使您可以在几种签名算法之间自由选择，通过这些算法可以验证您的签名。输入：模N：请在此处输入为您选择的签名算法生成的密钥的公共模N。公钥E / G：请在此处输入为您选择的签名算法生成的公钥E（指数）或G。盲签名：请在此处输入先前生成的盲签名：作为数字：请在此处输入先前生成的盲签名作为Paillier的盲签名：请在此处输入先前生成的Paillier盲签名输出：解密的盲签名：解密的盲签名将在此处以字节数组的形式发出。 DecryptedBlind签名为数字：解密的盲签名将以BigInteger编号的形式在此处发出。</usage>
  <usage lang="de-DE">
    <section headline="Blinde Signatur Generator">
      Der Blinde Signatur Generator ist ein CrypTool 2 Plugin, welches die Erstellung blinder Signaturen für verschiedene Hash- und Signier-Verfahren erlaubt.
      <newline /><newline />
      Einstellungen:
      <enum><item> Hash Verfahren: Diese Option erlaubt die freie Wahl zwischen verschiedenen Hash-Verfahren, mit denen die Nachricht gehasht und der Hash anschließend blind signiert wird.</item><item> Signier Verfahren: Diese Option erlaubt die freie Wahl zwischen verschiedenen Signier-Verfahren, mit denen die Signatur erstellt wird. Denken Sie daran, bei der Entschlüsselung 
          der Signatur zur Verifizierung den selben Algorithmus wie hier gewählt zu verwenden.</item><item> Blindes Signieren Sicherheitsstufe: Diese Option erlaubt Ihnen zu wählen, welche Sicherheitsstufe gegen Blind Signing Angriffe Sie wünschen. Damit diese Option in Kraft tritt ist es notwendig beide Nachrichten Eingaben zu benutzen (sowohl den "öffentlichen" als auch den regulären).</item></enum><newline />
      Eingabe:
      <enum><item> Nachricht M: Bitte geben Sie hierüber ihre Nachricht ein.</item><item> Öffentliche Nachricht M: Bitte geben Sie hierüber ihre öffentlich sichtbare Nachricht ein.</item><item> Modulo N: Bitte geben Sie hierüber den Modulo N, der für den gewählten Algorithmus generierten Schlüssel ein.</item><item> Öffentlicher Schlüssel E/G: Bitte geben Sie hierüber den öffentlichen Schlüssel E/G, der für den gewählten Algorithmus generierten Schlüssel ein.</item><item> Privater Schlüssel D/Lambda: Bitte geben Sie hierüber den privaten Schlüssel D/Lambda, der für den gewählten Algorithmus generierten Schlüssel ein.</item></enum><newline />
      Ausgabe:
      <enum><item> Blinde Signatur: Die blinde Signatur wird hierüber als Byte Array ausgegeben.</item><item> Blinde Signatur als Zahl: Die blinde Signatur wird hierüber als BigInteger Zahl ausgegeben.</item><item> Blinde Signatur für Paillier: Die für das Paillier-Verfahren erstellten blinden Signaturen werden hierüber als BigInteger Zahlen innerhalb eines BigInteger Array ausgegeben.</item><item> Debug: Die Zwischenergebnisse wichtiger Berechnungen werden hierüber für Debugging-Zwecke als String ausgegeben.</item></enum></section>
    <section headline="Blinde Signatur Verifizierer">
      Der Blinde Signatur Verifizierer ist ein CrypTool 2 Plugin, welches die Verifikation blinder Signaturen für verschiedene Hash- und Signier-Verfahren erlaubt.
      <newline /><newline />
      Einstellungen:
      <enum><item>
          Signier Verfahren: Diese Option erlaubt die freie Wahl zwischen verschiedenen Signier-Verfahren, mit denen die Signatur verifiziert wird. 
       </item></enum><newline />
      Eingabe:
      <enum><item> Modulo N: Bitte geben Sie hierüber den Modulo N, der für den gewählten Algorithmus generierten Schlüssel ein.</item><item> Öffentlicher Schlüssel E/G: Bitte geben Sie hierüber den öffentlichen Schlüssel E/G, der für den gewählten Algorithmus generierten Schlüssel ein.</item><item> Blinde Signatur: Bitte geben Sie hierüber die zuvor erstellte blinde Signatur ein</item><item> Blinde Signatur als eine Zahl: Bitte geben Sie hierüber die zuvor erstellte blinde Signatur als eine Zahl ein</item><item> Blinde Signatur für Paillier: Bitte geben Sie hierüber die zuvor erstellte blinde Signatur für das Paillier-Verfahren ein</item></enum><newline />
      Ausgabe:
      <enum><item> Entschlüsselte blinde Signatur S: Die entschlüsselte blinde Signatur wird hierüber als Byte Array ausgegeben.</item><item> Entschlüsselte blinde Signatur als Zahl: Die entschlüsselte blinde Signatur wird hierüber als BigInteger Zahl ausgegeben.</item></enum></section>
  </usage>
  <presentation lang="en"></presentation>
  <presentation lang="de-DE"></presentation>
  <references></references>
</documentation>