<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Message_M_is_" xml:space="preserve">
    <value>Message M is: </value>
  </data>
  <data name="Hash_h_M__is__" xml:space="preserve">
    <value>Hash h(M) is: </value>
  </data>
  <data name="Random_Number_k_is__" xml:space="preserve">
    <value>Random number k is: </value>
  </data>
  <data name="Signature_s_is__" xml:space="preserve">
    <value>Signature S is: </value>
  </data>
  <data name="BlindSignature" xml:space="preserve">
    <value>Blind signature S</value>
  </data>
  <data name="BlindSignatureAsNumber" xml:space="preserve">
    <value>Blind signature S as a number</value>
  </data>
  <data name="BlindSignatureAsNumberTooltip" xml:space="preserve">
    <value>Output of the blind signature as a number.</value>
  </data>
  <data name="BlindSignatureGeneratorCaption" xml:space="preserve">
    <value>Blind Signature Generator</value>
  </data>
  <data name="BlindSignatureGeneratorTooltip" xml:space="preserve">
    <value>Generates a blind signature for a message.</value>
  </data>
  <data name="BlindSignaturePaillier" xml:space="preserve">
    <value>Blind signature S for Paillier</value>
  </data>
  <data name="BlindSignaturePaillierTooltip" xml:space="preserve">
    <value>Output of the blind signature for Paillier.</value>
  </data>
  <data name="BlindSignatureTooltip" xml:space="preserve">
    <value>Output of the blind signature.</value>
  </data>
  <data name="Debug" xml:space="preserve">
    <value>Debug</value>
  </data>
  <data name="DebugTooltip" xml:space="preserve">
    <value>Output of all results for debugging.</value>
  </data>
  <data name="HashAlgorithm" xml:space="preserve">
    <value>Hash algorithm</value>
  </data>
  <data name="HashAlgorithmTooltip" xml:space="preserve">
    <value>Choose the hash algorithm to be used.</value>
  </data>
  <data name="MessageM" xml:space="preserve">
    <value>Message M</value>
  </data>
  <data name="MessageMTooltip" xml:space="preserve">
    <value>Input of the message to be signed.</value>
  </data>
  <data name="ModuloN" xml:space="preserve">
    <value>Modulus N</value>
  </data>
  <data name="ModuloNTooltip" xml:space="preserve">
    <value>Input of the modulus.</value>
  </data>
  <data name="PrivateKey" xml:space="preserve">
    <value>Private key D/Lambda</value>
  </data>
  <data name="PrivateKeyTooltip" xml:space="preserve">
    <value>Input of the private key D/Lambda.</value>
  </data>
  <data name="PublicKey" xml:space="preserve">
    <value>Public key E/G</value>
  </data>
  <data name="PublicKeyTooltip" xml:space="preserve">
    <value>Input of the public key E/G.</value>
  </data>
  <data name="SigningAlgorithm" xml:space="preserve">
    <value>Signing algorithm</value>
  </data>
  <data name="SigningAlgorithmTooltip" xml:space="preserve">
    <value>Choose the signing algorithm to be used.</value>
  </data>
  <data name="BlindSignatureAsNumberIn" xml:space="preserve">
    <value>Blind signature S as a number</value>
  </data>
  <data name="BlindSignatureAsNumberInTooltip" xml:space="preserve">
    <value>Input of the blind signature as a number.</value>
  </data>
  <data name="BlindSignatureIn" xml:space="preserve">
    <value>Blind signature S</value>
  </data>
  <data name="BlindSignatureInTooltip" xml:space="preserve">
    <value>Input of the blind signature.</value>
  </data>
  <data name="BlindSignaturePaillierIn" xml:space="preserve">
    <value>Blind signature S for Paillier</value>
  </data>
  <data name="BlindSignaturePaillierInTooltip" xml:space="preserve">
    <value>Input of the blind signature for Paillier.</value>
  </data>
  <data name="BlindSignatureVerifierCaption" xml:space="preserve">
    <value>Blind Signature Verifier</value>
  </data>
  <data name="BlindSignatureVerifierTooltip" xml:space="preserve">
    <value>Verifies a blind signature</value>
  </data>
  <data name="DecryptedBlindSignature" xml:space="preserve">
    <value>Decrypted blind signature S</value>
  </data>
  <data name="DecryptedBlindSignatureAsNumber" xml:space="preserve">
    <value>Decrypted blind signature S as a number</value>
  </data>
  <data name="DecryptedBlindSignatureAsNumberTooltip" xml:space="preserve">
    <value>Output of the decrypted blind signature as a number</value>
  </data>
  <data name="DecryptedBlindSignatureTooltip" xml:space="preserve">
    <value>Output of the decrypted blind signature</value>
  </data>
  <data name="Slide0Description" xml:space="preserve">
    <value>This is the presentation of the Blind Signature Generator. Blind signatures are a special type of digital signatures which allow a high degree of anonymity and yet can be used for verification of messages.</value>
  </data>
  <data name="Slide0Values" xml:space="preserve">
    <value>Please run the generator and then click through the steps to be shown the internal calculations of the component.</value>
  </data>
  <data name="Slide1Description" xml:space="preserve">
    <value>In the first step the component reads your input and registers it.</value>
  </data>
  <data name="Slide1Values0" xml:space="preserve">
    <value>Values:</value>
  </data>
  <data name="Slide1Values1" xml:space="preserve">
    <value>The input of your message (M) is: </value>
  </data>
  <data name="Slide1Values2" xml:space="preserve">
    <value>The input of your modulo (N) is: </value>
  </data>
  <data name="Slide1Values3" xml:space="preserve">
    <value>The input of your public key (E/G)is: </value>
  </data>
  <data name="Slide1Values4" xml:space="preserve">
    <value>The input of your private key (D/Lambda) is: </value>
  </data>
  <data name="Slide2Description" xml:space="preserve">
    <value>In the second step the component the component converts your message to a byte[] and uses the hash algorithm you have chosen in the settings.</value>
  </data>
  <data name="Slide2Values" xml:space="preserve">
    <value>Your message has now become: </value>
  </data>
  <data name="Slide3DescriptionPaillier1" xml:space="preserve">
    <value>In the third step the component blinds the message for the paillier signing algorithm.</value>
  </data>
  <data name="Slide3DescriptionPaillier2" xml:space="preserve">
    <value>For this a blindingfactor k is randomly generated and used to blind the message with M* = M * k^N</value>
  </data>
  <data name="Slide3DescriptionRSA1" xml:space="preserve">
    <value>In the third step the component blinds the message for the RSA signing algorithm.</value>
  </data>
  <data name="Slide3DescriptionRSA2" xml:space="preserve">
    <value>For this a blindingfactor k is randomly generated and used to blind the message with M* = M * k^E mod N</value>
  </data>
  <data name="Slide3ValuesPaillier1" xml:space="preserve">
    <value>k: </value>
  </data>
  <data name="Slide3ValuesRSA1" xml:space="preserve">
    <value>k: </value>
  </data>
  <data name="Slide3ValuesRSA2" xml:space="preserve">
    <value>Blinded message M*: </value>
  </data>
  <data name="Slide4DescriptionPaillier1" xml:space="preserve">
    <value>In the fourth step the component starts the pallier signing algorithm.</value>
  </data>
  <data name="Slide4DescriptionPaillier2" xml:space="preserve">
    <value>For that the two signature values s1 and s2 for the paillier algorithm are calculated with</value>
  </data>
  <data name="Slide4DescriptionPaillier3" xml:space="preserve">
    <value>s1 = (L(M^Lambda mod N^2) / L(G^Lambda mod N^2)) mod N</value>
  </data>
  <data name="Slide4DescriptionPaillier4" xml:space="preserve">
    <value>s2 = (M * G^-s1)^(1/N mod lambda) mod N</value>
  </data>
  <data name="Slide4DescriptionPaillier5" xml:space="preserve">
    <value>At last the signature is un-blinded by multiplying s2 with k^-1 mod N</value>
  </data>
  <data name="Slide4DescriptionRSA1" xml:space="preserve">
    <value>In the fourth step the component starts the RSA signing algorithm.</value>
  </data>
  <data name="Slide4DescriptionRSA2" xml:space="preserve">
    <value>For this the signature s is calculated with s = M^D mod N</value>
  </data>
  <data name="Slide4DescriptionRSA3" xml:space="preserve">
    <value>At last the signature is un-blinded by dividing s by k</value>
  </data>
  <data name="Slide4ValuesPaillier1" xml:space="preserve">
    <value>s1:</value>
  </data>
  <data name="Slide4ValuesPaillier2" xml:space="preserve">
    <value>s2:</value>
  </data>
  <data name="Slide4ValuesRSA1" xml:space="preserve">
    <value>k: </value>
  </data>
  <data name="Slide4ValuesRSA2" xml:space="preserve">
    <value>s: </value>
  </data>
  <data name="PublicMessage" xml:space="preserve">
    <value>Message M publicly visible</value>
  </data>
  <data name="PublicMessageTooltip" xml:space="preserve">
    <value>Input of your Message to be publicly announced</value>
  </data>
  <data name="SlideDescription" xml:space="preserve">
    <value>Description: </value>
  </data>
  <data name="SlideStep" xml:space="preserve">
    <value>Step: </value>
  </data>
  <data name="SlideTitle" xml:space="preserve">
    <value>Blind Signature Generator</value>
  </data>
  <data name="SlideValues" xml:space="preserve">
    <value>Values: </value>
  </data>
  <data name="BlindSigningSecurity" xml:space="preserve">
    <value>Blind Signing Security Level</value>
  </data>
  <data name="BlindSigningSecurityTooltip" xml:space="preserve">
    <value>Choose the security level against blind signing attacks.</value>
  </data>
</root>