<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Message_M_is_" xml:space="preserve">
    <value>消息M为：</value>
  </data>
  <data name="Hash_h_M__is__" xml:space="preserve">
    <value>哈希h（M）为：</value>
  </data>
  <data name="Random_Number_k_is__" xml:space="preserve">
    <value>随机数k为：</value>
  </data>
  <data name="Signature_s_is__" xml:space="preserve">
    <value>签名S为：</value>
  </data>
  <data name="BlindSignature" xml:space="preserve">
    <value>盲签名S</value>
  </data>
  <data name="BlindSignatureAsNumber" xml:space="preserve">
    <value>盲目签名S为数字</value>
  </data>
  <data name="BlindSignatureAsNumberTooltip" xml:space="preserve">
    <value>盲签名输出为数字。</value>
  </data>
  <data name="BlindSignatureGeneratorCaption" xml:space="preserve">
    <value>盲签名生成器</value>
  </data>
  <data name="BlindSignatureGeneratorTooltip" xml:space="preserve">
    <value>生成消息的盲签名。</value>
  </data>
  <data name="BlindSignaturePaillier" xml:space="preserve">
    <value>Paillier的盲目签名S</value>
  </data>
  <data name="BlindSignaturePaillierTooltip" xml:space="preserve">
    <value>Paillier的盲签名输出。</value>
  </data>
  <data name="BlindSignatureTooltip" xml:space="preserve">
    <value>盲签名的输出。</value>
  </data>
  <data name="Debug" xml:space="preserve">
    <value>除错</value>
  </data>
  <data name="DebugTooltip" xml:space="preserve">
    <value>输出所有结果以进行调试。</value>
  </data>
  <data name="HashAlgorithm" xml:space="preserve">
    <value>哈希算法</value>
  </data>
  <data name="HashAlgorithmTooltip" xml:space="preserve">
    <value>选择要使用的哈希算法。</value>
  </data>
  <data name="MessageM" xml:space="preserve">
    <value>讯息M</value>
  </data>
  <data name="MessageMTooltip" xml:space="preserve">
    <value>输入要签名的消息。</value>
  </data>
  <data name="ModuloN" xml:space="preserve">
    <value>模量N</value>
  </data>
  <data name="ModuloNTooltip" xml:space="preserve">
    <value>输入模数。</value>
  </data>
  <data name="PrivateKey" xml:space="preserve">
    <value>私钥D / Lambda</value>
  </data>
  <data name="PrivateKeyTooltip" xml:space="preserve">
    <value>输入私钥D / Lambda。</value>
  </data>
  <data name="PublicKey" xml:space="preserve">
    <value>公钥E / G</value>
  </data>
  <data name="PublicKeyTooltip" xml:space="preserve">
    <value>输入公钥E / G。</value>
  </data>
  <data name="SigningAlgorithm" xml:space="preserve">
    <value>签名算法</value>
  </data>
  <data name="SigningAlgorithmTooltip" xml:space="preserve">
    <value>选择要使用的签名算法。</value>
  </data>
  <data name="BlindSignatureAsNumberIn" xml:space="preserve">
    <value>盲目签名S为数字</value>
  </data>
  <data name="BlindSignatureAsNumberInTooltip" xml:space="preserve">
    <value>输入盲签名作为数字。</value>
  </data>
  <data name="BlindSignatureIn" xml:space="preserve">
    <value>盲签名S</value>
  </data>
  <data name="BlindSignatureInTooltip" xml:space="preserve">
    <value>输入盲签名。</value>
  </data>
  <data name="BlindSignaturePaillierIn" xml:space="preserve">
    <value>Paillier的盲目签名S</value>
  </data>
  <data name="BlindSignaturePaillierInTooltip" xml:space="preserve">
    <value>输入Paillier的盲目签名。</value>
  </data>
  <data name="BlindSignatureVerifierCaption" xml:space="preserve">
    <value>盲签名验证者</value>
  </data>
  <data name="BlindSignatureVerifierTooltip" xml:space="preserve">
    <value>验证盲签名</value>
  </data>
  <data name="DecryptedBlindSignature" xml:space="preserve">
    <value>解密的盲签名S</value>
  </data>
  <data name="DecryptedBlindSignatureAsNumber" xml:space="preserve">
    <value>解密的盲签名S为数字</value>
  </data>
  <data name="DecryptedBlindSignatureAsNumberTooltip" xml:space="preserve">
    <value>解密的盲签名输出为数字</value>
  </data>
  <data name="DecryptedBlindSignatureTooltip" xml:space="preserve">
    <value>解密的盲签名的输出</value>
  </data>
  <data name="Slide0Description" xml:space="preserve">
    <value>这是盲签名生成器的演示。盲签名是一种特殊类型的数字签名，它允许高度匿名，但仍可用于验证消息。</value>
  </data>
  <data name="Slide0Values" xml:space="preserve">
    <value>请运行生成器，然后单击相应步骤以显示组件的内部计算。</value>
  </data>
  <data name="Slide1Description" xml:space="preserve">
    <value>第一步，组件读取您的输入并进行注册。</value>
  </data>
  <data name="Slide1Values0" xml:space="preserve">
    <value>值：</value>
  </data>
  <data name="Slide1Values1" xml:space="preserve">
    <value>您的消息（M）的输入是：</value>
  </data>
  <data name="Slide1Values2" xml:space="preserve">
    <value>模（N）的输入为：</value>
  </data>
  <data name="Slide1Values3" xml:space="preserve">
    <value>您的公共密钥（E / G）输入为：</value>
  </data>
  <data name="Slide1Values4" xml:space="preserve">
    <value>私钥（D / Lambda）的输入为：</value>
  </data>
  <data name="Slide2Description" xml:space="preserve">
    <value>在第二步中，组件组件将您的消息转换为byte []并使用您在设置中选择的哈希算法。</value>
  </data>
  <data name="Slide2Values" xml:space="preserve">
    <value>您的留言现在变成：</value>
  </data>
  <data name="Slide3DescriptionPaillier1" xml:space="preserve">
    <value>在第三步中，组件为消息签名算法屏蔽消息。</value>
  </data>
  <data name="Slide3DescriptionPaillier2" xml:space="preserve">
    <value>为此，随机生成一个盲因子k，并使用盲因子M * = M * k ^ N</value>
  </data>
  <data name="Slide3DescriptionRSA1" xml:space="preserve">
    <value>在第三步中，组件为RSA签名算法屏蔽消息。</value>
  </data>
  <data name="Slide3DescriptionRSA2" xml:space="preserve">
    <value>为此，随机生成一个盲因子k，并使用盲因子M * = M * k ^ E mod N</value>
  </data>
  <data name="Slide3ValuesPaillier1" xml:space="preserve">
    <value>至：</value>
  </data>
  <data name="Slide3ValuesRSA1" xml:space="preserve">
    <value>至：</value>
  </data>
  <data name="Slide3ValuesRSA2" xml:space="preserve">
    <value>盲消息M *：</value>
  </data>
  <data name="Slide4DescriptionPaillier1" xml:space="preserve">
    <value>在第四步中，组件启动较浅的签名算法。</value>
  </data>
  <data name="Slide4DescriptionPaillier2" xml:space="preserve">
    <value>为此，使用以下公式计算paillier算法的两个签名值s1和s2：</value>
  </data>
  <data name="Slide4DescriptionPaillier3" xml:space="preserve">
    <value>s1 =（L（M ^ Lambda mod N ^ 2）/ L（G ^ Lambda mod N ^ 2））mod N</value>
  </data>
  <data name="Slide4DescriptionPaillier4" xml:space="preserve">
    <value>s2 =（M * G ^ -s1）^（1 / N mod lambda）mod N</value>
  </data>
  <data name="Slide4DescriptionPaillier5" xml:space="preserve">
    <value>最后通过将s2乘以k ^ -1 mod N来消除盲目性</value>
  </data>
  <data name="Slide4DescriptionRSA1" xml:space="preserve">
    <value>在第四步中，组件启动RSA签名算法。</value>
  </data>
  <data name="Slide4DescriptionRSA2" xml:space="preserve">
    <value>为此，用s = M ^ D mod N计算签名s</value>
  </data>
  <data name="Slide4DescriptionRSA3" xml:space="preserve">
    <value>最后，通过将s除以k来消除盲目性</value>
  </data>
  <data name="Slide4ValuesPaillier1" xml:space="preserve">
    <value>s1：</value>
  </data>
  <data name="Slide4ValuesPaillier2" xml:space="preserve">
    <value>s2：</value>
  </data>
  <data name="Slide4ValuesRSA1" xml:space="preserve">
    <value>至：</value>
  </data>
  <data name="Slide4ValuesRSA2" xml:space="preserve">
    <value>s：</value>
  </data>
  <data name="PublicMessage" xml:space="preserve">
    <value>消息M公开可见</value>
  </data>
  <data name="PublicMessageTooltip" xml:space="preserve">
    <value>输入要公开宣布的消息</value>
  </data>
  <data name="SlideDescription" xml:space="preserve">
    <value>描述：</value>
  </data>
  <data name="SlideStep" xml:space="preserve">
    <value>步：</value>
  </data>
  <data name="SlideTitle" xml:space="preserve">
    <value>盲签名生成器</value>
  </data>
  <data name="SlideValues" xml:space="preserve">
    <value>值：</value>
  </data>
  <data name="BlindSigningSecurity" xml:space="preserve">
    <value>盲签名安全级别</value>
  </data>
  <data name="BlindSigningSecurityTooltip" xml:space="preserve">
    <value>选择针对盲签名攻击的安全级别。</value>
  </data>
</root>