<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Message_M_is_" xml:space="preserve">
    <value>Nachricht M ist: </value>
  </data>
  <data name="Hash_h_M__is__" xml:space="preserve">
    <value>Hash h(M) ist: </value>
  </data>
  <data name="Random_Number_k_is__" xml:space="preserve">
    <value>Zufallszahl k ist: </value>
  </data>
  <data name="Signature_s_is__" xml:space="preserve">
    <value>Signatur S ist: </value>
  </data>
  <data name="BlindSignature" xml:space="preserve">
    <value>Blinde Signatur S</value>
  </data>
  <data name="BlindSignatureAsNumber" xml:space="preserve">
    <value>Blinde Signatur S als Zahl</value>
  </data>
  <data name="BlindSignatureAsNumberTooltip" xml:space="preserve">
    <value>Ausgabe der blinden Signatur als Zahl.</value>
  </data>
  <data name="BlindSignatureGeneratorCaption" xml:space="preserve">
    <value>Blinde-Signatur-Generator</value>
  </data>
  <data name="BlindSignatureGeneratorTooltip" xml:space="preserve">
    <value>Erstellt eine blinde Signatur für eine Nachricht.</value>
  </data>
  <data name="BlindSignaturePaillier" xml:space="preserve">
    <value>Blinde Signatur S für Paillier</value>
  </data>
  <data name="BlindSignaturePaillierTooltip" xml:space="preserve">
    <value>Ausgabe der blinden Signatur für Paillier.</value>
  </data>
  <data name="BlindSignatureTooltip" xml:space="preserve">
    <value>Ausgabe der blinden Signatur.</value>
  </data>
  <data name="Debug" xml:space="preserve">
    <value>Debug</value>
  </data>
  <data name="DebugTooltip" xml:space="preserve">
    <value>Ausgabe aller Zwischenergebnisse für Debugging.</value>
  </data>
  <data name="HashAlgorithm" xml:space="preserve">
    <value>Hash-Verfahren</value>
  </data>
  <data name="HashAlgorithmTooltip" xml:space="preserve">
    <value>Wählen Sie das zu verwendende Hash-Verfahren.</value>
  </data>
  <data name="MessageM" xml:space="preserve">
    <value>Nachricht M</value>
  </data>
  <data name="MessageMTooltip" xml:space="preserve">
    <value>Eingabe der zu signierenden Nachricht.</value>
  </data>
  <data name="ModuloN" xml:space="preserve">
    <value>Modulus N</value>
  </data>
  <data name="ModuloNTooltip" xml:space="preserve">
    <value>Eingabe des Moduls.</value>
  </data>
  <data name="PrivateKey" xml:space="preserve">
    <value>Privater Schlüssel D/Lambda</value>
  </data>
  <data name="PrivateKeyTooltip" xml:space="preserve">
    <value>Eingabe des privaten Schlüssel D/Lambda.</value>
  </data>
  <data name="PublicKey" xml:space="preserve">
    <value>Öffentlicher Schlüssel E/G</value>
  </data>
  <data name="PublicKeyTooltip" xml:space="preserve">
    <value>Eingabe des öffentlichen Schlüssel E/G.</value>
  </data>
  <data name="SigningAlgorithm" xml:space="preserve">
    <value>Signier-Verfahren</value>
  </data>
  <data name="SigningAlgorithmTooltip" xml:space="preserve">
    <value>Wählen Sie das zu verwendende Signier-Verfahren.</value>
  </data>
  <data name="BlindSignatureAsNumberIn" xml:space="preserve">
    <value>Blinde Signatur S als Zahl</value>
  </data>
  <data name="BlindSignatureAsNumberInTooltip" xml:space="preserve">
    <value>Eingabe der blinden Signatur als Zahl.</value>
  </data>
  <data name="BlindSignatureIn" xml:space="preserve">
    <value>Blinde Signatur S</value>
  </data>
  <data name="BlindSignatureInTooltip" xml:space="preserve">
    <value>Eingabe der blinden Signatur.</value>
  </data>
  <data name="BlindSignaturePaillierIn" xml:space="preserve">
    <value>Blinde Signatur S für Paillier</value>
  </data>
  <data name="BlindSignaturePaillierInTooltip" xml:space="preserve">
    <value>Eingabe der blinden Signatur für Paillier.</value>
  </data>
  <data name="BlindSignatureVerifierCaption" xml:space="preserve">
    <value>Blinde-Signatur-Verifizierer</value>
  </data>
  <data name="BlindSignatureVerifierTooltip" xml:space="preserve">
    <value>Verifiziert eine blinde Signatur</value>
  </data>
  <data name="MessageNumber" xml:space="preserve">
    <value>Nachricht M als Zahl</value>
  </data>
  <data name="MessageNumberTooltip" xml:space="preserve">
    <value>Eingabe der Nachricht M als Zahl</value>
  </data>
  <data name="DecryptedBlindSignature" xml:space="preserve">
    <value>Entschlüsselte blinde Signatur S</value>
  </data>
  <data name="DecryptedBlindSignatureAsNumber" xml:space="preserve">
    <value>Entschlüsselte blinde Signatur S als Zahl</value>
  </data>
  <data name="DecryptedBlindSignatureAsNumberTooltip" xml:space="preserve">
    <value>Ausgabe der entschlüsselten blinden Signatur als Zahl</value>
  </data>
  <data name="DecryptedBlindSignatureTooltip" xml:space="preserve">
    <value>Ausgabe der entschlüsselten blinden Signatur</value>
  </data>
  <data name="Slide0Description" xml:space="preserve">
    <value>Dies ist die Präsentation des Blinde-Signatur-Generators. Blinde Signaturen sind eine Sonderform der digitalen Signaturen, welche einen hohen Grad an Anonymität erlauben und dennoch zur Verifikation von Nachrichten genutzt werden können.</value>
  </data>
  <data name="Slide0Values" xml:space="preserve">
    <value>Bitte starten Sie die Komponente und klicken Sie sich anschließend durch die Schritte um die internen Berechnungen der Komponente gezeigt zu bekommen.</value>
  </data>
  <data name="Slide1Description" xml:space="preserve">
    <value>Im ersten Schritt liest die Komponente den Input und speichert diesen.</value>
  </data>
  <data name="Slide1Values0" xml:space="preserve">
    <value>Werte:</value>
  </data>
  <data name="Slide1Values1" xml:space="preserve">
    <value>Der Input der Nachricht M ist: </value>
  </data>
  <data name="Slide1Values2" xml:space="preserve">
    <value>Der Input des Modulo N ist: </value>
  </data>
  <data name="Slide1Values3" xml:space="preserve">
    <value>Der Input des öffentlichen Schlüssels (E/G) ist: </value>
  </data>
  <data name="Slide1Values4" xml:space="preserve">
    <value>Der Inpute des privaten Schlüssels (D/Lambda) ist: </value>
  </data>
  <data name="Slide2Description" xml:space="preserve">
    <value>Im zweiten Schritt konvertiert die Komponente die Nachricht in ein byte[] und nutzt den Hash Algorithmus der in den Einstellungen gewählt wurde.</value>
  </data>
  <data name="Slide2Values" xml:space="preserve">
    <value>Die Nachricht ist nun: </value>
  </data>
  <data name="Slide3DescriptionPaillier1" xml:space="preserve">
    <value>Im dritten Schritt blendet die Komponente die Nachricht für den Paillier Signier-Algorithmus.</value>
  </data>
  <data name="Slide3DescriptionPaillier2" xml:space="preserve">
    <value>Dafür wird ein Blendfaktor k zufällig generiert und verwendet um die Nachricht zu blenden mit M* = M * k^N</value>
  </data>
  <data name="Slide3DescriptionRSA1" xml:space="preserve">
    <value>Im dritten Schritt blendet die Komponente die Nachricht für den RSA Signier-Algorithmus.</value>
  </data>
  <data name="Slide3DescriptionRSA2" xml:space="preserve">
    <value>Dafür wird ein Blendfaktor k zufällig generiert. Das Blenden geschieht mit M* = M * k^E mod N</value>
  </data>
  <data name="Slide3ValuesPaillier1" xml:space="preserve">
    <value>k: </value>
  </data>
  <data name="Slide3ValuesRSA1" xml:space="preserve">
    <value>k: </value>
  </data>
  <data name="Slide3ValuesRSA2" xml:space="preserve">
    <value>Geblendete Nachricht M*: </value>
  </data>
  <data name="Slide4DescriptionPaillier1" xml:space="preserve">
    <value>Im vierten Schritt beginnt die Komponente den Paillier Signier-Algorithmus.</value>
  </data>
  <data name="Slide4DescriptionPaillier2" xml:space="preserve">
    <value>Dafür werden die zwei Signatur Werte s1 uns 2 des Paillier Signier-Algorithmus berechnet mit</value>
  </data>
  <data name="Slide4DescriptionPaillier3" xml:space="preserve">
    <value>s1 = (L(M^Lambda mod N^2) / L(G^Lambda mod N^2)) mod N</value>
  </data>
  <data name="Slide4DescriptionPaillier4" xml:space="preserve">
    <value>s2 = (M * G^-s1)^(1/N mod Lambda) mod N</value>
  </data>
  <data name="Slide4DescriptionPaillier5" xml:space="preserve">
    <value>Zuletzt wird die Signatur noch entblendet, indem s2 mit k^-1 mod N multipliziert wird</value>
  </data>
  <data name="Slide4DescriptionRSA1" xml:space="preserve">
    <value>Im vierten Schritt beginnt die Komponente den RSA Signier-Algorithmus.</value>
  </data>
  <data name="Slide4DescriptionRSA2" xml:space="preserve">
    <value>Dafür wird die Signatur s berechnet mit s = M^D mod N</value>
  </data>
  <data name="Slide4DescriptionRSA3" xml:space="preserve">
    <value>Zuletzt wird die Signatur entblendet, indem s durch k geteilt wird</value>
  </data>
  <data name="Slide4ValuesPaillier1" xml:space="preserve">
    <value>s1: </value>
  </data>
  <data name="Slide4ValuesPaillier2" xml:space="preserve">
    <value>s2: </value>
  </data>
  <data name="Slide4ValuesRSA1" xml:space="preserve">
    <value>k: </value>
  </data>
  <data name="Slide4ValuesRSA2" xml:space="preserve">
    <value>s: </value>
  </data>
  <data name="PublicMessage" xml:space="preserve">
    <value>Nachricht M öffentlich sichtbar</value>
  </data>
  <data name="PublicMessageTooltip" xml:space="preserve">
    <value>Eingabe der öffentlich angekündigten Nachricht M</value>
  </data>
  <data name="SlideDescription" xml:space="preserve">
    <value>Beschreibung: </value>
  </data>
  <data name="SlideStep" xml:space="preserve">
    <value>Schritt:</value>
  </data>
  <data name="SlideTitle" xml:space="preserve">
    <value>Blinde-Signatur-Generator</value>
  </data>
  <data name="SlideValues" xml:space="preserve">
    <value>Werte: </value>
  </data>
  <data name="BlindSigningSecurity" xml:space="preserve">
    <value>Blindes Signieren Sicherheitsstufe</value>
  </data>
  <data name="BlindSigningSecurityTooltip" xml:space="preserve">
    <value>Wählen Sie die Sicherheitsstufe gegen Blind-Signing-Angriffe.</value>
  </data>
</root>