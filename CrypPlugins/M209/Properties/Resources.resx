<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ActionCaption" xml:space="preserve">
    <value>Action</value>
  </data>
  <data name="ActionList1" xml:space="preserve">
    <value>Encrypt</value>
  </data>
  <data name="ActionList2" xml:space="preserve">
    <value>Decrypt</value>
  </data>
  <data name="ActionTooltip" xml:space="preserve">
    <value>Select the Algorithm action</value>
  </data>
  <data name="Bar10Caption" xml:space="preserve">
    <value>Bar #10</value>
  </data>
  <data name="Bar10Tooltip" xml:space="preserve">
    <value>Please activate Slider, e.g. 24</value>
  </data>
  <data name="Bar11Caption" xml:space="preserve">
    <value>Bar #11</value>
  </data>
  <data name="Bar11Tooltip" xml:space="preserve">
    <value>Please activate Slider, e.g. 24</value>
  </data>
  <data name="Bar12Caption" xml:space="preserve">
    <value>Bar #12</value>
  </data>
  <data name="Bar12Tooltip" xml:space="preserve">
    <value>Please activate Slider, e.g. 24</value>
  </data>
  <data name="Bar13Caption" xml:space="preserve">
    <value>Bar #13</value>
  </data>
  <data name="Bar13Tooltip" xml:space="preserve">
    <value>Please activate Slider, e.g. 24</value>
  </data>
  <data name="Bar14Caption" xml:space="preserve">
    <value>Bar #14</value>
  </data>
  <data name="Bar14Tooltip" xml:space="preserve">
    <value>Please activate Slider, e.g. 24</value>
  </data>
  <data name="Bar15Caption" xml:space="preserve">
    <value>Bar #15</value>
  </data>
  <data name="Bar15Tooltip" xml:space="preserve">
    <value>Please activate Slider, e.g. 24</value>
  </data>
  <data name="Bar16Caption" xml:space="preserve">
    <value>Bar #16</value>
  </data>
  <data name="Bar16Tooltip" xml:space="preserve">
    <value>Please activate Slider, e.g. 24</value>
  </data>
  <data name="Bar17Caption" xml:space="preserve">
    <value>Bar #17</value>
  </data>
  <data name="Bar17Tooltip" xml:space="preserve">
    <value>Please activate Slider, e.g. 24</value>
  </data>
  <data name="Bar18Caption" xml:space="preserve">
    <value>Bar #18</value>
  </data>
  <data name="Bar18Tooltip" xml:space="preserve">
    <value>Please activate Slider, e.g. 24</value>
  </data>
  <data name="Bar19Caption" xml:space="preserve">
    <value>Bar #19</value>
  </data>
  <data name="Bar19Tooltip" xml:space="preserve">
    <value>Please activate Slider, e.g. 24</value>
  </data>
  <data name="Bar1Caption" xml:space="preserve">
    <value>Bar #1</value>
  </data>
  <data name="Bar1Tooltip" xml:space="preserve">
    <value>Please activate Slider, e.g. 24</value>
  </data>
  <data name="Bar20Caption" xml:space="preserve">
    <value>Bar #20</value>
  </data>
  <data name="Bar20Tooltip" xml:space="preserve">
    <value>Please activate Slider, e.g. 24</value>
  </data>
  <data name="Bar21Caption" xml:space="preserve">
    <value>Bar #21</value>
  </data>
  <data name="Bar21Tooltip" xml:space="preserve">
    <value>Please activate Slider, e.g. 24</value>
  </data>
  <data name="Bar22Caption" xml:space="preserve">
    <value>Bar #22</value>
  </data>
  <data name="Bar22Tooltip" xml:space="preserve">
    <value>Please activate Slider, e.g. 24</value>
  </data>
  <data name="Bar23Caption" xml:space="preserve">
    <value>Bar #23</value>
  </data>
  <data name="Bar23Tooltip" xml:space="preserve">
    <value>Please activate Slider, e.g. 24</value>
  </data>
  <data name="Bar24Caption" xml:space="preserve">
    <value>Bar #24</value>
  </data>
  <data name="Bar24Tooltip" xml:space="preserve">
    <value>Please activate Slider, e.g. 24</value>
  </data>
  <data name="Bar25Caption" xml:space="preserve">
    <value>Bar #25</value>
  </data>
  <data name="Bar25Tooltip" xml:space="preserve">
    <value>Please activate Slider, e.g. 24</value>
  </data>
  <data name="Bar26Caption" xml:space="preserve">
    <value>Bar #26</value>
  </data>
  <data name="Bar26Tooltip" xml:space="preserve">
    <value>Please activate Slider, e.g. 24</value>
  </data>
  <data name="Bar27Caption" xml:space="preserve">
    <value>Bar #27</value>
  </data>
  <data name="Bar27Tooltip" xml:space="preserve">
    <value>Please activate Slider, e.g. 24</value>
  </data>
  <data name="Bar2Caption" xml:space="preserve">
    <value>Bar #2</value>
  </data>
  <data name="Bar2Tooltip" xml:space="preserve">
    <value>Please activate Slider, e.g. 24</value>
  </data>
  <data name="Bar3Caption" xml:space="preserve">
    <value>Bar #3</value>
  </data>
  <data name="Bar3Tooltip" xml:space="preserve">
    <value>Please activate Slider, e.g. 24</value>
  </data>
  <data name="Bar4Caption" xml:space="preserve">
    <value>Bar #4</value>
  </data>
  <data name="Bar4Tooltip" xml:space="preserve">
    <value>Please activate Slider, e.g. 24</value>
  </data>
  <data name="Bar5Caption" xml:space="preserve">
    <value>Bar #5</value>
  </data>
  <data name="Bar5Tooltip" xml:space="preserve">
    <value>Please activate Slider, e.g. 24</value>
  </data>
  <data name="Bar6Caption" xml:space="preserve">
    <value>Bar #6</value>
  </data>
  <data name="Bar6Tooltip" xml:space="preserve">
    <value>Please activate Slider, e.g. 24</value>
  </data>
  <data name="Bar7Caption" xml:space="preserve">
    <value>Bar #7</value>
  </data>
  <data name="Bar7Tooltip" xml:space="preserve">
    <value>Please activate Slider, e.g. 24</value>
  </data>
  <data name="Bar8Caption" xml:space="preserve">
    <value>Bar #8</value>
  </data>
  <data name="Bar8Tooltip" xml:space="preserve">
    <value>Please activate Slider, e.g. 24</value>
  </data>
  <data name="Bar9Caption" xml:space="preserve">
    <value>Bar #9</value>
  </data>
  <data name="Bar9Tooltip" xml:space="preserve">
    <value>Please activate Slider, e.g. 24</value>
  </data>
  <data name="BarGroup" xml:space="preserve">
    <value>Lug positions</value>
  </data>
  <data name="BlockCaption" xml:space="preserve">
    <value>Format output in blocks</value>
  </data>
  <data name="BlockTooltip" xml:space="preserve">
    <value>Format the output of the component in blocks of 5 characters?</value>
  </data>
  <data name="CaseHandlingCaption" xml:space="preserve">
    <value>Case handling</value>
  </data>
  <data name="CaseHandlingList1" xml:space="preserve">
    <value>Preserve case</value>
  </data>
  <data name="CaseHandlingList2" xml:space="preserve">
    <value>Convert to upper</value>
  </data>
  <data name="CaseHandlingList3" xml:space="preserve">
    <value>Convert to lower</value>
  </data>
  <data name="CaseHandlingTooltip" xml:space="preserve">
    <value>What should be done with upper and lower case letters?</value>
  </data>
  <data name="FormattedCheckCaption" xml:space="preserve">
    <value>Output key sheet</value>
  </data>
  <data name="FormattedCheckTooltip" xml:space="preserve">
    <value>If this checkbox is activated, a formatted key sheet for the internal key is sent to the "Key Check" output along with the control value. Otherwise, only the control value is output.</value>
  </data>
  <data name="InputInternalKeyCaption" xml:space="preserve">
    <value>Input internal key</value>
  </data>
  <data name="InputInternalKeyTooltip" xml:space="preserve">
    <value>Input of the internal key, consisting of a string of the comma-separated positions of the active rotor pins and the positions of the lugs.</value>
  </data>
  <data name="KeyCheckCaption" xml:space="preserve">
    <value>Key Check</value>
  </data>
  <data name="KeyCheckTooltip" xml:space="preserve">
    <value>The plaintext consisting of 26 letters 'A' is encrypted with the external key 'AAAAAA'. The resulting ciphertext is used to check the correctness of the internal key.</value>
  </data>
  <data name="ModelCaption" xml:space="preserve">
    <value>Model</value>
  </data>
  <data name="ModelList1" xml:space="preserve">
    <value>6 Rotors</value>
  </data>
  <data name="ModelList2" xml:space="preserve">
    <value>5 Rotors</value>
  </data>
  <data name="ModelTooltip" xml:space="preserve">
    <value>Choose the machine model.</value>
  </data>
  <data name="OutputInternalKeyCaption" xml:space="preserve">
    <value>Output internal key</value>
  </data>
  <data name="OutputInternalKeyTooltip" xml:space="preserve">
    <value>Output of the internal key, consisting of the active rotor pins and the positions of the lugs on the bars.</value>
  </data>
  <data name="OutputStringCaption" xml:space="preserve">
    <value>Text output</value>
  </data>
  <data name="OutputStringTooltip" xml:space="preserve">
    <value>The string after processing with the M209 cipher</value>
  </data>
  <data name="PluginCaption" xml:space="preserve">
    <value>M209</value>
  </data>
  <data name="PluginTooltip" xml:space="preserve">
    <value>Classic Cipher Machine from the 2nd World War (USA)</value>
  </data>
  <data name="RandomKeyCaption" xml:space="preserve">
    <value>Generate internal key</value>
  </data>
  <data name="RandomKeyGroup" xml:space="preserve">
    <value>Internal key</value>
  </data>
  <data name="RandomKeyTooltip" xml:space="preserve">
    <value>Press this button to generate a random internal key consisting of the positions of the pins and the lugs.</value>
  </data>
  <data name="Rotor1Caption" xml:space="preserve">
    <value>Rotor #1</value>
  </data>
  <data name="Rotor1Tooltip" xml:space="preserve">
    <value>Please write all Active Pins, e.g. ABCD.</value>
  </data>
  <data name="Rotor2Caption" xml:space="preserve">
    <value>Rotor #2</value>
  </data>
  <data name="Rotor2Tooltip" xml:space="preserve">
    <value>Please write all Active Pins, e.g. ABCD</value>
  </data>
  <data name="Rotor3Caption" xml:space="preserve">
    <value>Rotor #3</value>
  </data>
  <data name="Rotor3Tooltip" xml:space="preserve">
    <value>Please write all Active Pins, e.g. ABCD</value>
  </data>
  <data name="Rotor4Caption" xml:space="preserve">
    <value>Rotor #4</value>
  </data>
  <data name="Rotor4Tooltip" xml:space="preserve">
    <value>Please write all Active Pins, e.g. ABCD</value>
  </data>
  <data name="Rotor5Caption" xml:space="preserve">
    <value>Rotor #5</value>
  </data>
  <data name="Rotor5Tooltip" xml:space="preserve">
    <value>Please write all Active Pins, e.g. ABCD</value>
  </data>
  <data name="Rotor6Caption" xml:space="preserve">
    <value>Rotor #6</value>
  </data>
  <data name="Rotor6Tooltip" xml:space="preserve">
    <value>Please write all Active Pins, e.g. ABCD</value>
  </data>
  <data name="StartwertCaption" xml:space="preserve">
    <value>Key (Initial rotor setting)</value>
  </data>
  <data name="StartwertTooltip" xml:space="preserve">
    <value>Please provide the initial rotor setting for each rotor, e.g. ABCDEF</value>
  </data>
  <data name="TextCaption" xml:space="preserve">
    <value>Text Input</value>
  </data>
  <data name="TextOptionsGroup" xml:space="preserve">
    <value>Text options</value>
  </data>
  <data name="TextTooltip" xml:space="preserve">
    <value>Input Text</value>
  </data>
  <data name="UnknownSymbolHandlingCaption" xml:space="preserve">
    <value>Unknown symbol handling</value>
  </data>
  <data name="UnknownSymbolHandlingList1" xml:space="preserve">
    <value>Ignore (leave unmodified)</value>
  </data>
  <data name="UnknownSymbolHandlingList2" xml:space="preserve">
    <value>Remove</value>
  </data>
  <data name="UnknownSymbolHandlingList3" xml:space="preserve">
    <value>Replace with 'X'</value>
  </data>
  <data name="UnknownSymbolHandlingTooltip" xml:space="preserve">
    <value>What should be done with input characters which are not in the plaintext alphabet?</value>
  </data>
  <data name="WheelGroup" xml:space="preserve">
    <value>Pin positions</value>
  </data>
  <data name="ZSpaceCaption" xml:space="preserve">
    <value>Replace space with 'Z'</value>
  </data>
  <data name="ZSpaceTooltip" xml:space="preserve">
    <value>Replace space characters with 'Z' during encryption and 'Z' with space during decryption.</value>
  </data>
</root>