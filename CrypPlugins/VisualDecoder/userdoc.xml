<?xml version="1.0" encoding="utf-8"?>
<!-- You can edit this file manually or with the Util/CrypDocumentationEditor -->
<documentation>
  <language culture="en" />
  <language culture="zh-CN" />
  <language culture="ru" />
  <language culture="de-DE" />
  <introduction lang="en">
   Visual codes are a common way to provide information that should be easily read by machines. 
		 <newline />
		The first visual codes was patented in 1952 by Norman Joseph Woodland[1] and based on the Morse code. 
		 <newline /><newline />
		There are two main types of visual codes, one and two-dimensional.
		 <newline />
		One-dimensional codes are also known as "Barcodes". They are mostly very limited in the amount of information they can provide. 
		Therefore, they are usually containing a number that should identify something (e.g.: product in a supermarket).
		 <newline />
    The applications of two-dimensional visual codes are widely distributed, due to their ability to provide much more Information. 
		They can save a simple link to a website or entire contact information (see the Vcard template). 
		Other applications are advertisement (e.g.: providing additional information) or proof of payment (e.g.: train tickets, post stamps).
		 <newline /><newline />
    But be aware visual codes can also contain harmful content such as a link to a malicious website[2] or malicious code (e.g.: SQL-Injections).
		Beside the fact, that there are simple ways to authenticate the origin of a visual code (See "RSA signed QRCode" template), 
		almost all visual codes are not signed.
 </introduction>
  <introduction lang="zh-CN">可视代码是提供机器应易于阅读的信息的常用方法。第一个视觉代码是1952年由Norman Joseph Woodland [1]根据莫尔斯电码获得专利的。可视代码有两种主要类型，一维和二维。一维代码也称为“条形码”。他们所能提供的信息量大多非常有限。因此，它们通常包含一个可以识别事物的数字（例如：超市中的产品）。二维可视代码的应用由于其提供更多信息的能力而广泛分布。他们可以保存指向网站的简单链接或整个联系信息（请参阅Vcard模板）。其他应用是广告（例如：提供其他信息）或付款证明（例如：火车票，邮票）。但是请注意，视觉代码也可能包含有害内容，例如指向恶意网站的链接[2]或恶意代码（例如：SQL-Injections）。除了事实之外，还有一些简单的方法可以对可视代码的来源进行身份验证（请参阅“ RSA签名的QRCode”模板），几乎所有可视代码均未签名。</introduction>
  <introduction lang="ru">Визуальные коды - это общий способ предоставления информации, которая должна быть легко прочитана машинами. Первые визуальные коды были запатентованы в 1952 году Норман Джозефом Вудландом [1] и основаны на коде Морзе. Существует два основных типа визуальных кодов, одно и двухмерных. Одномерные коды также известны как «штрих-коды». Они в основном очень ограничены в объеме информации, которую они могут предоставить. Поэтому они обычно содержат число, которое должно идентифицировать что-то (например: продукт в супермаркете). Приложения двумерных визуальных кодов широко распространены из-за их способности предоставлять гораздо больше информации. Они могут сохранить простую ссылку на веб-сайт или всю контактную информацию (см. Шаблон Vcard). Другие заявки - реклама (например, предоставление дополнительной информации) или подтверждение платежа (например: билеты на поезд, почтовые марки). Но знайте, что визуальные коды могут также содержать вредный контент, такой как ссылка на вредоносный веб-сайт [2] или вредоносный код (например, SQL-инъекции). Кроме того, существуют простые способы аутентификации источника визуального кода (см. Шаблон «RSA signed QRCode»), почти все визуальные коды не подписаны.</introduction>
  <introduction lang="de-DE">
    Visuelle Codes sind eine verbreitete Methode um Informationen, die einfach von Maschinen gelesen werden sollen, bereitzustellen. 
		 <newline />
		Der erste visuelle Code wurde 1952 von Norman Joseph Woodland patentiert[1] und basierte auf dem Morsecode.
		 <newline /><newline />
		Es gibt zwei Haupttypen von visuellen Codes, ein und zwei Dimensionale.
		 <newline />
		Ein-dimensionale Codes sind auch als Barcodes bekannt. Sie können nur wenig Informationen speichern und beinhalten deswegen meist nur eine Nummer, die zur Identifikation dient (z.B.: Produkte im Supermarkt).
		 <newline />
		Das Einsatzgebiet von zwei-dimensionalen visuellen Codes ist, da sie mehr Informationen speichern können, weit gefächert.
		Sie können einen einfachen Link zu einer Webseite oder ganze Kontaktinformationen (siehe Vcard Vorlage) enthalten.
		Andere Anwendungen sind Werbung(z.B.: Um zusätzliche Informationen bereitzustellen) oder als Zahlungsnachweis (z.B.: Bahntickets, Briefmarken).
		 <newline /><newline />
    Aber seien Sie sich bewusst, dass ein visueller Code auch schädliche Inhalte enthalten kann, wie zum Beispiel einen Link zu einer bösartigen Webseite [2] oder bösartigen Code (z.B.: SQL-Injections).
		Und neben der Tatsache, dass es das es einfache Möglichkeiten gibt die Herkunft eines visuellen Codes zu authentifizieren (siehe "RSA signierter QRCode" Vorlage), sind fast alle visuellen Codes nicht signiert.
  </introduction>
  <usage lang="en">
	 After you drag the component onto the workspace, you may select in the settings a code type or you let the component determine the type automaticly.
	  <newline />
	 The component will now try to decode the present image.
  </usage>
  <usage lang="zh-CN">将组件拖到工作区后，可以在设置中选择一种代码类型，也可以让组件自动确定类型。该组件现在将尝试解码当前图像。</usage>
  <usage lang="ru">После перетаскивания компонента в рабочую область вы можете выбрать в настройках тип кода или позволить компоненту автоматически определять тип. Теперь компонент попытается декодировать настоящее изображение.</usage>
  <usage lang="de-DE">
		Nachdem Sie die Komponente auf den Arbeitsbereich gezogen haben, können Sie in den Einstellungen eine Code Art auswählen oder die Komponente selbstständig diese bestimmen lassen.
		 <newline />
		Die Komponente wird nun versuchen das anliegende Bild zu decodieren.
  </usage>
  <presentation lang="en">
    The presentation will show the image at the input.
	 <newline /><newline />
    If the component has detected a visual code in the image, it will mark the location on in the image and output content of the code.
		 <newline />
		Also the type of visual code will be displayed, in case, you run the component on automatic mode
  </presentation>
  <presentation lang="zh-CN">演示文稿将在输入处显示图像。如果组件已在图像中检测到可视代码，它将标记图像中的位置并输出代码内容。如果在自动模式下运行组件，还将显示可视代码的类型。</presentation>
  <presentation lang="ru">В презентации будет отображаться изображение на входе. Если компонент обнаружил визуальный код на изображении, он будет отмечать местоположение на изображении и выводить содержимое кода. Также будет отображаться тип визуального кода, если вы запускаете компонент в автоматическом режиме</presentation>
  <presentation lang="de-DE">
    Die Präsentation zeigt Ihnen das am Eingang anliegende Bild.
		 <newline /><newline />
    Wenn die Komponente in dem Bild einen visuellen Code entdeckt hat, wird sie ihn auf dem Bild markieren und den Inhalt ausgeben.
		 <newline />
		Es wird ebenfalls die Art des visuellen Codes angezeigt, für den Fall, dass Sie die Komponente im Automatik Modus betreiben.
  </presentation>
  <references>
    <linkReference>
      <link url="http://www.google.com/patents?id=vWJoAAAAEBAJ" lang="en" />
      <caption lang="en">first patent</caption>
      <link url="http://www.google.com/patents?id=vWJoAAAAEBAJ" lang="de-DE" />
      <caption lang="de-DE">erstes Patent</caption>
    </linkReference>
    <linkReference>
      <link url="http://www.securelist.com/en/blog/208193145/Its_time_for_malicious_QR_codes" lang="en" />
      <caption lang="en">malicious QRCode</caption>
      <link url="http://www.securelist.com/en/blog/208193145/Its_time_for_malicious_QR_codes" lang="de-DE" />
      <caption lang="de-DE">bösartigen QRCode</caption>
    </linkReference>
    <linkReference>
      <link url="http://www.securitytube.net/video/190" lang="en" />
      <caption lang="en">
          "Toying with Barcodes" at Defcon 16.
          Felix "FX" Lindner demonstrates security vulnerabilities in existing barcode implementations.
        </caption>
      <link url="http://www.securitytube.net/video/190" lang="de-DE" />
      <caption lang="de-DE">
          "Toying with Barcodes" auf der Defcon 16.
          Felix "FX" Lindner demonstriert Sicherheitslücken in existierenden Barcode Anwendungen.
        </caption>
    </linkReference>
  </references>
</documentation>