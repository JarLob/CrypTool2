<?xml version="1.0" encoding="utf-8" ?>

<documentation>
  <language culture="en"/>

  <introduction lang="en">
    The quadratic sieve (QS) is a modern integer factorization algorithm. Factorization is the breaking down of a number into its prime divisors. For numbers bigger than ca. 100 decimal digits, the QS algorithm is currently
    the 2nd fastest algorithm after the general number field sieve (GNFS). Today QS is still the fastest algorithm for big integers under ca. 100 decimal digits.

    <section headline="Complexity">
      The running time of the quadratic sieve algorithm to factor an integer of size n is (using O-notation):       
      $$O(\exp(\log(n) \cdot \log(n) \cdot \log(n))$$
    </section>

    <section headline="About this component">
      This component is a wrapper for the quadratic sieve C implementation Msieve written by Jason Stratos Papadopoulos. The C code is integrated into a 32bit dll and
      is loaded during the startup phase of CrypTool 2. The dll also extends the functionality of the Msieve algorithm with multi threading. The original Msieve itself is a console application.
      If you want to get further information about Msieve please have a look at the author's website on SourceForge at <ref id="msieve"/>.
    </section>
  </introduction>

  <usage lang="en">
    This component has a BigNumber input. Here the user has to enter a BigNumber. He can use a <docRef item="Cryptool.Plugins.Numbers.NumberInput"/> component and enter a number or an arithmetic expression like $2^{12}+17+2^{32}$.
    However, the input number must consist of less than 275 decimal digits, otherwise the component will reject it.
    The component has only one output. The component puts an array of BigIntegers (the prime factors) to this output. In the configuration bar the user can set the number of CPUs to be used by the quadratic sieve component
    (It is only possible to select as many CPUs as the user's system offers).
    The quadratic sieve caches the found relations of the number.
    The user can choose if this cache should be deleted at a new startup or not by using the check box in the configuration bar.
  </usage>

  <presentation lang="en">
    The quadratic sieve component offers a QuickWatchRepresentation.
    This representation can be found by clicking the components presentation icon.
    Here the user can see the estimated end time, the current state of the sieving process and the already found prime factors.
    Also a key figure (relations) is visible. Relations are collected by the Msieve algorithm for factorization.
    The user sees the needed number of relations and the actual found number.
    As soon as the quadratic sieve has found enough relations the sieving is finished.
  </presentation>
  
  <language culture="de"/>

  <introduction lang="de">
    Das quadratische Sieb (QS) ist ein moderner Algorithmus zur Faktorisierung großer natürlicher Zahlen. Bei der Faktorisierung einer Zahl wird diese in ihre Primfaktoren zerlegt. 
    Momentan ist das QS für Zahlen mit mehr als 100 Dezimalstellen nach dem allgemeinen Zahlkörpersieb (GNFS) das zweitschnellste Faktorisierungsverfahren, für Zahlen mit bis zu 100 Dezimalstellen
    ist es immer noch das schnellste bekannte Verfahren.

    <section headline="Komplexität">
      Die Laufzeit des QS-Algorithmus für die Faktorisierung einer Zahl der Größe n ist (in O-Notation):
      $$O(\exp(\log(n) \cdot \log(n) \cdot \log(n))$$
    </section>

    <section headline="Über diese Komponente">
      Diese Komponente ist ein Wrapper für Msieve, eine Implementierung in C des quadratischen Siebs von Jason Stratos Papadopoulos. Der kompilierte C-Code liegt als 32-Bit-DLL vor.
      Beim Start wird diese von CrypTool 2 geladen. Die DLL erweitert die Funktionalität von Msieve um Multithreading. Msieve ist ursprünglich eine Konsolenanwendung.
      Für weitere Informationen über Msieve gehen Sie bitte auf die Website des Autors auf SourceForge: <ref id="msieve"/>.
    </section>
  </introduction>

  <usage lang="de">
    Die Komponente hat einen Eingang, an dem die zu faktorisierende Zahl als BigNumber anliegen muss. Dies kann z.B. mittels der <docRef item="Cryptool.Plugins.Numbers.NumberInput"/>-Komponente geschehen, über die Zahlen oder auch
    arithmetische Ausdrücke wie $2^{12}+17+2^{32}$ eingegeben werden können. Allerdings akzeptiert die QS-Komponente nur Zahlen mit weniger als 275 Dezimalstellen als Eingabe.
    Die Komponente hat nur einen Ausgang. An diesem wird ein Array von BigInteger-Zahlen, nämlich den gefundenen Primfaktoren, ausgegeben. In den Einstellungen der Komponente kann man die Anzahl der für die Faktorisierung zu verwendenden CPUs
    angeben, wobei als Maximum automatisch die Anzahl der vorhandenen CPUs des Systems angegeben ist.
    Die vom quadratischen Sieb für eine Zahl gefundenen Relationen werden zwischengespeichert. In den Einstellungen können Sie angeben, ob die Zwischenergebnisse bei einem neuen Start der Komponente gelöscht oder wiederverwendet werden sollen.
  </usage>

  <presentation lang="de">
    In der Präsentation der Komponente werden die voraussichtliche Dauer der Berechnungen und der momentane Status des Siebvorgangs sowie die bisher gefundenen Primfaktoren angezeigt.
    Außerdem wird die Anzahl der bisher gefundenen und der von Msieve für die Faktorisierung benötigten Relationen angezeigt.
    Sobald das quadratische Sieb genügend Relationen gefunden hat, wird der Siebvorgang beendet.
  </presentation>
  
  <references>
    <linkReference id ="msieve">
      <link url="http://sourceforge.net/projects/msieve/" lang="en" />
      <caption lang="en">Msieve SourceForge page</caption>
    </linkReference>
    <linkReference>
      <link url="http://en.wikipedia.org/wiki/Quadratic_sieve" lang="en" />
      <caption lang="en">Quadratic sieve in Wikipedia</caption>
    </linkReference>
    <linkReference>
      <link url="http://en.wikipedia.org/wiki/Integer_factorization" lang="en" />
      <caption lang="en">Integer factorization in Wikipedia</caption>
    </linkReference>
  </references>
  
</documentation>
