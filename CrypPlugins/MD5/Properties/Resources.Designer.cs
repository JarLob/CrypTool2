//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.239
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Cryptool.Plugins.MD5.Properties {
    using System;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Cryptool.Plugins.MD5.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;&lt; Previous ähnelt.
        /// </summary>
        internal static string @__Previous {
            get {
                return ResourceManager.GetString("__Previous", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Addition constant ähnelt.
        /// </summary>
        internal static string Addition_constant {
            get {
                return ResourceManager.GetString("Addition_constant", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die After that, we append multiple zero bytes to our data. We choose the amount of zero bytes in such a way that the length of the complete data block will be 8 bytes short of the next multiple of 64. This allows us to then append 8 more bytes to the data and reach an exact multiple of 64 as our data length. ähnelt.
        /// </summary>
        internal static string After_that__we_append_multiple_zero_bytes_to_our_data_ {
            get {
                return ResourceManager.GetString("After_that__we_append_multiple_zero_bytes_to_our_data_", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die and start the padding process by appending one single &apos;1&apos; bit to the end of our data. Since we are working with octets, this amounts to adding a byte with the binary value 10000000, which equals the hex value 0x80, to the end of our data. ähnelt.
        /// </summary>
        internal static string and_start_the_padding_process_by_appending_one_single__1__bit {
            get {
                return ResourceManager.GetString("and_start_the_padding_process_by_appending_one_single__1__bit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die bytes in the previous step, we conclude that we reached the end of our data. ähnelt.
        /// </summary>
        internal static string bytes_in_the_previous_step_ {
            get {
                return ResourceManager.GetString("bytes_in_the_previous_step_", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die bytes of data. ähnelt.
        /// </summary>
        internal static string bytes_of_data {
            get {
                return ResourceManager.GetString("bytes_of_data", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die bytes of data. ähnelt.
        /// </summary>
        internal static string bytes_of_data_ {
            get {
                return ResourceManager.GetString("bytes_of_data_", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die bytes of data left in our buffer ähnelt.
        /// </summary>
        internal static string bytes_of_data_left_in_our_buffer {
            get {
                return ResourceManager.GetString("bytes_of_data_left_in_our_buffer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Each round has 16 steps which change our temporary variables A - D. ähnelt.
        /// </summary>
        internal static string Each_round_has_16_steps {
            get {
                return ResourceManager.GetString("Each_round_has_16_steps", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die End of Block &gt;&gt;&gt;&gt; ähnelt.
        /// </summary>
        internal static string End_of_Block__ {
            get {
                return ResourceManager.GetString("End_of_Block__", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die End of Round &gt;&gt;&gt; ähnelt.
        /// </summary>
        internal static string End_of_Round__ {
            get {
                return ResourceManager.GetString("End_of_Round__", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die In the next step, we write the little-endian representation of this value into the next 8 bytes of our data buffer. ähnelt.
        /// </summary>
        internal static string In_the_next_step {
            get {
                return ResourceManager.GetString("In_the_next_step", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Input stream ähnelt.
        /// </summary>
        internal static string InputDataCaption {
            get {
                return ResourceManager.GetString("InputDataCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Input data to be hashed ähnelt.
        /// </summary>
        internal static string InputDataTooltip {
            get {
                return ResourceManager.GetString("InputDataTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Added the data length ähnelt.
        /// </summary>
        internal static string MD5State_Added_the_data_length {
            get {
                return ResourceManager.GetString("MD5State_Added_the_data_length", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Added the padding bytes ähnelt.
        /// </summary>
        internal static string MD5State_Added_the_padding_bytes {
            get {
                return ResourceManager.GetString("MD5State_Added_the_padding_bytes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Adding the data length ähnelt.
        /// </summary>
        internal static string MD5State_Adding_the_data_length {
            get {
                return ResourceManager.GetString("MD5State_Adding_the_data_length", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Adding the padding bytes ähnelt.
        /// </summary>
        internal static string MD5State_Adding_the_padding_bytes {
            get {
                return ResourceManager.GetString("MD5State_Adding_the_padding_bytes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Algorithm uninitialized ähnelt.
        /// </summary>
        internal static string MD5State_Algorithm_uninitialized {
            get {
                return ResourceManager.GetString("MD5State_Algorithm_uninitialized", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Before compression step ähnelt.
        /// </summary>
        internal static string MD5State_Before_compression_step {
            get {
                return ResourceManager.GetString("MD5State_Before_compression_step", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Beginning padding process ähnelt.
        /// </summary>
        internal static string MD5State_Beginning_padding_process {
            get {
                return ResourceManager.GetString("MD5State_Beginning_padding_process", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Finalizing compression ähnelt.
        /// </summary>
        internal static string MD5State_Finalizing_compression {
            get {
                return ResourceManager.GetString("MD5State_Finalizing_compression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Finished ähnelt.
        /// </summary>
        internal static string MD5State_Finished {
            get {
                return ResourceManager.GetString("MD5State_Finished", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Finished compression ähnelt.
        /// </summary>
        internal static string MD5State_Finished_compression {
            get {
                return ResourceManager.GetString("MD5State_Finished_compression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Finished compression round ähnelt.
        /// </summary>
        internal static string MD5State_Finished_compression_round {
            get {
                return ResourceManager.GetString("MD5State_Finished_compression_round", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Finished padding ähnelt.
        /// </summary>
        internal static string MD5State_Finished_padding {
            get {
                return ResourceManager.GetString("MD5State_Finished_padding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Initialization ähnelt.
        /// </summary>
        internal static string MD5State_Initialization {
            get {
                return ResourceManager.GetString("MD5State_Initialization", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Performing compression step ähnelt.
        /// </summary>
        internal static string MD5State_Performing_compression_step {
            get {
                return ResourceManager.GetString("MD5State_Performing_compression_step", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Read data ähnelt.
        /// </summary>
        internal static string MD5State_Read_data {
            get {
                return ResourceManager.GetString("MD5State_Read_data", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Reading data ähnelt.
        /// </summary>
        internal static string MD5State_Reading_data {
            get {
                return ResourceManager.GetString("MD5State_Reading_data", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Starting a compression round ähnelt.
        /// </summary>
        internal static string MD5State_Starting_a_compression_round {
            get {
                return ResourceManager.GetString("MD5State_Starting_a_compression_round", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Starting the compression ähnelt.
        /// </summary>
        internal static string MD5State_Starting_the_compression {
            get {
                return ResourceManager.GetString("MD5State_Starting_the_compression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Unknown state ähnelt.
        /// </summary>
        internal static string MD5State_Unknown_state {
            get {
                return ResourceManager.GetString("MD5State_Unknown_state", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Next &gt;&gt; ähnelt.
        /// </summary>
        internal static string Next__ {
            get {
                return ResourceManager.GetString("Next__", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die of 4. ähnelt.
        /// </summary>
        internal static string of_4 {
            get {
                return ResourceManager.GetString("of_4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Hashed value ähnelt.
        /// </summary>
        internal static string OutputDataCaption {
            get {
                return ResourceManager.GetString("OutputDataCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Hashed value ähnelt.
        /// </summary>
        internal static string OutputDataStreamCaption {
            get {
                return ResourceManager.GetString("OutputDataStreamCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Output data of the hashed value as Stream ähnelt.
        /// </summary>
        internal static string OutputDataStreamTooltip {
            get {
                return ResourceManager.GetString("OutputDataStreamTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Output data of the hashed value as byte array ähnelt.
        /// </summary>
        internal static string OutputDataTooltip {
            get {
                return ResourceManager.GetString("OutputDataTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die MD5 ähnelt.
        /// </summary>
        internal static string PluginCaption {
            get {
                return ResourceManager.GetString("PluginCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die MD5/DetailedDescription/Description.xaml ähnelt.
        /// </summary>
        internal static string PluginDescriptionURL {
            get {
                return ResourceManager.GetString("PluginDescriptionURL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die MD5 hash function ähnelt.
        /// </summary>
        internal static string PluginTooltip {
            get {
                return ResourceManager.GetString("PluginTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Rotating left shift ähnelt.
        /// </summary>
        internal static string Rotating_left_shift {
            get {
                return ResourceManager.GetString("Rotating_left_shift", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Round: ähnelt.
        /// </summary>
        internal static string Round_ {
            get {
                return ResourceManager.GetString("Round_", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Selected part from input data block ähnelt.
        /// </summary>
        internal static string Selected_part_from_input_data_block {
            get {
                return ResourceManager.GetString("Selected_part_from_input_data_block", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Shift constant ähnelt.
        /// </summary>
        internal static string Shift_constant {
            get {
                return ResourceManager.GetString("Shift_constant", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die shifted by ähnelt.
        /// </summary>
        internal static string shifted_by {
            get {
                return ResourceManager.GetString("shifted_by", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die shifted value ähnelt.
        /// </summary>
        internal static string shifted_value {
            get {
                return ResourceManager.GetString("shifted_value", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Since we read only ähnelt.
        /// </summary>
        internal static string Since_we_read_only {
            get {
                return ResourceManager.GetString("Since_we_read_only", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die So far, we have processed ähnelt.
        /// </summary>
        internal static string So_far__we_have_processed {
            get {
                return ResourceManager.GetString("So_far__we_have_processed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Step: ähnelt.
        /// </summary>
        internal static string Step_ {
            get {
                return ResourceManager.GetString("Step_", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The algorithm is not yet initialized. Please connect an input stream and start the workspace&apos;s process flow. Make sure that the presentation is visible when the MD5 plugin is activated. ähnelt.
        /// </summary>
        internal static string The_algorithm_is_not_yet_initialized {
            get {
                return ResourceManager.GetString("The_algorithm_is_not_yet_initialized", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The compression function of MD5 processes data in blocks of 64 bytes. Our goal is to read enough data that we can immediately call the compression function afterwards. Thus, we continue reading as many bytes as possible until we have 64. ähnelt.
        /// </summary>
        internal static string The_compression_function_of_MD5_processes_data_in_blocks_of_64_bytes_ {
            get {
                return ResourceManager.GetString("The_compression_function_of_MD5_processes_data_in_blocks_of_64_bytes_", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The compression function operates on 32 bit integers. There are 4 temporary variables A, B, C and D, which are used during the compression. We initialize them with the values from H1 - H4: ähnelt.
        /// </summary>
        internal static string The_compression_function_operates_on_32_bit_integers_ {
            get {
                return ResourceManager.GetString("The_compression_function_operates_on_32_bit_integers_", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The data block we have read looks like this: ähnelt.
        /// </summary>
        internal static string The_data_block_we_have_read_looks_like_this {
            get {
                return ResourceManager.GetString("The_data_block_we_have_read_looks_like_this", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The first thing we do is initialize our accumulators to their starting values, which are the fixed constants that you can see above. ähnelt.
        /// </summary>
        internal static string The_first_thing_we_do_is_initialize_our_accumulators {
            get {
                return ResourceManager.GetString("The_first_thing_we_do_is_initialize_our_accumulators", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The variables H1 - H4 are our accumulator variables. While we perform the hash, we will change them after each execution of the compression function. When we are done, they contain the final MD5 hash value. ähnelt.
        /// </summary>
        internal static string The_variables_H1_H4_are_our_accumulator_variables {
            get {
                return ResourceManager.GetString("The_variables_H1_H4_are_our_accumulator_variables", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die There are 4 non-linear inner round functions called F, G, H and I. They are a central part of the calculations performed in each round step. In this round, we use the function ähnelt.
        /// </summary>
        internal static string There_are_4_non_linear_inner_round_functions {
            get {
                return ResourceManager.GetString("There_are_4_non_linear_inner_round_functions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Unsigned integer addition discarding carry bit ähnelt.
        /// </summary>
        internal static string Unsigned_integer_addition_discarding_carry_bit {
            get {
                return ResourceManager.GetString("Unsigned_integer_addition_discarding_carry_bit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die We also split our 512 bit data block into 16 little-endian integers, each 32 bit: ähnelt.
        /// </summary>
        internal static string We_also_split_our_512_bit_data_block_into_16_ {
            get {
                return ResourceManager.GetString("We_also_split_our_512_bit_data_block_into_16_", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die We are now starting round ähnelt.
        /// </summary>
        internal static string We_are_now_starting_round {
            get {
                return ResourceManager.GetString("We_are_now_starting_round", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die We can now begin the padding process, which has two purposes:
        ///
        ///• It gives us the opportunity to increase the length of our data until we again have blocks with length of a multiple of 64 bytes.
        ///
        ///• It allows us to work the total length of the data into the final hash value. ähnelt.
        /// </summary>
        internal static string We_can_now_begin_the_padding_process_ {
            get {
                return ResourceManager.GetString("We_can_now_begin_the_padding_process_", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die We continue by calling the compression function for this input. ähnelt.
        /// </summary>
        internal static string We_continue_by_calling_the_compression_function_for_this_input {
            get {
                return ResourceManager.GetString("We_continue_by_calling_the_compression_function_for_this_input", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die We continue by reading the next block of data. ähnelt.
        /// </summary>
        internal static string We_continue_by_reading_the_next_block_of_data_ {
            get {
                return ResourceManager.GetString("We_continue_by_reading_the_next_block_of_data_", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die We have added the length at the end of our data buffer ähnelt.
        /// </summary>
        internal static string We_have_added_the_length_at_the_end_of_our_data_buffer {
            get {
                return ResourceManager.GetString("We_have_added_the_length_at_the_end_of_our_data_buffer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die We have added the padding bytes and our data now looks like this: ähnelt.
        /// </summary>
        internal static string We_have_added_the_padding_bytes_and_our_data_now_looks_like_this {
            get {
                return ResourceManager.GetString("We_have_added_the_padding_bytes_and_our_data_now_looks_like_this", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die We have finished all 16 steps of this round. ähnelt.
        /// </summary>
        internal static string We_have_finished_all_16_steps_of_this_round_ {
            get {
                return ResourceManager.GetString("We_have_finished_all_16_steps_of_this_round_", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die We have finished padding and have ähnelt.
        /// </summary>
        internal static string We_have_finished_padding_and_have {
            get {
                return ResourceManager.GetString("We_have_finished_padding_and_have", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die We have finished with the last round of the compression. Now it&apos;s time to update our accumulators. We do this by simply adding the variables A - D to them. ähnelt.
        /// </summary>
        internal static string We_have_finished_with_the_last_round_of_the_compression_ {
            get {
                return ResourceManager.GetString("We_have_finished_with_the_last_round_of_the_compression_", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die We have finished with the last round of the compression function. To finish up, we take the result of the compression function&apos;s steps, our temporary variables A - D, and add them to our accumulators H1 - H4. ähnelt.
        /// </summary>
        internal static string We_have_finished_with_the_last_round_of_the_compression_function {
            get {
                return ResourceManager.GetString("We_have_finished_with_the_last_round_of_the_compression_function", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die We have now finished compression of the last block of data. Our hash accumulators look like this: ähnelt.
        /// </summary>
        internal static string We_have_now_finished_compression_of_the_last_block_of_data {
            get {
                return ResourceManager.GetString("We_have_now_finished_compression_of_the_last_block_of_data", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die We have read a total of ähnelt.
        /// </summary>
        internal static string We_have_read_a_total_of {
            get {
                return ResourceManager.GetString("We_have_read_a_total_of", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die We now calculate the length of our data (without the padding bytes from the previous step) in bits: ähnelt.
        /// </summary>
        internal static string We_now_calculate_the_length_of_our_data {
            get {
                return ResourceManager.GetString("We_now_calculate_the_length_of_our_data", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die We now start the compression function for our next data block, ähnelt.
        /// </summary>
        internal static string We_now_start_the_compression_function_for_our_next_data_block_ {
            get {
                return ResourceManager.GetString("We_now_start_the_compression_function_for_our_next_data_block_", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die We obtain our final result, the actual MD5 hash value, by simply concatenating the lower-endian representation of our accumulators: ähnelt.
        /// </summary>
        internal static string We_obtain_our_final_result_the_actual_MD5_hash_value {
            get {
                return ResourceManager.GetString("We_obtain_our_final_result_the_actual_MD5_hash_value", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die We take the incomplete block of data that we&apos;ve read, ähnelt.
        /// </summary>
        internal static string We_take_the_incomplete_block_of_data_that_we_ve_read_ {
            get {
                return ResourceManager.GetString("We_take_the_incomplete_block_of_data_that_we_ve_read_", resourceCulture);
            }
        }
    }
}
