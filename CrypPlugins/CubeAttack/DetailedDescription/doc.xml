<?xml version="1.0" encoding="utf-8"?>
<documentation>
  <language culture="en" />
  <language culture="zh-CN" />
  <language culture="ru" />
  <language culture="de-DE" />
  <introduction lang="en">
    The cube attack is a type of algebraic attack in order to find out the cryptosystem's secret key. 
    It was published by Itai Dinur and Adi Shamir in September 2008.
    <newline /><newline />
    Cube attacks can be applied to any block cipher, stream cipher or MAC (message authentication code) which is provided as a black box
    in which at least one output bit can be represented by a low degree multivariate polynomial over GF(2) in the key and plaintext bits.
    <newline /><newline />
    It works by summing a cryptosystem's output bit value for all possible values of a subset of public input bits,
    chosen such that the sum results in derived polynomials on the secret bits. The goal is to get a set of linearly independent polynomials
    on the secret key bits and to solve this system of equations to discover the secret key.
    <newline /><newline />
    The cube attack consists of two phases, a preprocessing and an online phase.
    In the preprocessing phase, the attacker has the possibility to set the values in the public bits as well as in the secret bits and
    to query the black box in order to evaluate the corresponding output bit.
    The aim of the preprocessing phase is to determine subsets of public bits that correspond to linear polynomials on the secret bits and
    to reconstruct the algebraic structure of those polynomials. The preprocessing phase is computed only once per each cryptosystem and
    can be used in all subsequent online phases on this appropriate cryptosystem. In other words, once enough linearly independent
    polynomials on the secret bits have been found, they can be stored and used in all subsequent online phases to discover the secret key
    bits of the cryptosystem. The preprocessing phase stops if n linearly independent polynomials have been found, whereby n is the number
    of secret input bits on the cryptosystem under attack.
    <newline /><newline />
    During the online phase of the attack, the secret bits are fixed and unknown to the attacker. He is only allowed to set the 
    public bits to any value and to evaluate the output bit on this combined input. The aim of the online phase is to compute the values of 
    the polynomials found in the preprocessing phase. The polynomials with their corresponding values form a system of linear equations on 
    the secret bits. If we have found n linearly independent polynomial equations in the preprocessing phase, then we can solve the system 
    of equations to recover the values of the secret bits.
  </introduction>
  <introduction lang="zh-CN">立方攻击是一种代数攻击，目的是找出密码系统的秘密密钥。它由Itai Dinur和Adi Shamir于2008年9月发布。多维数据集攻击可以应用于任何块密码，流密码或MAC（消息身份验证代码），这些密码以黑盒形式提供，其中至少一个输出位可以表示为键和明文位中的GF（2）的低阶多元多项式。它通过对公用输入位子集的所有可能值的密码系统的输出位值求和来进行工作，选择该公共输入位的子集的所有可能值，以使总和得出秘密位上的派生多项式。目的是在密钥位上获得一组线性独立的多项式，并解决该方程组以发现密钥。多维数据集攻击包括两个阶段，即预处理阶段和在线阶段。在预处理阶段，攻击者可以设置公共位以及秘密位中的值，并可以查询黑盒，以便评估相应的输出位。预处理阶段的目的是确定与秘密位上的线性多项式相对应的公共位子集，并重建这些多项式的代数结构。每个加密系统仅计算一次预处理阶段，并且可以在此适当的加密系统上的所有后续联机阶段中使用该预处理阶段。换句话说，一旦在秘密位上找到了足够的线性独立的多项式，就可以将它们存储起来并在所有后续的在线阶段中使用，以发现密码系统的秘密密钥位。如果找到n个线性独立的多项式，则预处理阶段将停止，其中n是受到攻击的密码系统上的秘密输入位数。在攻击的在线阶段，秘密位是固定的，攻击者未知。仅允许他将公共位设置为任何值，并评估此组合输入上的输出位。在线阶段的目的是计算在预处理阶段发现的多项式的值。多项式及其相应的值在秘密位上形成线性方程组。如果在预处理阶段发现了n个线性独立的多项式方程，则可以求解方程组以恢复秘密位的值。</introduction>
  <introduction lang="ru">Атака куба - это тип алгебраической атаки, чтобы узнать секретный ключ криптосистемы. Он был опубликован Итаем Динуром и Ади Шамиром в сентябре 2008 года. Атаки кубов могут применяться к любому блочному шифру, поточному шифру или MAC (код аутентификации сообщения), который предоставляется как черный ящик, в котором по меньшей мере один выходной бит может быть представлен многомерный многочлен низкой степени над GF (2) в битах ключа и открытого текста. Он работает путем суммирования выходного битового значения криптосистемы для всех возможных значений подмножества общедоступных входных битов, выбираемых так, что сумма приводит к получению полиномов по секретным битам. Цель состоит в том, чтобы получить набор линейно независимых полиномов на битах секретного ключа и решить эту систему уравнений, чтобы обнаружить секретный ключ. Атака куба состоит из двух этапов: предварительной обработки и онлайн-фазы. На этапе предварительной обработки злоумышленник имеет возможность устанавливать значения в общедоступных битах, а также в секретных битах и ​​запрашивать черный ящик для оценки соответствующего выходного бита. Цель фазы предварительной обработки - определить подмножества открытых битов, которые соответствуют линейным многочленам на секретных битах и ​​восстановить алгебраическую структуру этих многочленов. Фаза предварительной обработки вычисляется только один раз для каждой криптосистемы и может использоваться во всех последующих онлайн-фазах на этой соответствующей криптосистеме. Другими словами, как только были найдены достаточные линейно независимые полиномы на секретных битах, их можно сохранить и использовать во всех последующих фазах онлайн, чтобы обнаружить секретные ключевые биты криптосистемы. Фаза предварительной обработки прекращается, если найдено n линейно независимых многочленов, причем n - количество секретных входных бит криптосистемы под атакой. Во время онлайн-фазы атаки секретные биты фиксируются и неизвестны злоумышленнику. Ему разрешено устанавливать публичные биты на любое значение и оценивать выходной бит на этом комбинированном входе. Целью онлайн-фазы является вычисление значений многочленов, найденных на фазе предварительной обработки. Многочлены с их соответствующими значениями образуют систему линейных уравнений на секретных битах. Если мы найдем n линейно независимых полиномиальных уравнений на фазе предварительной обработки, то мы сможем решить систему уравнений для восстановления значений секретных бит.</introduction>
  <introduction lang="de-DE">
    Der Cube-Angriff ist ein algebraischer Angriff auf ein Kryptosystem, der den geheimen Schlüssel offenlegen soll.
    Er wurde von Itai Dinur und Adi Shamir im September 2008 vorgestellt.
    <newline /><newline />
    Der Cube-Angriff kann auf alle Blockchiffren, Stromchiffren und Nachrichtenauthentifizierungscodes (message authentication codes) durchgeführt werden,
    bei denen mindestens ein Bit der Ausgabe als ein multivariates Polynom mit niedrigem Grad über GF(2) über den Bits des Schlüssels und des Klartextes
    dargestellt werden kann.
    <newline /><newline />
    Dazu wird das Ausgabebit des Kryptosystems für alle möglichen Belegungen einer Teilmenge der öffentlichen Eingabebits summiert. 
    Die Teilmenge wird so gewählt, dass das Ergebnis einem Polynom in den geheimen Bits des Schlüssels entspricht.
    Das Ziel ist, eine Menge von linear unabhängigen Polynomen über den Bits des Schlüssels zu erhalten und durch Lösen des resultierenden Gleichungssystems den Schlüssel zu rekonstruieren. 
    <newline /><newline />
    Der Cube-Angriff besteht aus einer Vorverarbeitungsphase und einer Onlinephase.
    In der Vorverarbeitungsphase hat der Angreifer die Möglichkeit, die Bits der Eingabe und des Schlüssels beliebig zu belegen
    und in das als Black-Box vorliegende Kryptosystem einzugeben, um dessen Ausgabe auszuwerten.
    Das Ziel der Vorverarbeitungsphase ist, Teilmengen der öffentlichen Bits zu bestimmen, die linearen Polynomen über den geheimen Bits entsprechen
    und die algebraische Struktur dieser Polynome zu rekonstruieren.
    Die Vorverarbeitungsphase muss für jedes Kryptosystem nur einmal durchgeführt werden und kann bei allen folgenden Onlinephasen für dieses Kryptosystem wiederverwendet werden.
    Wenn also genügend linear unabhängige Polynome über den geheimen Bits gefunden wurden, können diese gespeichert und bei allen weiteren Onlinephasen bei der Bestimmung der geheimen Bits verwendet werden.
    Die Vorverarbeitungsphase endet, wenn n linear unabhängige Polynome gefunden wurden, wobei n die Anzahl der geheimen Eingabebits des angegriffenen Kryptosystems ist.
    <newline /><newline />
    Während der Onlinephase des Angriffs bleiben die geheimen Bits unverändert und sie sind dem Angreifer nicht bekannt.
    Er kann nur die öffentlichen Bits mit beliebigen Werten belegen und das auf die kombinierte Eingabe resultierende Ausgabebit der Black Box auswerten.
    Das Ziel der Onlinephase ist, die Werte der in der Vorverarbeitungsphase gefundenen Polynome zu berechnen.
    Die Polynome ergeben zusammen mit ihren zugehörigen Werten ein lineares Gleichungssystem über den geheimen Bits.
    Wenn n linear unabhängige Polynomgleichungen in der Vorverarbeitungsphase gefunden wurden, so kann das Gleichungssystem gelöst werden und die Werte der geheimen Bits können bestimmt werden.
  </introduction>
  <usage lang="en">
    In order to make the cube attack work correctly we need to set its options accordingly. The settings of the component contain the following options:
    <newline /><newline />
    The setting "Action" is needed to decide between the cube attack modes "Preprocessing", "Online" and "Manual input of public bits".
    <newline /><newline />
    The settings "Public Bit Size" and "Secret Bit Size" are used to set the bit size of public and secret input bits of the cryptosystem
    under attack.
    <newline /><newline />
    The setting "Max cube size" is used to limit the size of the cube in the preprocessing phase of the attack. Any subset of public bits
    of size k defines a k-dimensional boolean cube of 2^k vectors in which we assign all the possible combinations of 0/1 values to the
    public variables. Therefore, we have to limit the size to avoid a number of computations that are infeasible in practise.
    <newline /><newline />
    The setting "Constant tests" is used to set the number of constant tests for each polynomial. The test computes the value of the
    polynomial for several different secret inputs and checks that the result is always the same. If it is, it must be constant.
    <newline /><newline />
    The setting "Linearity tests" is used to set the number of linearity tests for each polynomial. The test always succeeds if the
    polynomial is linear. However, if the polynomial is not linear, the test fails with high probability. The default value is fifty.
    Setting the value higher increases the probability that the polynomial is truly linear on the secret bits.
    <newline /><newline />
    The setting "Output Bit" chooses the target output bit of the cryptosystem under attack. A cube attack can be successful against a
    single output bit, but in most cryptosystems we need more than just one output bit to find enough linearly independent superpolys to
    cover all the secret
    bits. The setting is changeable while excecuting a preprocessing phase to consider multiple output bit values.
    <newline /><newline />
    The text box "Manual public bit input" provides the manual input of values for the public bits. Possible inputs are '0' (set bit to
    value 0), '1' (set bit to value 1) and '*' (sum over this bit value). Note, you have to set under "Action" the modus "Manual public pit
    input" to evaluate the polynomial under this public bit input.
    <newline /><newline />
    The component itself provides two text outputs. On the one hand the output of the linearly independent polynomials on the secret bits with
    its corresponding cube indexes and output bit index and on the other hand a text output that provides the recovered key bits.
    <newline /><newline />
    For computing the values of the polynomials and according to that to discover the secret bit values just click on the "Stop" button,
    select the "Online" phase and click on the "Start" button to begin with the online phase.
  </usage>
  <usage lang="zh-CN">为了使多维数据集攻击正确进行，我们需要相应地设置其选项。组件的设置包含以下选项：需要设置“动作”来决定多维数据集攻击模式“预处理”，“在线”和“手动输入公共位”。设置“公共位大小”和“秘密位大小”用于设置受到攻击的密码系统的公共和秘密输入位的位大小。设置“最大多维数据集大小”用于限制攻击的预处理阶段中多维数据集的大小。大小为k的公共位的任何子集都定义了2 ^ k个向量的k维布尔立方体，其中我们将0/1值的所有可能组合分配给公共变量。因此，我们必须限制大小以避免实际中不可行的大量计算。设置“常数测试”用于为每个多项式设置常数测试的数量。该测试将为几个不同的秘密输入计算多项式的值，并检查结果是否始终相同。如果是，则必须恒定。设置“线性测试”用于设置每个多项式的线性测试的次数。如果多项式是线性的，则测试总是成功的。但是，如果多项式不是线性的，则测试很有可能失败。默认值为五十。将值设置得更高会增加多项式在秘密位上真正线性的可能性。设置“输出位”选择受攻击的密码系统的目标输出位。多维数据集攻击可以针对单个输出位成功完成，但是在大多数密码系统中，我们需要不止一个输出位来找到足够的线性独立超级多边形来覆盖所有秘密位。在执行预处理阶段以考虑多个输出位值时，此设置可以更改。文本框“手动公共位输入”提供了公共位值的手动输入。可能的输入是“ 0”（将位设置为值0），“ 1”（将位设置为值1）和“ *”（该位值的总和）。注意，必须在“动作”下设置“手动公共坑输入”方式，以评估该公共位输入下的多项式。组件本身提供两个文本输出。一方面在秘密位上线性独立的多项式的输出及其对应的立方索引和输出位索引，另一方面在文本输出上提供已恢复的密钥位。要计算多项式的值，并根据该值发现秘密位值，只需单击“停止”按钮，选择“在线”阶段，然后单击“开始”按钮以开始在线阶段。</usage>
  <usage lang="ru">Чтобы заставить кубическую атаку работать правильно, нам нужно соответствующим образом установить ее параметры. Настройки компонента содержат следующие параметры. Для решения между режимами кубической атаки «Предварительная обработка», «Онлайн» и «Ручной ввод публичных битов» необходимо установить «Действие». Параметры «Размер публичного бита» и «Размер секретного бита» используются для установки размера битов открытых и секретных входных битов криптосистемы под атакой. Параметр «Максимальный размер куба» используется для ограничения размера куба на этапе предварительной обработки атаки. Любое подмножество открытых битов размера k определяет k-мерный булев куб векторов 2 ^ k, в котором мы присваиваем общедоступным переменным все возможные комбинации значений 0/1. Поэтому мы должны ограничить размер, чтобы избежать ряда вычислений, которые на практике невозможны. Параметр «Constant tests» используется для установки количества постоянных тестов для каждого многочлена. Тест вычисляет значение многочлена для нескольких разных секретных входов и проверяет, что результат всегда один и тот же. Если это так, оно должно быть постоянным. Параметр «Тесты линейности» используется для задания количества тестов линейности для каждого многочлена. Тест всегда выполняется, если полином линейный. Однако, если многочлен не является линейным, тест терпит неудачу с высокой вероятностью. Значение по умолчанию - пятьдесят. Установка значения выше увеличивает вероятность того, что многочлен действительно линейный по секретным битам. Параметр «Output Bit» выбирает целевой бит бит криптосистемы под атакой. Атака куба может быть успешной против одного выходного бита, но в большинстве криптосистем нам нужно больше, чем только один выходной бит, чтобы найти достаточно линейно независимых суперполисов для покрытия всех секретных бит. Эта настройка изменчива, когда выполняется предварительная обработка фазы, чтобы рассмотреть несколько значений выходных бит. Текстовое поле «Ручной ввод публичного бита» обеспечивает ручной ввод значений для общедоступных битов. Возможными входами являются «0» (бит набора до значения 0), «1» (бит набора до значения 1) и «*» (сумма по этому значению бит). Обратите внимание, что вы должны установить в разделе «Действие» modus «Ручной публичный вход ямы» для оценки полинома под этим публичным входным битом. Сам компонент предоставляет два текстовых выхода. С одной стороны, вывод линейно независимых полиномов по секретным битам с соответствующими индексами куба и выходным битовым индексом, а с другой - текстовый вывод, который обеспечивает восстановленные бит ключа. Для вычисления значений многочленов и в соответствии с этим для обнаружения значений секретных бит просто нажмите кнопку «Стоп», выберите фазу «Онлайн» и нажмите кнопку «Старт», чтобы начать с онлайн-фазы.</usage>
  <usage lang="de-DE">
    Damit der Cube-Angriff korrekt durchgeführt werden kann, müssen die Optionen der Komponente richtig eingestellt werden.
    Die Komponente hat die folgenden Einstellungsmöglichkeiten:
    <newline /><newline />
    Unter dem Punkt "Aktion" kann die Betriebsart der Komponente gewählt werden. Es gibt die Optionen "Vorverarbeitung", "Online" und "Manuelle Eingabe der öffentlichen Bits".
    <newline /><newline />
    In den Einstellungen "öffentliche Bitgröße" und "private Bitgröße" können Sie die Anzahl der öffentlichen und der geheimen Bits des angegriffenen Kryptosystems angeben.
    <newline /><newline />
    Unter "Maximale Würfelgröße" können Sie die Größe des Würfels in der Vorverarbeitungsphase begrenzen.
    Jede k-elementige Teilmenge der öffentlichen Bits definiert einen k-dimensionalen booleschen Würfel mit 2^k Ecken, denen alle 0/1-Belegungen
    der öffentlichen Bits entsprechen. Die Angabe einer oberen Schranke vermeidet Fälle, in denen die Anzahl der Berechnungen für den praktischen Einsatz zu groß werden würde.
    <newline /><newline />
    Unter "Konstantentest" können Sie die Anzahl der Tests einstellen, die für jedes Polynom durchgeführt werden sollen, um festzustellen,
    ob es sich um ein konstantes Polynom handelt. Ein solcher Test berechnet den Wert des Polynoms für mehrere geheime Bits und prüft, ob das Resultat immer dasselbe ist.
    <newline /><newline />
    Unter "Linearitätstests" können Sie die Anzahl der Tests einstellen, die für jedes Polynom durchgeführt werden sollen, um festzustellen,
    ob es sich um ein lineares Polynom handelt. Während lineare Polynome diesen Test immer bestehen, scheitern nichtlineare Polynome mit großer Wahrscheinlichkeit daran.
    Als Voreinstellung werden 50 Tests angenommen. Ein größerer Wert erhöht die Wahrscheinlichkeit, dass das Polynom tatsächlich linear in den geheimen Bits ist.
    <newline /><newline />
    Die Einstellung "Ausgabebit" wählt das Zielbit der Ausgabe des angegriffenen Kryptosystems aus.
    Ein Cube-Angriff kann bereits gegen ein einzelnes Ausgabebit erfolgreich sein, aber bei den meisten Kryptosystemen wird mehr als ein Ausgabebit benötigt,
    um genügend linear unabhängige Polynome zu finden, die alle geheimen Bits abdecken.
    Diese Option kann während der Vorverarbeitungsphase geändert werden, so dass mehrere Ausgabebits berücksichtigt werden.
    <newline /><newline />
    Im Textfeld "Manuelle Eingabe der öffentlichen Bits" können die Werte der öffentlichen Bits manuell festgelegt werden.
    Mögliche Eingaben sind '0' (setzt das Bit auf 0), '1' (setzt das Bit auf 1), und '*' (summiert dieses Bit).
    Beachten Sie, dass unter "Aktion" die Betriebsart "Manuelle Eingabe der öffentlichen Bits" ausgewählt worden sein muss,
    damit das Polynom mit den angegebenen öffentlichen Bits ausgewertet wird.
    <newline /><newline />
    Die Komponente hat zwei Ausgänge.
    An einem werden die linear unabhängigen Polynome über den geheimen Bits mit den zugehörigen Cube-Indizes und Ausgabebits ausgegeben,
    am anderen die gefundenen geheimen Bits.
    <newline /><newline />
    Um nach Ablauf der Vorverarbeitungsphase in die Onlinephase einzutreten und die geheimen Bits zu berechnen, halten Sie den Arbeitsbereich durch Klick auf "Stop" an,
    schalten in den Einstellungen auf den "Online"-Modus und starten den Arbeitsbereich wieder.
  </usage>
  <presentation lang="en"></presentation>
  <presentation lang="de-DE"></presentation>
  <references>
    <linkReference>
      <link url="http://eprint.iacr.org/2008/385" lang="en" />
      <caption lang="en">A more detailed description of the cube attack.</caption>
      <link url="http://eprint.iacr.org/2008/385" lang="de-DE" />
      <caption lang="de-DE">Detailliertere Beschreibung des Cube-Angriffs (englisch)</caption>
    </linkReference>
  </references>
</documentation>