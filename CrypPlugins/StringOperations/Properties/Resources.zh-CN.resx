<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="OperationCaption" xml:space="preserve">
    <value>运作方式</value>
  </data>
  <data name="OperationTooltip" xml:space="preserve">
    <value>更改此StringOperations的操作</value>
  </data>
  <data name="OutputStringCaption" xml:space="preserve">
    <value>输出字符串</value>
  </data>
  <data name="OutputStringTooltip" xml:space="preserve">
    <value>通过此操作创建的输出字符串</value>
  </data>
  <data name="OutputValueCaption" xml:space="preserve">
    <value>输出值</value>
  </data>
  <data name="OutputValueTooltip" xml:space="preserve">
    <value>该操作的输出值</value>
  </data>
  <data name="PluginCaption" xml:space="preserve">
    <value>字符串运算</value>
  </data>
  <data name="PluginTooltip" xml:space="preserve">
    <value>修改字符串的操作</value>
  </data>
  <data name="String1Caption" xml:space="preserve">
    <value>字符串一</value>
  </data>
  <data name="String1Tooltip" xml:space="preserve">
    <value>第一个输入字符串</value>
  </data>
  <data name="String2Caption" xml:space="preserve">
    <value>弦二</value>
  </data>
  <data name="String2Tooltip" xml:space="preserve">
    <value>第二个输入字符串</value>
  </data>
  <data name="Value1Caption" xml:space="preserve">
    <value>操作参数一</value>
  </data>
  <data name="Value1Tooltip" xml:space="preserve">
    <value>第一操作参数</value>
  </data>
  <data name="Value2Caption" xml:space="preserve">
    <value>OperationParameter-2</value>
  </data>
  <data name="Value2Tooltip" xml:space="preserve">
    <value>第二操作参数</value>
  </data>
  <data name="StringOperations_Execute_Could_not_execute_operation___0______1_" xml:space="preserve">
    <value>无法执行操作&amp;#39;{0}&amp;#39;：{1}</value>
  </data>
  <data name="String3Caption" xml:space="preserve">
    <value>弦三</value>
  </data>
  <data name="String3Tooltip" xml:space="preserve">
    <value>第三个输入字符串</value>
  </data>
  <data name="OutputStringArrayCaption" xml:space="preserve">
    <value>OutputStringArray</value>
  </data>
  <data name="OutputStringArrayTooltip" xml:space="preserve">
    <value>通过此操作在字符串数组中创建的输出字符串</value>
  </data>
  <data name="BlocksizeCaption" xml:space="preserve">
    <value>块大小</value>
  </data>
  <data name="BlocksizeTooltip" xml:space="preserve">
    <value>该字符串应在其中拆分的块的大小。</value>
  </data>
  <data name="OperationList1" xml:space="preserve">
    <value>连接</value>
  </data>
  <data name="OperationList10" xml:space="preserve">
    <value>更换</value>
  </data>
  <data name="OperationList11" xml:space="preserve">
    <value>正则表达式替换</value>
  </data>
  <data name="OperationList12" xml:space="preserve">
    <value>分裂</value>
  </data>
  <data name="OperationList13" xml:space="preserve">
    <value>块</value>
  </data>
  <data name="OperationList14" xml:space="preserve">
    <value>逆转</value>
  </data>
  <data name="OperationList2" xml:space="preserve">
    <value>子串</value>
  </data>
  <data name="OperationList3" xml:space="preserve">
    <value>到小写</value>
  </data>
  <data name="OperationList4" xml:space="preserve">
    <value>到大写</value>
  </data>
  <data name="OperationList5" xml:space="preserve">
    <value>长度</value>
  </data>
  <data name="OperationList6" xml:space="preserve">
    <value>相比于</value>
  </data>
  <data name="OperationList7" xml:space="preserve">
    <value>修剪</value>
  </data>
  <data name="OperationList8" xml:space="preserve">
    <value>指数</value>
  </data>
  <data name="OperationList9" xml:space="preserve">
    <value>等于</value>
  </data>
  <data name="OperationList15" xml:space="preserve">
    <value>分类</value>
  </data>
  <data name="Ascending" xml:space="preserve">
    <value>上升</value>
  </data>
  <data name="Descending" xml:space="preserve">
    <value>降序</value>
  </data>
  <data name="OrderCaption" xml:space="preserve">
    <value>订购</value>
  </data>
  <data name="OrderTooltip" xml:space="preserve">
    <value>字符串应该按升序还是降序排序？</value>
  </data>
  <data name="OperationList16" xml:space="preserve">
    <value>不同</value>
  </data>
  <data name="OperationList17" xml:space="preserve">
    <value>Levenshtein距离</value>
  </data>
</root>