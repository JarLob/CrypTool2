<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ChoiceOfModeOfOperation" xml:space="preserve">
    <value>Blockverkettungsmodus:</value>
  </data>
  <data name="ChoiceOfModeOfOperationGroup" xml:space="preserve">
    <value>Betriebsmodus</value>
  </data>
  <data name="ChoiceOfModeOfOperationToolTip" xml:space="preserve">
    <value>Legt den Betriebsmodus der Chiffre fest</value>
  </data>
  <data name="ChoiceOfOperatingMode" xml:space="preserve">
    <value>Aktion:</value>
  </data>
  <data name="ChoiceOfOperatingModeGroup" xml:space="preserve">
    <value>Ver- / Entschlüsseln</value>
  </data>
  <data name="ChoiceOfOperatingModeToolTip" xml:space="preserve">
    <value>Legt fest, ob die Komponente die Eingabe ver- oder entschlüsselt</value>
  </data>
  <data name="ChoiceOfPaddingMode" xml:space="preserve">
    <value>Padding-Modus:</value>
  </data>
  <data name="ChoiceOfPaddingModeGroup" xml:space="preserve">
    <value>Padding</value>
  </data>
  <data name="ChoiceOfPaddingModeToolTip" xml:space="preserve">
    <value>Stellt den Modus zum Füllen von Datenblöcken ein.</value>
  </data>
  <data name="ChoiceOfVariant" xml:space="preserve">
    <value>Parametrisierung:</value>
  </data>
  <data name="ChoiceOfVariantGroup" xml:space="preserve">
    <value>Blockgröße/Schlüssellänge</value>
  </data>
  <data name="ChoiceOfVariantToolTip" xml:space="preserve">
    <value>Hier können Blockgröße und Schlüssellänge von Speck ausgewählt werden</value>
  </data>
  <data name="Decrypt" xml:space="preserve">
    <value>Entschlüsseln</value>
  </data>
  <data name="BlockModeList1" xml:space="preserve">
    <value>Electronic Code Book (ECB)</value>
  </data>
  <data name="Encrypt" xml:space="preserve">
    <value>Verschlüsseln</value>
  </data>
  <data name="InputKeyCaption" xml:space="preserve">
    <value>Schlüssel</value>
  </data>
  <data name="InputKeyTooltip" xml:space="preserve">
    <value>Der bereitgestellte Schlüssel muss die notwendige Länge haben, die die gewählte Parametrisierung von Speck benötigt. Falls der Schlüssel zu kurz ist, bricht die Verarbeitung ab. Bei zu langen Schlüsseln wird der Schlüssel gekürzt.</value>
  </data>
  <data name="InputStreamCaption" xml:space="preserve">
    <value>Eingabestrom</value>
  </data>
  <data name="InputStreamTooltip" xml:space="preserve">
    <value>Daten die ver- oder entschlüsselt werden sollen</value>
  </data>
  <data name="OutputStreamCaption" xml:space="preserve">
    <value>Ausgabestrom</value>
  </data>
  <data name="OutputStreamTooltip" xml:space="preserve">
    <value>Ver- oder entschlüsselte Ausgabedaten</value>
  </data>
  <data name="PaddingList2" xml:space="preserve">
    <value>Nullen</value>
  </data>
  <data name="PluginCaption" xml:space="preserve">
    <value>Speck</value>
  </data>
  <data name="PluginTooltip" xml:space="preserve">
    <value>Speck</value>
  </data>
  <data name="Speck128_128" xml:space="preserve">
    <value>Speck128/128</value>
  </data>
  <data name="Speck128_192" xml:space="preserve">
    <value>Speck128/192</value>
  </data>
  <data name="Speck128_256" xml:space="preserve">
    <value>Speck128/256</value>
  </data>
  <data name="Speck32_64" xml:space="preserve">
    <value>Speck32/64</value>
  </data>
  <data name="Speck48_72" xml:space="preserve">
    <value>Speck48/72</value>
  </data>
  <data name="Speck48_96" xml:space="preserve">
    <value>Speck48/96</value>
  </data>
  <data name="Speck64_128" xml:space="preserve">
    <value>Speck64/128</value>
  </data>
  <data name="Speck64_96" xml:space="preserve">
    <value>Speck64/96</value>
  </data>
  <data name="Speck96_144" xml:space="preserve">
    <value>Speck96/144</value>
  </data>
  <data name="Speck96_96" xml:space="preserve">
    <value>Speck96/96</value>
  </data>
  <data name="Speck_blockmode_not_implemented" xml:space="preserve">
    <value>Der Betriebsmodus {0} ist nicht implementiert.</value>
  </data>
  <data name="Speck_Execute_Key_too_long" xml:space="preserve">
    <value>Die Schlüssellänge = {0} ist zu lang. Der Schlüssel wird auf die Länge {1} gekürzt.</value>
  </data>
  <data name="Speck_Execute_Key_too_short" xml:space="preserve">
    <value>Die Schlüssellänge = {0} ist zu kurz. Notwendige Schlüssellänge beträgt {1} Byte.</value>
  </data>
  <data name="Speck_no_cryptofunction" xml:space="preserve">
    <value>Aufgrund der Einstellungen konnte keine Kryptofunktion ausgewählt werden.</value>
  </data>
  <data name="BlockModeList2" xml:space="preserve">
    <value>Cipher Block Chaining (CBC)</value>
  </data>
  <data name="InputIVCaption" xml:space="preserve">
    <value>Initialisierungsvektor</value>
  </data>
  <data name="InputIVTooltip" xml:space="preserve">
    <value>Der Initialisierungsvektor (IV), der in den Blockmodi verwendet wird. Er muss genauso groß sein wie die Blöcke.</value>
  </data>
  <data name="PaddingList1" xml:space="preserve">
    <value>Kein</value>
  </data>
  <data name="PaddingList3" xml:space="preserve">
    <value>PKCS7</value>
  </data>
  <data name="PaddingList4" xml:space="preserve">
    <value>ANSIX923</value>
  </data>
  <data name="PaddingList5" xml:space="preserve">
    <value>ISO10126</value>
  </data>
  <data name="PaddingList6" xml:space="preserve">
    <value>1-0 Padding</value>
  </data>
  <data name="Speck_Input_padded" xml:space="preserve">
    <value>Der Eingabestrom wurde mittels {0} gepadded</value>
  </data>
  <data name="Speck_Input_too_short" xml:space="preserve">
    <value>Der Klartext/Geheimtext-Eingangsstrom ist zu kurz. Prüfen Sie die Blocklänge Ihrer Eingabe (siehe Blocklänge der gewählten Speck-Variante) oder es  oder es muss ein Padding-Modus ausgewählt werden.</value>
  </data>
  <data name="Speck_IV_too_long" xml:space="preserve">
    <value>Der gegebene Initialisierungsvektor ist zu lang. Dieser wird abgeschnitten.</value>
  </data>
  <data name="Speck_IV_too_short" xml:space="preserve">
    <value>Der gegebene Initialisierungsvektor ist zu kurz. Dieser wird mit Nullen aufgefüllt.</value>
  </data>
  <data name="Speck_No_IV_was_given" xml:space="preserve">
    <value>Es wurde kein Initialisierungsvektor spezifiziert. Dieser wird mit dem Wert 0 initialisiert.</value>
  </data>
  <data name="BlockModeList3" xml:space="preserve">
    <value>Cipher Feedback (CFB)</value>
  </data>
  <data name="BlockModeList4" xml:space="preserve">
    <value>Output Feedback (OFB)</value>
  </data>
</root>