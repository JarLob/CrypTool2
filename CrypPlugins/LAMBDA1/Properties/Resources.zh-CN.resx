<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DecryptButton" xml:space="preserve">
    <value>解密</value>
  </data>
  <data name="EncryptButton" xml:space="preserve">
    <value>加密</value>
  </data>
  <data name="ErrorInputBlockLength" xml:space="preserve">
    <value>无法开始解密；密文输入（{0}字节）不是LAMBDA1块长度{1}的倍数。检查是否复制了加密过程中的所有字节。</value>
  </data>
  <data name="ErrorInputDataEmpty" xml:space="preserve">
    <value>没有提供数据。长度为{0}。</value>
  </data>
  <data name="ErrorInputDataNull" xml:space="preserve">
    <value>未连接输入数据。</value>
  </data>
  <data name="ErrorIVLength" xml:space="preserve">
    <value>给定的初始化向量的长度无效（{0}字节）。该长度必须与{1}个字节的块大小匹配。</value>
  </data>
  <data name="ErrorKeyLengthEmpty" xml:space="preserve">
    <value>给定的键为空（{0}字节）。所需的密钥长度为{1}字节。</value>
  </data>
  <data name="ErrorKeyLengthShort" xml:space="preserve">
    <value>给定的密钥太短（{0}字节）。所需的密钥长度为{1}字节。</value>
  </data>
  <data name="ErrorKeyNull" xml:space="preserve">
    <value>未连接输入键。必须提供一个32字节的密钥。</value>
  </data>
  <data name="ErrorKeyOverlength" xml:space="preserve">
    <value>给定的密钥太长（{0}字节）。所需的密钥长度为{1}。超出的字节将被截断。</value>
  </data>
  <data name="InfoIVMissing" xml:space="preserve">
    <value>没有提供初始化向量，将使用0x00 ... 0x00</value>
  </data>
  <data name="InputData" xml:space="preserve">
    <value>输入数据</value>
  </data>
  <data name="InputDataTooltip" xml:space="preserve">
    <value>输入纯文本消息（用于加密）或密文（用于解密）</value>
  </data>
  <data name="InputIV" xml:space="preserve">
    <value>初始化向量</value>
  </data>
  <data name="InputIVTooltip" xml:space="preserve">
    <value>指定初始化向量（IV）</value>
  </data>
  <data name="InputKey" xml:space="preserve">
    <value>键</value>
  </data>
  <data name="InputKeyTooltip" xml:space="preserve">
    <value>为算法提供32字节的密钥（256位）</value>
  </data>
  <data name="Mode" xml:space="preserve">
    <value>模式</value>
  </data>
  <data name="ModeDescription" xml:space="preserve">
    <value>选择您要加密还是解密数据</value>
  </data>
  <data name="OutputData" xml:space="preserve">
    <value>输出数据</value>
  </data>
  <data name="OutputDataTooltip" xml:space="preserve">
    <value>输出十六进制密文或ASCII解密明文</value>
  </data>
  <data name="PluginCaption" xml:space="preserve">
    <value>LAMBDA1</value>
  </data>
  <data name="PluginTooltip" xml:space="preserve">
    <value>LAMBDA1是基于DES的历史分组密码。它于1980年代在德国东部开发</value>
  </data>
</root>