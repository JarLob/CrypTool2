<?xml version="1.0" encoding="utf-8"?>
<documentation>
  <language culture="en" />
  <language culture="ru" />
  <language culture="de-DE" />
  <introduction lang="en">
    The Paillier cryptosystem, named after and invented by Pascal Paillier in 1999, is a probabilistic asymmetric algorithm for
    public-key cryptography. The problem of computing n-th residue classes is believed to be computationally difficult.
    The decisional composite residuosity assumption is the intractability hypothesis upon which this cryptosystem is based.
    <newline /><newline />
    A special attribute of the Paillier cryptosystems are its <internal ref="../Common/Homomorphic Ciphers and their Importance in Cryptography_en.html">homomorphic</internal> properties:
    Two encrypted messages can be added without having to decrypt them first.
    It can also multiply an encrypted number with an unencrypted number, so that the result is the encrypted product.
  </introduction>
  <introduction lang="ru">Криптосистема Пайлера, названная в честь Паскаля Пайлера в 1999 году, была вероятностным асимметричным алгоритмом криптографии с открытым ключом. Считается, что проблема вычисления n-го класса вычетов является сложной вычислительной задачей. Предполагаемое предположение о композиционной остаточности решения - гипотеза о неразрешимости, на которой основана эта криптосистема. Особым атрибутом криптосистемы Пайлера являются его гомоморфные свойства: два зашифрованных сообщения могут быть добавлены без необходимости их дешифрования в первую очередь. Он также может умножать зашифрованное число с незашифрованным номером, так что результатом будет зашифрованный продукт.</introduction>
  <introduction lang="de-DE">
    Das Paillier-Kryptosystem wurde benannt nach seinem Erfinder Pascal Paillier, der es 1999 vorgestellt hat.
    Es handelt sich dabei um ein probabilistisches asymmetrisches Kryptosystem, dessen Sicherheit auf der Annahme beruht,
    dass für einen zusammengesetzten Modul $n$ nicht effizient geprüft werden kann,
    ob ein Element in $(Z/n^2Z)$ eine $n$-te Wurzel modulo $n^2$ besitzt oder nicht.
    <newline /><newline />
    Eine Besonderheit des Paillier-Kryptosystems sind seine <internal ref="../Common/Homomorphic Ciphers and their Importance in Cryptography_de.html">homomorphen</internal> Eigenschaften:
    Zwei verschlüsselte Nachrichten können addiert werden, ohne die Nachrichten vorher zu entschlüsseln.
    Außerdem kann eine verschlüsselte Zahl mit einer unverschlüsselten Zahl multipliziert werden, so dass das Ergebnis das verschlüsselte Produkt ist.
  </introduction>
  <usage lang="en">
    The component has several operation modes, that can be selected in the settings. Depending on the selected mode, the component requires different inputs.
    <newline /><newline />
    If you choose the operation mode 'Encryption', you must supply the public key on the inputs 'N' and 'G'. The public key can be provided by the <docRef item="Cryptool.Plugins.Paillier.PaillierKeyGenerator">PaillierKeyGenerator</docRef> component.
    On the input 'M', you can enter the message you want to encrypt. The message can be a BigInteger, a byte array or a string.
    If it is a BigInteger, the encrypted message will also be a BigInteger and will be sent to the BigInteger output of the component.
    If it is a byte array or a string, the encrypted message will be sent to the byte array output.
    <newline /><newline />
    If you choose the operation mode 'Decryption', besides the ciphertext and the public key, you must additionally provide the private key 'Lambda', that is also generated by the <docRef item="Cryptool.Plugins.Paillier.PaillierKeyGenerator">PaillierKeyGenerator</docRef> component.
    <newline /><newline />
    In the operation mode 'Addition', the component adds two encrypted numbers and sends the encrypted sum to the BigInteger output.
    For this, it only requires the public key. As it can not decrypt the summands with the public key, this means that the component executes an arithmetic operation without knowing the value of the operands.
    The first encrypted summand must be entered at the input 'M', the second encrypted summand at the other appropriate BigInteger input.
    <newline /><newline />
    In the operation mode 'Multiplication', the component multiplies an encrypted number with an unencrypted number and sends the encrypted product to the BigInteger output.
    Again, only the public key is required. The encrypted factor must be entered at the input 'M', the unencrypted factor at the other BigInteger input.
  </usage>
  <usage lang="ru">Компонент имеет несколько режимов работы, которые можно выбрать в настройках. В зависимости от выбранного режима компонент требует разных входов. Если вы выберете режим работы «Шифрование», вы должны предоставить открытый ключ на входах «N» и «G». Открытый ключ может быть предоставлен компонентом PaillierKeyGenerator. На входе «M» вы можете ввести сообщение, которое вы хотите зашифровать. Сообщение может быть BigInteger, байтовый массив или строка. Если это BigInteger, зашифрованное сообщение также будет BigInteger и будет отправлено на выход BigInteger компонента. Если это массив байтов или строка, зашифрованное сообщение будет отправлено на вывод массива байтов. Если вы выберете режим работы «Расшифровка», помимо зашифрованного текста и открытого ключа, вы должны дополнительно предоставить закрытый ключ «Лямбда», который также генерируется компонентом PaillierKeyGenerator. В режиме работы «Дополнение» компонент добавляет два зашифрованных номера и отправляет зашифрованную сумму на выход BigInteger. Для этого требуется только открытый ключ. Поскольку он не может расшифровать слагаемые открытым ключом, это означает, что компонент выполняет арифметическую операцию, не зная значения операндов. Первое зашифрованное слагаемое должно вводиться на вход «M», второе зашифрованное слагаемое на другом соответствующем входе BigInteger. В режиме работы «Умножение» компонент умножает зашифрованное число на незашифрованное число и отправляет зашифрованный продукт на выход BigInteger. Опять же, требуется только открытый ключ. Зашифрованный множитель необходимо ввести на вход «M», незашифрованный коэффициент на другом входе BigInteger.</usage>
  <usage lang="de-DE">
    Die Komponente hat mehrere Betriebsarten, zwischen denen Sie in den Einstellungen wählen können. Abhängig von der gewählten Betriebsart werden unterschiedliche Eingaben benötigt.
    <newline /><newline />
    Wenn die Betriebsart 'Verschlüsselung' gewählt wurde, so wird an den Eingängen 'N' und 'G' der öffentliche Schlüssel erwartet, der durch die <docRef item="Cryptool.Plugins.Paillier.PaillierKeyGenerator">PaillierKeyGenerator</docRef>-Komponente generiert werden kann.
    Am Eingang 'M' muss die zu verschlüsselnde Nachricht anliegen. Diese kann als BigInteger, Byte-Array oder als Zeichenkette eingegeben werden.
    Ist die Nachricht ein BigInteger, so ist die verschlüsselte Nachricht ebenfalls ein BigInteger und wird entsprechend am BigInteger-Ausgang der Komponente ausgegeben.
    Ist sie ein Byte-Array oder eine Zeichenkette, so wird die verschlüsselte Nachricht am Byte-Array-Ausgang ausgegeben.
    <newline /><newline />
    Wenn die Betriebsart 'Entschlüsselung' gewählt wurde, so wird neben dem öffentlichen Schlüssel und der verschlüsselten Nachricht als Eingabe noch der private Schlüssel 'Lambda' benötigt.
    Dieser wird ebenfalls von der <docRef item="Cryptool.Plugins.Paillier.PaillierKeyGenerator">PaillierKeyGenerator</docRef>-Komponente generiert.
    <newline /><newline />
    In der Betriebsart 'Addition' addiert die Komponente zwei verschlüsselte Zahlen und gibt die Summe, ebenfalls in verschlüsselter Form, am BigInteger-Ausgang aus.
    Sie benötigt dafür nur den öffentlichen Schlüssel. Da die Zahlen mit dem öffentlichen Schlüssel nicht entschlüsselt werden können, bedeutet dies, dass die Komponente die Berechnung ausführt, ohne die Werte der Summanden zu kennen.
    Der erste verschlüsselte Summand muss am Eingang 'M' angegeben werden, der zweite verschlüsselte Summand am entsprechend benannten weiteren BigInteger-Eingang der Komponente.
    <newline /><newline />
    In der Betriebsart 'Multiplikation' multipliziert die Komponente eine verschlüsselte Zahl mit einer unverschlüsselten Zahl und gibt das Ergebnis in verschlüsselter Form am BigInteger-Ausgang aus.
    Es wird wiederum nur der öffentliche Schlüssel benötigt. Die verschlüsselte Zahl muss am Eingang 'M' anliegen, die unverschlüsselte am anderen BigInteger-Eingang.
  </usage>
  <presentation lang="en"></presentation>
  <presentation lang="de-DE"></presentation>
  <references>
    <linkReference id="autokey">
      <link lang="en" url="http://en.wikipedia.org/wiki/Paillier_cryptosystem" />
      <caption lang="en">Paillier cryptosystem</caption>
      <link lang="de-DE" url="http://de.wikipedia.org/wiki/Paillier-Kryptosystem" />
      <caption lang="de-DE">Paillier-Kryptosystem</caption>
    </linkReference>
  </references>
</documentation>