<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PluginCaption" xml:space="preserve">
    <value>平等游戏</value>
  </data>
  <data name="PluginTooltip" xml:space="preserve">
    <value>经典二字替换密码</value>
  </data>
  <data name="InputStringCaption" xml:space="preserve">
    <value>文字输入</value>
  </data>
  <data name="InputStringTooltip" xml:space="preserve">
    <value>输入要由Playfair密码处理的字符串</value>
  </data>
  <data name="PreFormatedInputStringCaption" xml:space="preserve">
    <value>预格式化的输入字符串</value>
  </data>
  <data name="PreFormatedInputStringTooltip" xml:space="preserve">
    <value>如果启用了预格式化文本选项，则输入字符串仅限于所用键中包含的字符。</value>
  </data>
  <data name="OutputStringCaption" xml:space="preserve">
    <value>文字输出</value>
  </data>
  <data name="OutputStringTooltip" xml:space="preserve">
    <value>使用Playfair密码处理后的字符串</value>
  </data>
  <data name="ActionCaption" xml:space="preserve">
    <value>行动</value>
  </data>
  <data name="ActionTooltip" xml:space="preserve">
    <value>选择算法动作</value>
  </data>
  <data name="AlphabetMatrixCaption" xml:space="preserve">
    <value>键</value>
  </data>
  <data name="AlphabetMatrixTooltip" xml:space="preserve">
    <value>这是用于加密/解密的密钥。</value>
  </data>
  <data name="IgnoreDuplicatesCaption" xml:space="preserve">
    <value>忽略重复</value>
  </data>
  <data name="IgnoreDuplicatesTooltip" xml:space="preserve">
    <value>忽略关键字中的重复项</value>
  </data>
  <data name="KeyCaption" xml:space="preserve">
    <value>关键短语</value>
  </data>
  <data name="KeyTooltip" xml:space="preserve">
    <value>这是从中派生密钥的关键词。</value>
  </data>
  <data name="MatrixSizeCaption" xml:space="preserve">
    <value>矩阵大小</value>
  </data>
  <data name="MatrixSizeTooltip" xml:space="preserve">
    <value>选择Playfair应使用5x5还是6x6矩阵运行</value>
  </data>
  <data name="PreFormatTextCaption" xml:space="preserve">
    <value>预格式化文本</value>
  </data>
  <data name="PreFormatTextTooltip" xml:space="preserve">
    <value>此选项用于确定是否将文本限制为已使用键中包含的字符。</value>
  </data>
  <data name="SeparatorCaption" xml:space="preserve">
    <value>分隔器</value>
  </data>
  <data name="SeparatorTooltip" xml:space="preserve">
    <value>输入字符以分隔成对的相同字母</value>
  </data>
  <data name="SeparatorReplacementCaption" xml:space="preserve">
    <value>分离器更换</value>
  </data>
  <data name="SeparatorReplacementTooltip" xml:space="preserve">
    <value>输入字符以分隔双倍分隔符。例如，双XX将通过插入Y分开</value>
  </data>
  <data name="SeparatePairsCaption" xml:space="preserve">
    <value>分开的对</value>
  </data>
  <data name="SeparatePairsTooltip" xml:space="preserve">
    <value>成对的相同字母</value>
  </data>
  <data name="SeparatePairsTPCaption" xml:space="preserve">
    <value>分开的对</value>
  </data>
  <data name="SeparatePairsTPTooltip" xml:space="preserve">
    <value>成对的相同字母</value>
  </data>
  <data name="ActionList1" xml:space="preserve">
    <value>加密</value>
  </data>
  <data name="ActionList2" xml:space="preserve">
    <value>解密</value>
  </data>
  <data name="IgnoreDuplicatesList1" xml:space="preserve">
    <value>忽略关键字中的重复项</value>
  </data>
  <data name="PreFormatTextList1" xml:space="preserve">
    <value>预格式化文本</value>
  </data>
  <data name="SeparatePairsList1" xml:space="preserve">
    <value>成对的相同字母</value>
  </data>
  <data name="MatrixSizeList1" xml:space="preserve">
    <value>5 x 5</value>
  </data>
  <data name="MatrixSizeList2" xml:space="preserve">
    <value>6 x 6</value>
  </data>
</root>