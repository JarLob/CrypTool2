<?xml version="1.0" encoding="utf-8"?>
<!-- You can edit this file manually or with the Util/CrypDocumentationEditor -->
<documentation>
  <language culture="en" />
  <language culture="ru" />
  <language culture="de-DE" />
  <introduction lang="en">
    The Oblivious Transfer Protocol is an important cryptographic primitive. It was introduced by Michael O. Rabin in 1981.
    It describes how a sender (Alice) can send some information to a receiver (Bob), but still remain oblivious as to what information was sent.
    <newline /><newline />
    The Oblivious Transfer Protocol implemented by CrypTool can be described like this:
    Alice has a database of messages. Bob wants to retrieve one of the entries, but doesn't want Alice to know, which entry he requested.
    Alice is prepared to send the requested entry to Bob, but she doesn't want Bob to get more than this one entry per request.
    <newline /><newline />
    The Oblivious Transfer Protocol meets these requirements. It requires Alice to supply the keys for an RSA encryption. Alice and Bob follow these steps:

    <list><item><b>Step 1:</b>
        Alice creates a list x of random numbers.
        The list must have the same number of entries as the database and the numbers must be smaller than the modulus N of the RSA key. Alice sends x to Bob.
      </item><item><b>Step 2:</b>
        Bob chooses the index i, which is the index of the database entry he wants to request from Alice.
        He generates a random number k that serves to blind the index i for Alice: He calculates v = x[i] + encode(k) with Alice's public key and sends it to Alice.
      </item><item><b>Step 3:</b>
        For each entry m[j] in her database, Alice calculates the value m[j] + decode(v-x[j]) using her private key and sends the resulting list to Bob.
        For entry number i, this evaluates to m[i]+k, but as Alice doesn't know k, she can't tell which entry that is.
      </item><item><b>Step 4:</b>
        Bob receives Alice's list and selects entry i, which is m[i]+k. He subtracts k and is left with m[i], the entry of Alice's database that he requested.
        Without the private key, Bob can't reconstruct any other values of Alice's list.
      </item></list><newline />
    This component implements actions of Alice.
  </introduction>
  <introduction lang="ru">Протокол незабываемого перевода является важным криптографическим примитивом. Он был представлен Майклом О. Рабином в 1981 году. В нем описывается, как отправитель (Алиса) может отправить некоторую информацию получателю (Бобу), но все равно не замечает, какая информация была отправлена. Протокол Oblivious Transfer, реализованный CrypTool, может быть описан следующим образом: у Алисы есть база данных сообщений. Боб хочет получить одну из записей, но не хочет, чтобы Алиса знала, какую запись он запросил. Алиса готова отправить запрошенную запись Бобу, но она не хочет, чтобы Боб получил больше одной записи за запрос. Протокол «Забытый перевод» отвечает этим требованиям. Это требует, чтобы Алиса предоставляла ключи для шифрования RSA. Алиса и Боб выполните следующие шаги: Шаг 1: Алиса создает список х случайных чисел. Список должен иметь такое же количество записей, что и база данных, а числа должны быть меньше, чем модуль N ключа RSA. Алиса отправляет x Бобу. Шаг 2: Боб выбирает индекс i, который является индексом записи базы данных, которую он хочет запросить у Алисы. Он генерирует случайное число k, которое служит для слепого индекса i для Алисы: он вычисляет v = x [i] + encode (k) с открытым ключом Алисы и отправляет его Алисе. Шаг 3: Для каждой записи m [j] в своей базе данных Алиса вычисляет значение m [j] + decode (vx [j]) с помощью своего закрытого ключа и отправляет полученный список Бобу. Для входного номера i это оценивается как m [i] + k, но, поскольку Алиса не знает k, она не может определить, какая запись. Шаг 4: Боб получает список Алисы и выбирает запись i, которая является m [i] + k. Он вычитает k и остается с m [i], входом в базу данных Алисы, которую он запросил. Без частного ключа Боб не может восстановить любые другие значения списка Алисы. Этот компонент реализует действия Алисы.</introduction>
  <introduction lang="de-DE">
    Das Oblivious Transfer-Protokoll ist ein kryptographisches Protokoll, das 1981 von Michael O. Rabin vorgeschlagen wurde.
    Es beschreibt, wie ein Sender (Alice) eine Information an einen Empfänger (Bob) schicken kann, bei dem dem Sender verborgen bleibt, welche Information geschickt wurde.
    <newline /><newline />
    Das in CrypTool implementierte Oblivious Transfer-Protokoll kann folgendermaßen beschrieben werden:
    Alice hat eine Sammlung von Nachrichten. Bob will eine dieser Nachrichten von Alice erhalten, aber er will nicht, dass Alice erfährt, welche der Nachrichten er angefragt hat.
    Alice ist bereit, Bob die gewünschte Nachricht zu schicken, aber sie will vermeiden, dass Bob bei seiner Anfrage Informationen über die übrigen Nachrichten erhält.
    <newline /><newline />
    Das Oblivious Transfer-Protokoll erfüllt diese Anforderungen. Alice muss dazu einen RSA-Schlüssel generieren. Alice und Bob befolgen dann diese Schritte:

    <list><item><b>Schritt 1:</b>
        Alice erzeugt eine Liste x von Zufallszahlen.
        Die Anzahl der Zufallszahlen muss der Anzahl der von Alice vorgehaltenen Nachrichten entsprechen.
        Außerdem muss jede der Zahlen kleiner als der Modulus N von Alices RSA-Schlüssel sein. Alice schickt diese Liste dann an Bob.
      </item><item><b>Schritt 2:</b>
        Bob wählt einen Index i, der angibt, welche Nachricht er von Alice erhalten möchte.
        Er erzeugt eine Zufallszahl k, die zur Verschleierung des Indexes dient: Er berechnet v = x[i] + encode(k) mit Alices öffentlichem Schlüssel und schickt v an Alice.
      </item><item><b>Schritt 3:</b>
        Für jede ihrer Nachrichten m[j] berechnet Alice den Wert m[j] + decode(v-x[j]) unter Verwendung ihres privaten RSA-Schlüssels und schickt die resultierenden Werte an Bob.
        Für den i-ten Eintrag ergibt dies gerade m[i]+k, aber da Alice k nicht kennt, weiß sie nicht, um welchen Eintrag es sich handelt.
      </item><item><b>Schritt 4:</b>
        Bob empfängt Alices Liste und wählt den i-ten Eintrag, m[i]+k. Er subtrahiert k und erhält mit m[i] die von ihm angefragte Nachricht.
        Da er Alices privaten Schlüssel nicht kennt, kann Bob keine weiteren Nachrichten aus Alices Liste rekonstruieren.
      </item></list><newline />
    Diese Komponente implementiert Aktionen von Alice.
  </introduction>
  <usage lang="en">
    Enter Alice's private RSA key at the inputs "N" and "d".
    On input "x", Alice must enter the list of random numbers, that she has generated, as an array of BigInteger numbers.
    On the input "Messages", the message database must be provided as an array of strings.
    Alice receives the value v, that represents the encrypted request Bob has generated in step 2, on the input "v".
    From the given inputs, the component calculates a list of BigIneger values, that represent the encrypted messages and sends it to the output "Encrypted messages", where Bob can access it.
    Of this list, Bob can only decrypt the entry that was requested by him.
  </usage>
  <usage lang="ru">Введите закрытый ключ RSA Алисы на входах «N» и «d». На входе «x» Алиса должна ввести список случайных чисел, которые она сгенерировала, в виде массива чисел BigInteger. На вкладке «Сообщения» база данных сообщений должна быть представлена ​​как массив строк. Алиса получает значение v, которое представляет зашифрованный запрос, который Боб сформировал на шаге 2, на входе «v». Из данных входов компонент вычисляет список значений BigIneger, которые представляют зашифрованные сообщения и отправляет их на выход «Зашифрованные сообщения», где Боб может получить к нему доступ. Из этого списка Боб может только расшифровать запись, запрошенную им.</usage>
  <usage lang="de-DE">
    Geben Sie an den Eingängen "N" und "d" den von Alice generierten privaten RSA-Schlüssel an.
    Am Eingang "x" muss Alice die Liste der von ihr erstellten Zufallszahlen eingeben. Die Liste wird als ein Array von BigInteger-Zahlen erwartet.
    Die Liste der von Alice vorgehaltenen Nachrichten muss am Eingang "Nachrichten" als ein Array von Zeichenketten anliegen.
    Am Eingang "v" erhält Alice den von Bob im Schritt 2 erzeugten Wert v, der Bobs verschleierte Anfrage darstellt.
    Die Komponente berechnet aus den Eingaben eine Liste von BigInteger-Zahlen, die die verschlüsselten Nachrichten darstellen und schickt diese Liste
    über den Ausgang der Komponente an Bob. Bob kann von diesen Werten nur den von ihm angefragten Wert entschlüsseln.
  </usage>
  <presentation lang="en"></presentation>
  <presentation lang="de-DE"></presentation>
  <references>
    <linkReference>
      <link url="http://en.wikipedia.org/wiki/Oblivious_transfer" lang="en" />
      <caption lang="en">Oblivious transfer (Wikipedia)</caption>
      <link url="http://en.wikipedia.org/wiki/Oblivious_transfer" lang="de" />
      <caption lang="de">Oblivious Transfer (Wikipedia, englisch)</caption>
    </linkReference>
    <linkReference>
      <link url="http://bezadis.ics.upjs.sk/old/CryptoSymposium/files/paper9.pdf" lang="en" />
      <caption lang="en">Oblivious transfer 1-n (PDF)</caption>
      <link url="http://bezadis.ics.upjs.sk/old/CryptoSymposium/files/paper9.pdf" lang="de" />
      <caption lang="de">Oblivious Transfer 1-n (PDF, englisch)</caption>
    </linkReference>
  </references>
</documentation>