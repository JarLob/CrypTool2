<?xml version="1.0" encoding="utf-8"?>
<documentation>
  <language culture="en" />
  <language culture="de-DE" />
  <introduction lang="en">CRC (Cyclic Redundancy Check) is 
an algorithm 
to detect integrity errors after data transmission or storage, similar to a checksum. It is based on the polynomial division of binary numbers by a so called generator polynomial. CRC detects unintentional bit changes caused e.g. by noise, but does not protect against intentional manipulation at all. The number of detectable bit errors depends on the size of the polynomial and the resulting size of the check value.
</introduction>
  <introduction lang="de-DE">CRC (Cyclic Redundancy Check, <i>dt.</i> zyklische Redundanzprüfung) ist ein Algorithmus
 zur Erkennung von Integritätsfehlern nach der Übertragung oder dem Speichern von Daten, ähnlich wie eine Prüfsumme. Es basiert auf der Polynomdivision im Dualsystem mit einem so genannten Generatorpolynom. CRC erkennt zufällige Bitänderungen, die etwa durch Rauschen verursacht werden, aber schützt nicht vor absichtlicher Manipulation. The Zahl der erkennbaren Bitfehler hängt von der Größe des Polynoms und der damit verbundenen Größe des Prüfwerts ab.
</introduction>
  <usage lang="en">The current implementation uses CRC-32 with generator polynomial 0x04C11DB7, takes input data of any size and outputs a 4 bytes check value.
</usage>
  <usage lang="de-DE">Die aktuelle Implementierung verwendet CRC-32 mit dem Generatorpolynom 0x04C11DB7, liest Eingabedaten beliebiger Länge und gibt den 4 Bytes großen Prüfwert aus.
</usage>
  <presentation lang="en">
</presentation>
  <presentation lang="de-DE">
</presentation>
  <references>
  </references>
</documentation>