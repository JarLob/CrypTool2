<?xml version="1.0" encoding="utf-8"?>
<!-- You can edit this file manually or with the Util/CrypDocumentationEditor -->
<documentation>
  <language culture="en" />
  <language culture="zh-CN" />
  <language culture="ru" />
  <language culture="de-DE" />
  <introduction lang="en">
    Keccak was selected as the winner of the NIST <i>cryptographic hash algorithm competition</i> in 2012. The competition was held to develop the third generation of the <i>Secure Hash Algorithm</i> (SHA-3). Keccak was developed by Guido Bertoni, Joan Daemen, Michael Peeters and Gilles Van Assche. Apart from a hash function, the design of its construction enables Keccak to be utilized as further cryptographic primitives, like a keystream generator for a stream cipher or as a pseudorandom number generator (examples can be found in the <b>Templates</b> section). As such, the description of the component avoids the terms <i>message</i> and <i>hash value</i> and uses the terms <i>input</i> and <i>output</i>.
	</introduction>
  <introduction lang="zh-CN">Keccak被选为2012年NIST密码哈希算法竞赛的获胜者。竞赛旨在开发第三代安全哈希算法（SHA-3）。 Keccak由Guido Bertoni，Joan Daemen，Michael Peeters和Gilles Van Assche共同开发。除散列函数外，其构造设计还使Keccak可用作其他加密原语，例如用于流密码的密钥流生成器或用作伪随机数生成器（示例可在“模板”部分中找到）。这样，组件的描述避免了术语消息和哈希值，而使用了术语输入和输出。</introduction>
  <introduction lang="ru">В 2012 году Keccak был выбран победителем конкурса алгоритмов криптографического хеш-теста NIST. Конкурс проводился для разработки третьего поколения алгоритма Secure Hash Algorithm (SHA-3). Keccak был разработан Гвидо Бертони, Джоан Даемен, Майкл Петерс и Жиль Ван Асс. Помимо хеш-функции, конструкция его конструкции позволяет использовать Keccak в качестве дополнительных криптографических примитивов, таких как генератор ключей для шифрования потока или как генератор псевдослучайных чисел (примеры можно найти в разделе «Шаблоны»). Таким образом, описание компонента позволяет избежать сообщения условий и хеш-значения и использует термины ввода и вывода.</introduction>
  <introduction lang="de-DE">
	Keccak wurde 2012 als Gewinner der <i>Cryptographic Hash Algorithm Competition</i> des NIST ausgewählt. Der Wettbewerb wurde ausgetragen, um die dritte Generation des <i>Secure Hash Algorithm</i> (SHA-3) zu bestimmen. Keccak wurde von Guido Bertoni, Joan Daemen, Michael Peeters und Gilles Van Assche entwickelt. Neben dem Einsatz als Hash-Funktion kann Keccak aufgrund seines Designs auch in anderen kryptographischen Anwendungen eingesetzt werden, wie etwa als Schlüsselstrom-Generator für eine Stromchiffre oder als Pseudozufallszahlengenerator (Beispiele finden Sie im Abschnitt <b>Vorlagen</b>). Die Beschreibung der Komponente verwendet daher die Begriffe <i>Eingabe</i> und <i>Ausgabe</i> statt <i>Nachricht</i> und <i>Hashwert</i>.
	</introduction>
  <usage lang="en">
    <section headline="Input and Output">
		The Keccak component has one input and two outputs, all of the type <i>ICrypToolStream</i>. The output <i>Debug output stream</i> is an optional output which displays information about the internal Keccak process.
		<newline />
		The two other connectors (<i>Input stream</i> and <i>Output stream</i>) must be connected for the component to work properly. They both can be connected to other components which support the <i>ICrypToolStream</i> or a connector of the type <i>Byte[]</i> (Byte Array), <i>String</i> or <i>Object</i>. Refer to the <b>Templates</b> section for examples.
		</section>
    <section headline="Parameters">
		The parameters of the Keccak function can be customized in the parameter panel. The user can choose between four SHA-3 functions of Keccak (<i>SHA3-224</i>, <i>SHA3-256</i>, <i>SHA3-384</i>, <i>SHA3-512</i>) which apply the parameters as proposed by the Keccak developers in [1] (see <b>References</b> section). Additionally, the user can tweak Keccak manually by selecting the function <i>Keccak</i>. This version enables customizing the <i>state size</i>, <i>output length</i>, <i>bit rate</i> and <i>capacity</i>. These parameters have the following meaning:<newline /><list><item><b>State size:</b> Size of the internal state of Keccak in bit. The state size is the sum of bit rate and capacity. When increasing the bit rate size, the capacity size must – if the state size does not change – be decreased and vice versa.</item><item><b>Output length:</b> The length of the produced output in bit.</item><item><b>Bit rate:</b> The size of the bit rate in bit. The bit rate defines the size of the input blocks in which the input is divided. Each input block is XORed on the bit rate part of the state. The greater this part is, the fewer input blocks must be processed. The bit rate size thus determines the speed of Keccak.</item><item><b>Capacity:</b> The size of the capacity in bit. The capacity determines the size of the state part which is not modified by the input blocks. The capacity size thus determines the security of Keccak. In [2] (see <b>References</b> section), it is proven that Keccak resists any attack up to 2^(c/2) Keccak computations.</item></list></section>
  </usage>
  <usage lang="zh-CN">Keccak组件具有一个输入和两个输出，所有类型均为ICrypToolStream。输出Debug输出流是可选输出，显示有关内部Keccak进程的信息。必须连接其他两个连接器（输入流和输出流），组件才能正常工作。它们都可以连接到其他支持ICrypToolStream的组件或Byte []（字节数组），String或Object类型的连接器。有关示例，请参阅模板部分。 Keccak功能的参数可以在参数面板中自定义。用户可以选择Keccak的四个SHA-3功能（SHA3-224，SHA3-256，SHA3-384，SHA3-512），这些功能应用Keccak开发人员在[1]中提出的参数（请参见参考资料部分）。另外，用户可以通过选择功能Keccak手动调整Keccak。此版本可自定义状态大小，输出长度，比特率和容量。这些参数的含义如下：状态大小：Keccak内部状态的大小（以位为单位）。状态大小是比特率和容量的总和。当增加比特率大小时，如果状态大小不变，则必须减小容量大小，反之亦然。输出长度：产生的输出长度（以比特为单位）。比特率：比特率的大小（以比特为单位）。比特率定义了输入被分割的输入块的大小。每个输入块在状态的比特率部分进行异或。该部分越大，必须处理的输入块就越少。因此，比特率大小决定了Keccak的速度。容量：以比特为单位的容量大小。容量确定状态部分的大小，该状态部分不会被输入块修改。因此，容量大小决定了Keccak的安全性。在[2]中（请参见参考资料部分），证明了Keccak可以抵抗2 ^（c / 2）Keccak计算的任何攻击。</usage>
  <usage lang="ru">Компонент Keccak имеет один вход и два выхода, все типа ICrypToolStream. Выходной поток вывода Debug является дополнительным выходом, который отображает информацию о внутреннем процессе Keccak. Два других разъема (входной поток и выходной поток) должны быть подключены для правильной работы компонента. Оба они могут быть подключены к другим компонентам, которые поддерживают ICrypToolStream или соединитель типа Byte [] (Byte Array), String или Object. Примеры см. В разделе «Шаблоны». Параметры функции Keccak можно настроить на панели параметров. Пользователь может выбирать между четырьмя функциями SHA-3 Keccak (SHA3-224, SHA3-256, SHA3-384, SHA3-512), которые применяют параметры, предложенные разработчиками Keccak в [1] (см. Раздел «Ссылки»). Кроме того, пользователь может настроить Keccak вручную, выбрав функцию Keccak. Эта версия позволяет настраивать размер, длину вывода, скорость передачи и емкость. Эти параметры имеют следующее значение: Размер штата: Размер внутреннего состояния Keccak в бит. Размер штата - это сумма битовой скорости и емкости. При увеличении размера битовой скорости размер емкости должен - если размер состояния не изменяется - уменьшаться и наоборот. Длина вывода: длина производимого выхода в бит.Bit rate: размер битовой скорости в бит. Битовая скорость определяет размер входных блоков, в которых вход делится. Каждый входной блок является XORed в части скорости передачи бит состояния. Чем больше эта часть, тем меньше блоков ввода должно быть обработано. Размер битовой скорости определяет скорость Keccak.Capacity: размер емкости в бит. Емкость определяет размер государственной части, которая не изменяется входными блоками. Таким образом, размер емкости определяет безопасность Keccak. В [2] (см. Раздел «Ссылки») доказано, что Keccak сопротивляется любой атаке до 2 ^ (c / 2) вычислений Keccak.</usage>
  <usage lang="de-DE">
    <section headline="Eingabe und Ausgabe">
		Die Keccak-Komponente hat einen Eingabe-Konnektor und zwei Ausgabe-Konnektoren, alle vom Typ <i>ICrypToolStream</i>. Die Ausgabe <i>Debug-Ausgabestrom</i> ist optional und zeigt Informationen über den Keccak-Prozess an.
		<newline />
		Die beiden anderen Konnektoren (<i>Eingabestrom</i> und <i>Ausgabestrom</i>) müssen mit anderen Komponenten verbunden sein, damit die Komponente ordnungsgemäß arbeitet. Beide Anschlüsse können mit anderen Komponenten verbunden werden, deren Konnektoren entweder vom Typ <i>ICrypToolStream</i> oder vom Typ <i>Byte[]</i> (Byte Array), <i>String</i> oder <i>Object</i> sind. Im Abschnitt <b>Vorlagen</b> finden Sie Beispiele für die Kopplung der Keccak-Komponente mit anderen Komponenten.
		</section>
    <section headline="Parameter">
		Die Parameter des Keccak-Algorithmus können im Parameterfenster eingestellt werden: Sie können zwischen den vier SHA-3-Funktionen von Keccak wählen (<i>SHA3-224</i>, <i>SHA3-256</i>, <i>SHA3-384</i>, <i>SHA3-512</i>), in denen die Parameter nach den Empfehlungen der Keccak-Entwickler [1] (siehe Abschnitt <b>Referenzen</b>) eingstellt sind. Zusätzlich können Sie die Funktion <i>Keccak</i> auswählen, bei der Sie die Parameter manuell einstellen können. Diese Version ermöglicht es, die Parameter <i>State-Größe</i>, <i>Ausgabelänge</i>, <i>Bit-Rate</i> und <i>Capacity</i> zu konfigurieren. Diese Parameter haben folgende Bedeutungen:<newline /><list><item><b>State-Größe:</b> Größe des internen Keccak-States in Bit. Die State-Größe ist die Summe aus Bit-Rate und Capacity. Wenn Sie die Bit-Rate vergrößern, muss – bei gleicher State-Größe – die Capacity verkleinert werden. Andersherum ist es genauso.</item><item><b>Ausgabelänge:</b> Die Länge der erzeugten Ausgabe.</item><item><b>Bit-Rate:</b> Die Größe der Bit-Rate in Bit. Die Bit-Rate bestimmt die Größe der Eingabeblöcke, in welche die Eingabe geteilt wird. Jeder Eingabeblock wird auf den Bit-Rate-Anteil des States geXORed. Je größer dieser Anteil ist, desto weniger Eingabeblöcke müssen insgesamt verarbeitet werden. Daher wird durch die Bit-Rate-Größe die Geschwindigkeit von Keccak bestimmt.</item><item><b>Capacity:</b> Die Größe der Capacity in Bit. Die Capacity bestimmt die Größe des State-Anteils, der nicht durch die Eingabeblöcke verändert wird. Die Capacity-Größe bestimmt die Sicherheit von Keccak. In [2] (siehe Abschnitt <b>Referenzen</b>) wird gezeigt, dass Keccak gegen jeden Angriff, der nicht mehr als 2^(c/2) Keccak-Ausführungen durchführt, resistent ist.</item></list></section>
  </usage>
  <presentation lang="en">
	By double-clicking on the icon of the Keccak component in the CrypTool 2 window, the user can enable the visualization of the Keccak function. In this view, the user can run Keccak step by step and watch the internal functionalities of Keccak.
	<newline />
	The presentation shows the absorbing phase, the squeezing phase and the five step mappings theta, rho, pi, chi and iota.
	</presentation>
  <presentation lang="zh-CN">通过在CrypTool 2窗口中双击Keccak组件的图标，用户可以启用Keccak功能的可视化。在此视图中，用户可以逐步运行Keccak，并观察Keccak的内部功能。演示显示了吸收阶段，压缩阶段以及五个步骤映射theta，rho，pi，chi和iota。</presentation>
  <presentation lang="ru">Дважды щелкнув по значку компонента Keccak в окне CrypTool 2, пользователь может включить визуализацию функции Keccak. В этом представлении пользователь может запускать Keccak шаг за шагом и наблюдать за внутренними функциями Keccak. Презентация показывает поглощающую фазу, фазу сжатия и пятиэтапные отображения тета, rho, pi, chi и iota.</presentation>
  <presentation lang="de-DE">
	Durch Doppelklick auf die Keccak-Komponente im CrypTool 2-Fenster können Sie die Visualisierung des Keccak-Algorithmus aktivieren. In dieser Ansicht können Sie Keccak Schritt für Schritt ausführen und die Arbeitsweise von Keccak nachvollziehen. 
	<newline />
	Die Präsentation zeigt die Absorbing-Phase, die Squeezing-Phase und die fünf Step-Mappings Theta, Rho, Pi, Chi und Iota.
	</presentation>
  <references>
    <linkReference>
      <link url="http://keccak.noekeon.org/Keccak-submission-3.pdf" lang="en" />
      <caption lang="en">The Keccak SHA-3 submission. Accessed 25-03-2013</caption>
      <link url="http://keccak.noekeon.org/Keccak-submission-3.pdf" lang="de-DE" />
      <caption lang="de-DE">The Keccak SHA-3 submission. Aufgerufen am 25-03-2013</caption>
    </linkReference>
    <linkReference>
      <link url="http://sponge.noekeon.org/CSF-0.1.pdf" lang="en" />
      <caption lang="en">Cryptographic sponge functions. Accessed 25-03-2013</caption>
      <link url="http://sponge.noekeon.org/CSF-0.1.pdf" lang="de-DE" />
      <caption lang="de-DE">Cryptographic sponge functions. Aufgerufen am 25-03-2013</caption>
    </linkReference>
  </references>
</documentation>