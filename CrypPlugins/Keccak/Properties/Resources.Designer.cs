//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.18033
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Keccak.Properties {
    using System;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Keccak.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap blankPage {
            get {
                object obj = ResourceManager.GetObject("blankPage", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Capacity ähnelt.
        /// </summary>
        internal static string CapacityCaption {
            get {
                return ResourceManager.GetString("CapacityCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Size of capacity in bit ähnelt.
        /// </summary>
        internal static string CapacityTooltip {
            get {
                return ResourceManager.GetString("CapacityTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap chi_modified_row_front {
            get {
                object obj = ResourceManager.GetObject("chi_modified_row_front", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap chi_modified_row_side {
            get {
                object obj = ResourceManager.GetObject("chi_modified_row_side", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap chi_modified_row_top {
            get {
                object obj = ResourceManager.GetObject("chi_modified_row_top", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap chi_step_detail {
            get {
                object obj = ResourceManager.GetObject("chi_step_detail", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap cube_4z {
            get {
                object obj = ResourceManager.GetObject("cube_4z", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap cube_default {
            get {
                object obj = ResourceManager.GetObject("cube_default", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap cube_default_bottom {
            get {
                object obj = ResourceManager.GetObject("cube_default_bottom", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap cube_default_inner {
            get {
                object obj = ResourceManager.GetObject("cube_default_inner", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap cube_default_inner2 {
            get {
                object obj = ResourceManager.GetObject("cube_default_inner2", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Output stream for debug information ähnelt.
        /// </summary>
        internal static string DebugDataStreamTooltip {
            get {
                return ResourceManager.GetString("DebugDataStreamTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Debug output stream ähnelt.
        /// </summary>
        internal static string DebugStreamCaption {
            get {
                return ResourceManager.GetString("DebugStreamCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap execution {
            get {
                object obj = ResourceManager.GetObject("execution", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap firstPage {
            get {
                object obj = ResourceManager.GetObject("firstPage", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Input data to be hashed ähnelt.
        /// </summary>
        internal static string InputDataStreamTooltip {
            get {
                return ResourceManager.GetString("InputDataStreamTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Input stream ähnelt.
        /// </summary>
        internal static string InputStreamCaption {
            get {
                return ResourceManager.GetString("InputStreamCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap introduction {
            get {
                object obj = ResourceManager.GetObject("introduction", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap iota_step_detail_table {
            get {
                object obj = ResourceManager.GetObject("iota_step_detail_table", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap iota_step_detail_table1 {
            get {
                object obj = ResourceManager.GetObject("iota_step_detail_table1", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap keccakf_detail_chi {
            get {
                object obj = ResourceManager.GetObject("keccakf_detail_chi", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap keccakf_detail_iota {
            get {
                object obj = ResourceManager.GetObject("keccakf_detail_iota", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap keccakf_detail_pi {
            get {
                object obj = ResourceManager.GetObject("keccakf_detail_pi", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap keccakf_detail_rho {
            get {
                object obj = ResourceManager.GetObject("keccakf_detail_rho", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap keccakf_detail_theta {
            get {
                object obj = ResourceManager.GetObject("keccakf_detail_theta", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Keccak version ähnelt.
        /// </summary>
        internal static string KECCAKFunctionCaption {
            get {
                return ResourceManager.GetString("KECCAKFunctionCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Keccak ähnelt.
        /// </summary>
        internal static string KeccakFunctionList1 {
            get {
                return ResourceManager.GetString("KeccakFunctionList1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SHA3-224 ähnelt.
        /// </summary>
        internal static string KeccakFunctionList2 {
            get {
                return ResourceManager.GetString("KeccakFunctionList2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SHA3-256 ähnelt.
        /// </summary>
        internal static string KeccakFunctionList3 {
            get {
                return ResourceManager.GetString("KeccakFunctionList3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SHA3-384 ähnelt.
        /// </summary>
        internal static string KeccakFunctionList4 {
            get {
                return ResourceManager.GetString("KeccakFunctionList4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SHA3-512 ähnelt.
        /// </summary>
        internal static string KeccakFunctionList5 {
            get {
                return ResourceManager.GetString("KeccakFunctionList5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select the version of Keccak ähnelt.
        /// </summary>
        internal static string KECCAKFunctionTooltip {
            get {
                return ResourceManager.GetString("KECCAKFunctionTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Adjust manually ähnelt.
        /// </summary>
        internal static string ManualSettingsCaption {
            get {
                return ResourceManager.GetString("ManualSettingsCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Specify the Keccak parameters manually ähnelt.
        /// </summary>
        internal static string ManualSettingsTooltip {
            get {
                return ResourceManager.GetString("ManualSettingsTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Output data ähnelt.
        /// </summary>
        internal static string OutputDataStreamTooltip {
            get {
                return ResourceManager.GetString("OutputDataStreamTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Output length ähnelt.
        /// </summary>
        internal static string OutputLengthCaption {
            get {
                return ResourceManager.GetString("OutputLengthCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Size of output length in bit (must be divisible by 8) ähnelt.
        /// </summary>
        internal static string OutputLengthTooltip {
            get {
                return ResourceManager.GetString("OutputLengthTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Output length must be divisible by 8. ähnelt.
        /// </summary>
        internal static string OutputMatchError {
            get {
                return ResourceManager.GetString("OutputMatchError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Output stream ähnelt.
        /// </summary>
        internal static string OutputStreamCaption {
            get {
                return ResourceManager.GetString("OutputStreamCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Output too long. It will be truncated to 174,760 bit. ähnelt.
        /// </summary>
        internal static string OutputTooLongWarning {
            get {
                return ResourceManager.GetString("OutputTooLongWarning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Parameters ähnelt.
        /// </summary>
        internal static string ParametersCaption {
            get {
                return ResourceManager.GetString("ParametersCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap pi_cube_1 {
            get {
                object obj = ResourceManager.GetObject("pi_cube_1", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap pi_cube_2 {
            get {
                object obj = ResourceManager.GetObject("pi_cube_2", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap pi_cube_3 {
            get {
                object obj = ResourceManager.GetObject("pi_cube_3", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap pi_cube_4 {
            get {
                object obj = ResourceManager.GetObject("pi_cube_4", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap pi_cube_5 {
            get {
                object obj = ResourceManager.GetObject("pi_cube_5", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap pi_cube_6 {
            get {
                object obj = ResourceManager.GetObject("pi_cube_6", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap pi_detailed_1 {
            get {
                object obj = ResourceManager.GetObject("pi_detailed_1", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap pi_detailed_2 {
            get {
                object obj = ResourceManager.GetObject("pi_detailed_2", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap pi_detailed_3 {
            get {
                object obj = ResourceManager.GetObject("pi_detailed_3", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap pi_detailed_4 {
            get {
                object obj = ResourceManager.GetObject("pi_detailed_4", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap pi_detailed_5 {
            get {
                object obj = ResourceManager.GetObject("pi_detailed_5", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap pi_detailed_6 {
            get {
                object obj = ResourceManager.GetObject("pi_detailed_6", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Keccak ähnelt.
        /// </summary>
        internal static string PluginCaption {
            get {
                return ResourceManager.GetString("PluginCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Keccak algorithm ähnelt.
        /// </summary>
        internal static string PluginDescription {
            get {
                return ResourceManager.GetString("PluginDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Absorbing Phase ähnelt.
        /// </summary>
        internal static string PresAbsorbingPhase {
            get {
                return ResourceManager.GetString("PresAbsorbingPhase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Input block #{0} is XORed on the state. When examining the state before and after the absorbtion it can be observed that the capacity part (the lower part of the state) is unmodified. ähnelt.
        /// </summary>
        internal static string PresAbsorbingPhaseExplanation {
            get {
                return ResourceManager.GetString("PresAbsorbingPhaseExplanation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Every block p of the padded input is absorbed by the sponge state with an XOR operation. The input blocks affect the {0} bits of the r-bit part. The c-bit part is not affected. After the absorbtion the Keccak permutation (Keccak-f) is executed to diffuse the state bits. ähnelt.
        /// </summary>
        internal static string PresAbsorbingPhaseText {
            get {
                return ResourceManager.GetString("PresAbsorbingPhaseText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Autorun ähnelt.
        /// </summary>
        internal static string PresAutorun {
            get {
                return ResourceManager.GetString("PresAutorun", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Speed ähnelt.
        /// </summary>
        internal static string PresAutorunSpeed {
            get {
                return ResourceManager.GetString("PresAutorunSpeed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Chi iterates over each row of the state. ähnelt.
        /// </summary>
        internal static string PresChiPhaseText {
            get {
                return ResourceManager.GetString("PresChiPhaseText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Each bit of a row is XORed with the logical conjunction of the two bits to the right of the considered bit. The first bit of those two bits is inverted before the logical conjunction. ähnelt.
        /// </summary>
        internal static string PresChiStepText {
            get {
                return ResourceManager.GetString("PresChiStepText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Enable presentation ähnelt.
        /// </summary>
        internal static string PresentationCaption {
            get {
                return ResourceManager.GetString("PresentationCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Presentation ähnelt.
        /// </summary>
        internal static string PresentationGroupCaption {
            get {
                return ResourceManager.GetString("PresentationGroupCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Check if presentation should be shown ähnelt.
        /// </summary>
        internal static string PresentationTooltip {
            get {
                return ResourceManager.GetString("PresentationTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Execution ähnelt.
        /// </summary>
        internal static string PresExecution {
            get {
                return ResourceManager.GetString("PresExecution", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Bit rate size: {0} bit ähnelt.
        /// </summary>
        internal static string PresExecutionInfoBitRateSize {
            get {
                return ResourceManager.GetString("PresExecutionInfoBitRateSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Capacity size: {0} bit ähnelt.
        /// </summary>
        internal static string PresExecutionInfoCapacitySize {
            get {
                return ResourceManager.GetString("PresExecutionInfoCapacitySize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die State size: {0} bit ähnelt.
        /// </summary>
        internal static string PresExecutionInfoStateSize {
            get {
                return ResourceManager.GetString("PresExecutionInfoStateSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Input length: {0} bit = {1} byte ähnelt.
        /// </summary>
        internal static string PresExecutionMessageLength {
            get {
                return ResourceManager.GetString("PresExecutionMessageLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Number of input blocks (padded input length / bit rate size): {0} ähnelt.
        /// </summary>
        internal static string PresExecutionNumberOfBlocks {
            get {
                return ResourceManager.GetString("PresExecutionNumberOfBlocks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Padded input length: {0} bit = {1} byte ähnelt.
        /// </summary>
        internal static string PresExecutionPaddedMessageLength {
            get {
                return ResourceManager.GetString("PresExecutionPaddedMessageLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Initialization ähnelt.
        /// </summary>
        internal static string PresInitialization {
            get {
                return ResourceManager.GetString("PresInitialization", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The state of the sponge construction is initialized. Each of the b bits of the state is initialized to 0. The state is partitioned into two parts: Capacity (c bits) and Bit Rate (r bits). With the current settings the values are: b = {0}, c = {1} and r = {2}. ähnelt.
        /// </summary>
        internal static string PresInitializationText {
            get {
                return ResourceManager.GetString("PresInitializationText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Input Information ähnelt.
        /// </summary>
        internal static string PresInputInformation {
            get {
                return ResourceManager.GetString("PresInputInformation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Introduction ähnelt.
        /// </summary>
        internal static string PresIntroduction {
            get {
                return ResourceManager.GetString("PresIntroduction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Iota XORs a round constant on the first lane (x=1, y=1). ähnelt.
        /// </summary>
        internal static string PresIotaPhaseText {
            get {
                return ResourceManager.GetString("PresIotaPhaseText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The value of the current round constant is presented in the red rectangle between the green blocks. The green blocks present the old and new value of the lane. The round constants differ in each round. ähnelt.
        /// </summary>
        internal static string PresIotaStepText {
            get {
                return ResourceManager.GetString("PresIotaStepText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die {0} Iterations ähnelt.
        /// </summary>
        internal static string PresKeccakFIterations {
            get {
                return ResourceManager.GetString("PresKeccakFIterations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Keccak-f Permutation ähnelt.
        /// </summary>
        internal static string PresKeccakFPhase {
            get {
                return ResourceManager.GetString("PresKeccakFPhase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The Keccak-f permutation performs 12 + 2 * l rounds. For the selected state size l equals {0} which makes a total of {1} rounds. Each round consists of five step mappings which permute the state in different ways. ähnelt.
        /// </summary>
        internal static string PresKeccakFPhaseText {
            get {
                return ResourceManager.GetString("PresKeccakFPhaseText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die To facilitate the presentation of the step mappings, the state is represented as a three-dimensional cube. The row and column size is fixed to 5 bits. The lane size depends on the state size ({1} bits for the selected state size). ähnelt.
        /// </summary>
        internal static string PresKeccakFStateMapping {
            get {
                return ResourceManager.GetString("PresKeccakFStateMapping", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die New State ähnelt.
        /// </summary>
        internal static string PresNewState {
            get {
                return ResourceManager.GetString("PresNewState", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Next ähnelt.
        /// </summary>
        internal static string PresNext {
            get {
                return ResourceManager.GetString("PresNext", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Skip f ähnelt.
        /// </summary>
        internal static string PresNextBlock {
            get {
                return ResourceManager.GetString("PresNextBlock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Skip Step ähnelt.
        /// </summary>
        internal static string PresNextStep {
            get {
                return ResourceManager.GetString("PresNextStep", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Old State ähnelt.
        /// </summary>
        internal static string PresOldState {
            get {
                return ResourceManager.GetString("PresOldState", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Hash Output ähnelt.
        /// </summary>
        internal static string PresOutputHash {
            get {
                return ResourceManager.GetString("PresOutputHash", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The selected output length is not supported by the presentation. Please select an output length that is smaller or equal to the selected bit rate. ähnelt.
        /// </summary>
        internal static string PresOutputLengthError {
            get {
                return ResourceManager.GetString("PresOutputLengthError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Overview ähnelt.
        /// </summary>
        internal static string PresOverview {
            get {
                return ResourceManager.GetString("PresOverview", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Pi permutes the positioning of the lanes within the state. The lane coordinates of the cube are shifted for improved visualization. ähnelt.
        /// </summary>
        internal static string PresPiPhaseText {
            get {
                return ResourceManager.GetString("PresPiPhaseText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Every lane except the lane at x=1, y=1 (black) is moved to a different position. The right cube presents the new lane positions of the colored lanes. Already moved lanes are grayed out. ähnelt.
        /// </summary>
        internal static string PresPiStepText {
            get {
                return ResourceManager.GetString("PresPiStepText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Rho iterates over each lane of the state. ähnelt.
        /// </summary>
        internal static string PresRhoPhaseText {
            get {
                return ResourceManager.GetString("PresRhoPhaseText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Each lane is right-rotated by a certain value (depicted in the red rectangle). The upper green block represents the lane before rotation, the lower green block represents the lane after rotation. ähnelt.
        /// </summary>
        internal static string PresRhoStepText {
            get {
                return ResourceManager.GetString("PresRhoStepText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Rotation Offset: ähnelt.
        /// </summary>
        internal static string PresRotationOffset {
            get {
                return ResourceManager.GetString("PresRotationOffset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Round {0}/{1} ähnelt.
        /// </summary>
        internal static string PresRoundOfRounds {
            get {
                return ResourceManager.GetString("PresRoundOfRounds", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Skip Introduction ähnelt.
        /// </summary>
        internal static string PresSkipIntroduction {
            get {
                return ResourceManager.GetString("PresSkipIntroduction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Sponge Construction Parameter ähnelt.
        /// </summary>
        internal static string PresSpongeConstructionParameter {
            get {
                return ResourceManager.GetString("PresSpongeConstructionParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Squeezing Phase ähnelt.
        /// </summary>
        internal static string PresSqueezingPhase {
            get {
                return ResourceManager.GetString("PresSqueezingPhase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The {0}-bit hash value is extracted from the bit rate part (upper part of the state). ähnelt.
        /// </summary>
        internal static string PresSqueezingPhaseExplanation {
            get {
                return ResourceManager.GetString("PresSqueezingPhaseExplanation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The hash value is extracted from the r-bit part of the state (z). If the size of the requested output is larger than r, the state is permuted repetitively and more output is extracted between the permutations until the required output length is obtained. ähnelt.
        /// </summary>
        internal static string PresSqueezingPhaseText {
            get {
                return ResourceManager.GetString("PresSqueezingPhaseText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die State ähnelt.
        /// </summary>
        internal static string PresState {
            get {
                return ResourceManager.GetString("PresState", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The selected state size is not supported by the presentation. Please select a state size of atleast 200 bit. ähnelt.
        /// </summary>
        internal static string PresStateSizeError {
            get {
                return ResourceManager.GetString("PresStateSizeError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The presentation for {0} is only supported for a state size of 1600 bit. ähnelt.
        /// </summary>
        internal static string PresStepPresentationNotAvailable {
            get {
                return ResourceManager.GetString("PresStepPresentationNotAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Theta iterates over each column of the state. ähnelt.
        /// </summary>
        internal static string PresThetaPhaseText {
            get {
                return ResourceManager.GetString("PresThetaPhaseText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The parities of two nearby columns (turquoise and light green) are XORed. The result is XORed with each bit of the considered column (green). ähnelt.
        /// </summary>
        internal static string PresThetaStepText {
            get {
                return ResourceManager.GetString("PresThetaStepText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Bit rate ähnelt.
        /// </summary>
        internal static string RateCaption {
            get {
                return ResourceManager.GetString("RateCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Set the Size of bit rate in bit (must be divisible by 8) ähnelt.
        /// </summary>
        internal static string RateTooltip {
            get {
                return ResourceManager.GetString("RateTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap rho_modified_lane {
            get {
                object obj = ResourceManager.GetObject("rho_modified_lane", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap rho_modified_side_lane {
            get {
                object obj = ResourceManager.GetObject("rho_modified_side_lane", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap rho_modified_top_lane {
            get {
                object obj = ResourceManager.GetObject("rho_modified_top_lane", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap rho_table_marker2 {
            get {
                object obj = ResourceManager.GetObject("rho_table_marker2", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap selected_rc2 {
            get {
                object obj = ResourceManager.GetObject("selected_rc2", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die State size ähnelt.
        /// </summary>
        internal static string SelectedStateSizeCaption {
            get {
                return ResourceManager.GetString("SelectedStateSizeCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Set the size of the state in bit (must match the sum of bit rate and capacity) ähnelt.
        /// </summary>
        internal static string SelectedStateSizeTooltip {
            get {
                return ResourceManager.GetString("SelectedStateSizeTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap sponge_1_init {
            get {
                object obj = ResourceManager.GetObject("sponge_1_init", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap sponge_2_absorb {
            get {
                object obj = ResourceManager.GetObject("sponge_2_absorb", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap sponge_3_squeeze {
            get {
                object obj = ResourceManager.GetObject("sponge_3_squeeze", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap sponge_4_keccakf {
            get {
                object obj = ResourceManager.GetObject("sponge_4_keccakf", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap sponge_5_keccakf_detail {
            get {
                object obj = ResourceManager.GetObject("sponge_5_keccakf_detail", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap stateNotation {
            get {
                object obj = ResourceManager.GetObject("stateNotation", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 25 Bit ähnelt.
        /// </summary>
        internal static string StateSize0 {
            get {
                return ResourceManager.GetString("StateSize0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 50 Bit ähnelt.
        /// </summary>
        internal static string StateSize1 {
            get {
                return ResourceManager.GetString("StateSize1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 100 Bit ähnelt.
        /// </summary>
        internal static string StateSize2 {
            get {
                return ResourceManager.GetString("StateSize2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 200 Bit ähnelt.
        /// </summary>
        internal static string StateSize3 {
            get {
                return ResourceManager.GetString("StateSize3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 400 Bit ähnelt.
        /// </summary>
        internal static string StateSize4 {
            get {
                return ResourceManager.GetString("StateSize4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 800 Bit ähnelt.
        /// </summary>
        internal static string StateSize5 {
            get {
                return ResourceManager.GetString("StateSize5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 1600 Bit ähnelt.
        /// </summary>
        internal static string StateSize6 {
            get {
                return ResourceManager.GetString("StateSize6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The sum of bit rate and capacity must match the selected state size. ähnelt.
        /// </summary>
        internal static string StateSizeMatchError {
            get {
                return ResourceManager.GetString("StateSizeMatchError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap step_detail_iota3 {
            get {
                object obj = ResourceManager.GetObject("step_detail_iota3", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap step_detail_rho {
            get {
                object obj = ResourceManager.GetObject("step_detail_rho", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap step_detail_rho_table {
            get {
                object obj = ResourceManager.GetObject("step_detail_rho_table", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap theta_left_row_front {
            get {
                object obj = ResourceManager.GetObject("theta_left_row_front", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap theta_left_row_side {
            get {
                object obj = ResourceManager.GetObject("theta_left_row_side", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap theta_left_row_top {
            get {
                object obj = ResourceManager.GetObject("theta_left_row_top", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap theta_modified_row_front {
            get {
                object obj = ResourceManager.GetObject("theta_modified_row_front", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap theta_modified_row_side {
            get {
                object obj = ResourceManager.GetObject("theta_modified_row_side", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap theta_modified_row_top {
            get {
                object obj = ResourceManager.GetObject("theta_modified_row_top", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap theta_right_row_front {
            get {
                object obj = ResourceManager.GetObject("theta_right_row_front", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap theta_right_row_side {
            get {
                object obj = ResourceManager.GetObject("theta_right_row_side", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap theta_right_row_side_fading {
            get {
                object obj = ResourceManager.GetObject("theta_right_row_side_fading", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap theta_right_row_top {
            get {
                object obj = ResourceManager.GetObject("theta_right_row_top", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap theta_right_row_top_fading {
            get {
                object obj = ResourceManager.GetObject("theta_right_row_top_fading", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap theta_step_detail {
            get {
                object obj = ResourceManager.GetObject("theta_step_detail", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
    }
}
