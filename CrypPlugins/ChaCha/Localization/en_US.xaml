<!--
    //<Auto-Generated>
    //This is here so CodeMaid doesn't reorganize this document.
    //</Auto-Generated>
-->
<ResourceDictionary x:Class="CrypTool.Plugins.ChaCha.ContentTemplate.Localization.en_US"
                        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                        xmlns:conv="clr-namespace:CrypTool.Plugins.ChaCha.Helper.Converter">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="..\Styles\TextBox.xaml" />
    </ResourceDictionary.MergedDictionaries>
    <conv:BitsToBytes x:Key="BitsToBytes" />
    <conv:ZeroBasedIndexToOneBasedIndex x:Key="ZeroBasedIndexToOneBasedIndex" />
    <conv:DoubleToPercentage x:Key="DoubleToPercentage" />
    <BooleanToVisibilityConverter x:Key="FalseToCollapsed" />
    <Style TargetType="{x:Type TextBox}" x:Key="DiffusionText" BasedOn="{StaticResource Text}">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
    </Style>
    <Style TargetType="{x:Type ContentControl}" x:Key="OverviewCounter">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <TextBlock Text="{Binding Settings.Version.CounterBits, StringFormat=Keystream block counter ({0}-bit)}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ContentControl}" x:Key="OverviewIV">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <TextBlock Text="{Binding Settings.Version.IVBits, StringFormat=Initialization vector ({0}-bit)}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ContentControl}" x:Key="DiffusionStateLabel">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <TextBox>
                        <TextBox.Style>
                            <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DiffusionText}">
                                <Setter Property="Text" Value="Inactive" />
                                <Setter Property="Foreground" Value="Red" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding DiffusionActive}" Value="True">
                                        <Setter Property="Text" Value="Active" />
                                        <Setter Property="Foreground" Value="Green" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBox.Style>
                    </TextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ContentControl}" x:Key="OverviewState13">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <TextBlock>
                        <TextBlock.Style>
                            <Style TargetType="{x:Type TextBlock}">
                                <Setter Property="Text" Value="COUNTER" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Settings.Version.IVBits}" Value="96">
                                        <Setter Property="Text" Value="IV" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ContentControl}" x:Key="StateMatrixDescription2">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <RichTextBox Visibility="{Binding Description[0], Converter={StaticResource FalseToCollapsed}}">
                        <FlowDocument>
                            <Paragraph>
                                The first 16 bytes consist of the
                                <Run Background="Bisque" Text="constants" />.
                            </Paragraph>
                        </FlowDocument>
                    </RichTextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ContentControl}" x:Key="StateMatrixDescription3">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <RichTextBox Visibility="{Binding Description[1], Converter={StaticResource FalseToCollapsed}}">
                        <FlowDocument>
                            <Paragraph>
                                The next 32 bytes consist of the
                                <Run Background="LightCoral" Text="key" />. If the key consists of only 16 bytes, it is concatenated with itself.
                            </Paragraph>
                        </FlowDocument>
                    </RichTextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ContentControl}" x:Key="StateMatrixDescription4">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <RichTextBox Visibility="{Binding Description[2], Converter={StaticResource FalseToCollapsed}}">
                        <FlowDocument>
                            <Paragraph>
                                The next
                                <Run Text="{Binding Settings.Version.CounterBits, Converter={StaticResource BitsToBytes}, Mode=OneWay}" />
                                bytes consist of the
                                <Run Background="SkyBlue" Text="counter" />.
                                The counter is special since we first reverse all bytes. This is so because all other parameters are assumed to be already in little-endian thus no reversing is needed.
                            </Paragraph>
                        </FlowDocument>
                    </RichTextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ContentControl}" x:Key="StateMatrixDescription5">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <RichTextBox Visibility="{Binding Description[3], Converter={StaticResource FalseToCollapsed}}">
                        <FlowDocument>
                            <Paragraph>
                                The next
                                <Run Text="{Binding Settings.Version.IVBits, Converter={StaticResource BitsToBytes}, Mode=OneWay}" />
                                bytes consist of the
                                <Run Background="PaleGreen" Text="IV" />.
                            </Paragraph>
                        </FlowDocument>
                    </RichTextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ContentControl}" x:Key="ChaChaHashDescription1">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <RichTextBox>
                        <FlowDocument>
                            <Paragraph>
                                To generate a keystream block, we apply the ChaCha hash function to the state. The ChaCha hash function consists of
                                <Run Text="{Binding Settings.Rounds, FallbackValue=R}" /> rounds.
                                <LineBreak />
                                During each round, we run the quarterround function four times (hence the name
                                <Italic>quarterround</Italic>) which modifies four state entries. This means that after each round, the whole state has been modified.
                                <LineBreak />
                                In an uneven round (round 1, 3, ...), we go through all columns thus the uneven rounds can also be called
                                <Italic>column rounds</Italic> , whereas in an even round (round 2, 4, ...), we go through all diagonals thus the even rounds can be called
                                <Italic>diagonal rounds</Italic>.
                            </Paragraph>
                        </FlowDocument>
                    </RichTextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ContentControl}" x:Key="ChaChaHashDescription2">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <RichTextBox>
                        <FlowDocument>
                            <Paragraph>
                                At the left, you can see the current state. At the bottom, you see the visualization of the quarterround function. It consists of four steps where each step modifies three values using addition modulo 2<Run Typography.Variants="Superscript">32</Run>, XOR and a circular left shift.
                            </Paragraph>
                        </FlowDocument>
                    </RichTextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ContentControl}" x:Key="ChaChaHashDescription3">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <RichTextBox Visibility="{Binding Description[2], Converter={StaticResource FalseToCollapsed}}">
                        <FlowDocument>
                            <Paragraph>
                                After all rounds, we add the original state to the generated state and reverse the byte order of each state entry.
                            </Paragraph>
                        </FlowDocument>
                    </RichTextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ContentControl}" x:Key="ChaChaHashKeystreamBlockLabel">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <TextBox Style="{StaticResource Text}" Text="{Binding CurrentKeystreamBlockIndex, Converter={StaticResource ZeroBasedIndexToOneBasedIndex}, StringFormat='Output: Keystream Block {0}'}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ContentControl}" x:Key="ChaChaHashFlippedBitsLabel">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <TextBlock>
                        <TextBlock.Text>
                            <MultiBinding StringFormat="Flipped Bits: {0}/{1} ({2})">
                                <Binding Path="DiffusionFlippedBits" />
                                <Binding Path="TotalBits" Mode="OneTime" />
                                <Binding Path="DiffusionFlippedBitsPercentage" Converter="{StaticResource DoubleToPercentage}" />
                            </MultiBinding>
                        </TextBlock.Text>
                    </TextBlock>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ContentControl}" x:Key="ReverseBytesStepLabel">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <StackPanel Orientation="Vertical">
                        <TextBlock HorizontalAlignment="Center" TextAlignment="Center" Text="Reverse" />
                        <TextBlock HorizontalAlignment="Center" TextAlignment="Center" Text="Bytes" />
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>