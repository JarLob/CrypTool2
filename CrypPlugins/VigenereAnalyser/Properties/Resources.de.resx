<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PluginCaption" xml:space="preserve">
    <value>Vigenere Analyser</value>
  </data>
  <data name="PluginDescriptionURL" xml:space="preserve">
    <value />
  </data>
  <data name="PluginTooltip" xml:space="preserve">
    <value>Analyses a plain text encrypted using the Vigenere cipher. Output is the keyword of the Vigenere cipher</value>
  </data>
  <data name="FriedmanInputCaption" xml:space="preserve">
    <value>Double precission floating point value.</value>
  </data>
  <data name="FriedmanInputTooltip" xml:space="preserve">
    <value>Keylength as proposed by the Friedman Test.</value>
  </data>
  <data name="StringInputCaption" xml:space="preserve">
    <value>Text Input.</value>
  </data>
  <data name="StringInputTooltip" xml:space="preserve">
    <value>Cipher text encrypted with the Vigenere cipher.</value>
  </data>
  <data name="KasiskiInputCaption" xml:space="preserve">
    <value>Integer Array.</value>
  </data>
  <data name="KasiskiInputTooltip" xml:space="preserve">
    <value>The Array cointains keylengths as proposed by the Kasiski Test.</value>
  </data>
  <data name="KeywordOutputCaption" xml:space="preserve">
    <value>Integer Array.</value>
  </data>
  <data name="KeywordOutputTooltip" xml:space="preserve">
    <value>Keyword represented as an integer Array.</value>
  </data>
  <data name="FrequencyStatsCaption" xml:space="preserve">
    <value>String</value>
  </data>
  <data name="FrequencyStatsTooltip" xml:space="preserve">
    <value>Please only connect to the text output of the Frequency Test.</value>
  </data>
  <data name="FrequencyOutputCaption" xml:space="preserve">
    <value>String</value>
  </data>
  <data name="FrequencyOutputTooltip" xml:space="preserve">
    <value>The cipher text divided into columns. Number of columns (strings) equals keylength.</value>
  </data>
  <data name="StringOutputCaption" xml:space="preserve">
    <value>Text output</value>
  </data>
  <data name="StringOutputTooltip" xml:space="preserve">
    <value> Keyword of the cipher which was used to encrypt the input text. </value>
  </data>
  <data name="ColumnAnalysisCaption" xml:space="preserve">
    <value>Method of column analysis</value>
  </data>
  <data name="ColumnAnalysisTooltip" xml:space="preserve">
    <value>Select the method of analysis of the ciphertext columns</value>
  </data>
  <data name="EICCaption" xml:space="preserve">
    <value>Expected Index of coincidence</value>
  </data>
  <data name="EICTooltip" xml:space="preserve">
    <value>Adjust the expected index of coincidence</value>
  </data>
  <data name="ELFCaption" xml:space="preserve">
    <value>Expected Letter Frequency of a language</value>
  </data>
  <data name="ELFTooltip" xml:space="preserve">
    <value>Select the Null hypothesis for the Chi-square statistic</value>
  </data>
  <data name="InternalKeyLengthAnalysisCaption" xml:space="preserve">
    <value>Method of keylength analysis</value>
  </data>
  <data name="InternalKeyLengthAnalysisTooltip" xml:space="preserve">
    <value>Select the internal or external method for analysis of the keylength</value>
  </data>
  <data name="Max_KeylengthCaption" xml:space="preserve">
    <value>Maximum Keylength</value>
  </data>
  <data name="Max_KeylengthTooltip" xml:space="preserve">
    <value>Enter maximum keylength to be analysed by the 'Sampled Index of coincidence' method. default = 15</value>
  </data>
  <data name="ColumnAnalysisList1" xml:space="preserve">
    <value>Use most frequent letter</value>
  </data>
  <data name="ColumnAnalysisList2" xml:space="preserve">
    <value>Use sum of squares</value>
  </data>
  <data name="ELFList1" xml:space="preserve">
    <value>englisch</value>
  </data>
  <data name="ELFList2" xml:space="preserve">
    <value>deutsch</value>
  </data>
  <data name="ELFList3" xml:space="preserve">
    <value>französisch</value>
  </data>
  <data name="ELFList4" xml:space="preserve">
    <value>spanisch</value>
  </data>
  <data name="ELFList5" xml:space="preserve">
    <value>italienisch</value>
  </data>
  <data name="ELFList6" xml:space="preserve">
    <value>portugiesisch</value>
  </data>
</root>