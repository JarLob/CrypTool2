<?xml version="1.0" encoding="utf-8"?>
<!-- You can edit this file manually or with the Util/CrypDocumentationEditor -->
<documentation>
  <language culture="en" />
  <language culture="de-DE" />
  
  <introduction lang="en">
    The <i>boolean satisfiability problem</i> (abbreviated <i>SAT</i>) is the problem of determining the satisfiability of a boolean formula. That means finding a valid variable assignment in a way that the formula turns out to be satisfiable. In practice there exist <i>SAT solvers</i> which solve this problem pretty efficiently. <newline />
    SAT solvers are often applied to solve optimization problems especially in electronic design automation. But since a SAT solver can be used on any problem which can be transformed into a boolean formula it is also an interesting topic in cryptanalysis.<newline /><newline />
    The SAT Solver plugin makes use of the well-known <i>MiniSat</i> solver. MiniSat is a minimalistic but highly efficient and easy to modify SAT solver, which scored high in recent SAT competitions (competitions to determine the currently best SAT solvers).<newline />
    <newline />
    In general, the process of using a SAT solver involves the following steps:<newline />
    <enum>
      <item>Transforming the problem into a special format (DIMACS CNF)</item>
      <item>Feeding the SAT solver with the transformed problem</item>
      <item>Interpreting the output of the solver</item>
    </enum>
    <newline />
    
    <section headline="Conjunctive normal form">
    The conjunctive normal form (CNF) is a special normal form into which a boolean formula can be transformed and which greatly simplifies the solving process. A CNF consists of:<newline />
    <list>
      <item>A set of <i>clauses</i> linked with the logical <i>AND</i> (&#8743;)</item>
      <item>A clause consists of <i>literals</i> linked with the logical <i>OR</i> (&#8744;)</item>
      <item>Each literal is either the name of a variable or its logical inversion (&#172;)</item>
    </list>
    Example: (a &#8744; b) &#8743; (&#172;b &#8744; c) &#8743; (a &#8744; c &#8744; &#172;d)
    </section>
    <newline />
    <newline />
    
    <section headline="DIMACS CNF">
    DIMACS CNF is the input-format accepted by a SAT solver. It provides a few rules which must be followed:<newline />
    <list>
      <item>A comment line starts with "c".</item>
      <item>The line which defines the number of variables and clauses looks like "p cnf <i>&lt;number_of_vars&gt; &lt;number of clauses&gt;</i>" and must occur before the first clause.</item>
      <item>A clause is represented by numeric variables seperated by spaces and terminated by "0".</item>
      <item>Positive literals are represented by the variable name, negative literals are the negated (-, minus) variable name.</item>
    </list>
      <b>Example:</b><newline /><newline />
    c this is the cnf related to the previous example<newline />
    c consisting of 4 variables and 3 clauses<newline />
    p cnf 4 3<newline />
    1 2 0<newline />
    -2 3 0<newline />
	1 3 -4 0<newline />
    </section>
    
    <newline />
    The SAT solver tries to find a variable assignment which satisfies each clause of the CNF such that the whole formula evaluates to <i>true</i>. The solver will then mark the equation as <i>SATISFIABLE</i> and return this variable assignment as solution to the problem. If it can not find a valid variable assignment, the solver will return <i>UNSATISFIABLE</i>.<newline />
  </introduction>
  
  <introduction lang="de-DE">
    Das <i>Erfüllbarkeitsproblem der Aussagenlogik</i> (<i>SAT</i>, von englisch <i>satisfiability</i>) ist das Problem zur Bestimmung der Erfüllbarkeit einer boolschen Formel. Es wird eine Variablenbelegung gesucht, welche die Formel erfüllbar macht. In der Praxis existieren <i>SAT-Solver</i>, die dieses Problem möglichst effizient lösen. SAT-Solver werden oft bei Optimierungsproblemen eingesetzt, vor allem beim elektronischen Schaltungsdesign. Da jedes Problem, welches in eine boolsche Formel transformiert werden kann, von einem SAT-Solver gelöst werden kann, sind diese auch für die Kryptoanalyse von Interesse.<newline /><newline />
    Das <i>SAT-Solver</i>-Plugin nutzt MiniSat, einen performanten und leicht modifizierbaren Solver, welcher sehr gute Ergebnisse bei der SAT-Competition (einem Wettbewerb, der die aktuell besten SAT-Solver ermittelt) erzielte.<newline />
    <newline />
    Die Benutzung eines SAT-Solvers läuft prinzipell folgendermaßen ab:<newline />
    <enum>
      <item>Transformation des Problems in ein spezielles Format (DIMACS CNF).</item>
      <item>Eingabe des transformierten Problems in den SAT-Solver.</item>
      <item>Interpretation der Ausgabe des Solvers.</item>
    </enum>
    <newline />
    
    <section headline="Konjunktive Normalform">
    Die <i>Konjunktive Normalform</i> (CNF von englisch <i>conjunctive normal form</i>) ist eine spezielle Normalform, in die jede boolsche Formel transformiert werden kann. Diese Form vereinfacht den Solver-Prozess stark. Eine CNF besteht aus:<newline />
    <list>
      <item>Einer Menge von <i>Klauseln</i>, welche durch das logische <i>UND</i> (&#8743;) miteinander verknüpft sind.</item>
      <item>Eine Klausel besteht aus <i>Literalen</i>, welche durch das logische <i>ODER</i> (&#8744;) miteinander verknüpft sind.</item>
      <item>Ein Literal wird durch eine Variable oder deren Invertierung (&#172;) repräsentiert.</item>
    </list>
    <newline />
    Beispiel: (a &#8744; b) &#8743; (&#172;b &#8744; c) &#8743; (a &#8744; c &#8744; &#172;d)
    </section>
    <newline />
    <newline />
    
    <section headline="DIMACS CNF">
    Das DIMACS CNF Format ist das Standard-Eingabeformat für SAT-Solver. Es legt folgende Regeln fest:<newline />
    <list>
      <item>Eine Kommentarzeile beginnt mit "c".</item>
      <item>Die Zeile, welche die Anzahl an Variablen und Klauseln definiert, sieht in etwa folgendermaßen aus: "p cnf <i>&lt;anzahl_variablen&gt; &lt;anzahl_klauseln&gt;</i>". Diese Zeile muss vor der ersten Klausel stehen.</item>
      <item>Eine Klausel wird durch numerische Variablen repräsentiert, die durch Leerzeichen getrennt werden, und muss mit einer "0" terminiert werden.</item>
      <item>Positive Literale werden durch eine Variable selbst, negative Literale durch Negierung der Variablen dargestellt.</item>
    </list>
    <newline />
    <b>Beispiel:</b><newline /><newline />
    c dies ist die vom obigen beispiel abgeleitete cnf<newline />
    c bestehend aus 4 variablen und 3 klauseln<newline />
    p cnf 4 3<newline />
    1 2 0<newline />
    -2 3 0<newline />
	1 3 -4 0<newline />
    </section>
    <newline />
    Der SAT-Solver versucht eine Variablenbelegung zu finden, welche jede Klausel erfüllt und damit die gesamte Formel erfüllbar macht. Findet der Solver eine solche Variablenbelegung, wird diese als Ergebnis mit dem Status <i>SATISFIABLE</i> ausgegeben. Wird keine Lösung gefunden, gibt der Solver <i>UNSATISFIABLE</i> aus.<newline />    
  </introduction>
  
  <usage lang="en">
    The SAT Solver plugin has one input and two outputs of the type <i>ICryptoolStream</i>, which must all be connected for the plugin to work.<newline />
    <newline />
    <section headline="Input">
    The input can be connected to either the <i>File Input</i> plugin (1) or the <i>Text Input</i> plugin (2).
    <enum>
      <item>In this case, the user has to open a file in the File Input plugin, which is a DIMACS CNF file or a gzip-compressed cnf-file (.gz-file). More information about DIMACS CNF can be found in the introduction above.</item>
      <item>In this case, the user has to provide a textual representation of a problem in DIMACS CNF format. The output of the Text Input plugin can be directly connected to the SAT Solver input (the warning about different types can be ignored).</item>
    </enum>
    </section>
    <newline />

    <section headline="Output">
    There are two output connectors: The console output (1) and the result output (2). Both outputs have to be converted into Strings via the <i>String Encoder</i> plugin to be presented in readable form.
    <enum>
      <item>The console output displays statistics of the solver process.</item>
      <item>The result output returns either <i>UNSAT</i> if the problem could not be solved, or <i>SAT</i> and a valid variable assignment, if the given formula is satisfiable. This output is written not until the solver process has finished.</item>
    </enum>
    </section>
    In the <b>Templates</b> section, there are two templates that show the usage. One for the text input method and one for the file input method. To use the file input template, a cnf-File has to be created on your local disk or downloaded from the internet, which can be opened with the File Input plugin. The text input template can be used directly, since an example DIMACS CNF is included.<newline />
    <newline />
    <newline />
    
    <section headline="Finding further solutions">
    In general, a SAT solver returns the first valid variable assignment it finds. However, there could be more than one solution to the problem. The user has to follow a few steps in order to obtain a different solution:
    <enum>
      <item>Append the variable assignment from the result output at the end of the input CNF.</item>
	  <item>Add a "0" at the end of the new line.</item>
      <item>Invert every variable assignment of this new clause.</item>
      <item>Increment the number of clauses in the line starting with "p" in the input CNF by 1.</item>
      <item>Run the SAT Solver to obtain a new solution.</item>
    </enum>
    Due to this new clause the new solution must have at least one different assigned variable. These steps can be repeated until all solutions are found.      
    </section>
    
    <section headline="Progress bar">
    Since it is hard to determine the runtime of a SAT solver, the plugin only provides a few fixed progress levels:<newline />
    <list>
      <item>1%: The solver process started.</item>
      <item>5%: The parsing of the input is finished.</item>
      <item>10%: The simplification of the input formula by the preprocessor is finished.</item>
      <item>99%: The results are printed.</item>
    </list>
	The running solver process can be terminated using CrypTool's workspace stop functionality.
    </section>
  </usage>

  <usage lang="de-DE">
    Das SAT-Solver-Plugin hat eine Eingabe und zwei Ausgaben vom Typ <i>ICryptoolStream</i>. Damit das Plugin ausgeführt werden kann müssen alle Konnektoren angeschlossen sein.<newline />
    <newline />

    <section headline="Eingabe">
    Die Eingabe kann entweder mit dem <i>Dateieingabe</i>-Plugin (1) oder mit dem <i>Texteingabe</i>-Plugin (2) verbunden werden.
    <enum>
      <item>In diesem Fall kann der Benutzer eine DIMACS CNF Datei oder eine gzip komprimierte cnf-Datei (.gz-Datei) öffnen. Weitere Informationen über DIMACS CNF sind in der Einleitung vorhanden.</item>
      <item>In diesem Fall kann die Repräsentation eines Problems in Textform, welche dem DIMACS CNF Format entspricht, angegeben werden. Die Ausgabe des Texteingabe-Plugins kann direkt mit der Eingabe des SAT-Solver-Plugins verbunden werden (die Warnung wegen verschiedener Typen kann ignoriert werden).</item>      
    </enum>
    </section>
    <newline />

    <section headline="Ausgabe">
    <b>Ausgabe</b><newline />
    Es gibt zwei Anschlüsse für die Ausgabe: Die Konsolenausgabe (1) und die Ergebnisausgabe (2). Beide Ausgaben müssen mittes des <i>String-Codierer</i>-Plugins in Strings umgewandelt werden, damit sie darstellbar sind.
    <enum>
      <item>Die Konsolenausgabe zeigt Statistiken über den Solver-Prozess an.</item>
      <item>Die Ergebnisausgabe gibt entweder <i>UNSAT</i> aus, falls das Problem nicht gelöst werden konnte, oder <i>SAT</i> und die Variablenbelegung, welche die Formel erfüllbar macht. Die Ergebnisausgabe wird erst geschrieben wenn der Solver-Prozess abgeschlossen ist.</item>
    </enum>
    </section>
    Unter <b>Vorlagen</b> gibt es zwei Templates, welche die Nutzung des SAT-Solver-Plugins demonstrieren. Ein Template benutzt das Dateieingabe-Plugin, das andere das Texteingabe-Plugin zur Eingabe. Um das Dateieingabe-Template benutzen zu können, muss zuvor noch eine cnf-Datei lokal erzeugt werden oder heruntergeladen werden, damit diese im Dateieingabe-Plugin geöffnet werden kann. Im Texteingabe-Plugin ist bereits eine Beispiel DIMACS CNF enthalten.<newline />
    <newline />
    <newline />

    <section headline="Alternative Lösungen finden">
    Der SAT-Solver gibt eine gültige Variablenbelegung an, sobald sie gefunden wurde. Trotzdem können mehrere Lösungen für das Problem existieren. Um weitere Lösungen zu erhalten, muss der Benutzer lediglich folgende Schritte durchführen:
    <enum>
      <item>Hinzufügen der Variablenzuweisung der Ergebnisausgabe am Ende der eingegebenen CNF.</item>
	    <item>Hinzufügen einer "0" am Ende dieser Zeile.</item>
      <item>Invertierung aller Variablenzuweisungen dieser neuen Klausel.</item>
      <item>Erhöhung der Klauselanzahl in der "p"-Zeile der CNF um 1.</item>
      <item>Starten des SAT-Solvers, um eine neue Lösung zu erhalten.</item>
    </enum>
    Wegen der hinzugefügten Klausel muss die neue Lösung mindestens eine andere Variablenzuweisung haben. Diese Schritte können solange wiederholt werden, bis keine Lösung mehr gefunden wird.
    </section>
    
    <section headline="Fortschrittsanzeige">
    Da es schwierig ist, die benötigte Laufzeit eines SAT-Solvers zu bestimmen, zeigt das Plugin nur einige festgelegte Fortschrittslevel an:<newline />
    <list>
      <item>1%: Der Solver-Prozess ist gestartet.</item>
      <item>5%: Das Parsen der Eingabe ist abgeschlossen.</item>
      <item>10%: Die Vereinfachung der eingegebenen Formel durch den Präprozessor ist abgeschossen.</item>
      <item>99%: Die Ergebnisse werden ausgegeben.</item>
    </list>
	Der laufende Solver-Prozess kann mittels der Stoppfunktion von CrypTool beendet werden.
    </section>
  </usage>
  
  <presentation lang="en">
  </presentation>
  
  <presentation lang="de-DE">
  </presentation>
  
  <references>
    <linkReference>
      <link url="http://en.wikipedia.org/wiki/Boolean_satisfiability_problem" lang="en" />
      <caption lang="en">Boolean satisfiability problem (Wikipedia)</caption>
      <link url="http://de.wikipedia.org/wiki/Erf%C3%BCllbarkeitsproblem_der_Aussagenlogik" lang="de-DE" />
	  <caption lang="de-DE">Erfüllbarkeitsproblem der Aussagenlogik (Wikipedia)</caption>
	</linkReference>
    <linkReference>
      <link url="http://minisat.se/Main.html" lang="en" />
      <caption lang="en">MiniSat</caption>
      <link url="http://minisat.se/Main.html" lang="de-DE" />
      <caption lang="de-DE">MiniSat</caption>
    </linkReference>
  </references>
</documentation>
