<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AppendStr" xml:space="preserve">
    <value>Append</value>
  </data>
  <data name="BasicStr" xml:space="preserve">
    <value>Basic</value>
  </data>
  <data name="CCMinCaption" xml:space="preserve">
    <value>Conflict clause minimization</value>
  </data>
  <data name="CCMinTooltip" xml:space="preserve">
    <value>Reduces the size of the learnt conflict clause</value>
  </data>
  <data name="ClauseDecayCaption" xml:space="preserve">
    <value>Clause activity decay factor</value>
  </data>
  <data name="ClauseDecayTooltip" xml:space="preserve">
    <value>Set the decay factor for clause activity (must be between 0.0 and 1.0, default=0.999)</value>
  </data>
  <data name="ClearOutputCaption" xml:space="preserve">
    <value>Clear output</value>
  </data>
  <data name="ClearOutputTooltip" xml:space="preserve">
    <value>Set if console output should be cleared after every execution</value>
  </data>
  <data name="CoreOptionsGroup" xml:space="preserve">
    <value>Solver options</value>
  </data>
  <data name="DeepStr" xml:space="preserve">
    <value>Deep</value>
  </data>
  <data name="DimacsCaption" xml:space="preserve">
    <value>Dimacs</value>
  </data>
  <data name="DimacsTooltip" xml:space="preserve">
    <value>Do not solve, just simplify CNF</value>
  </data>
  <data name="ElimCaption" xml:space="preserve">
    <value>Eliminate variables</value>
  </data>
  <data name="ElimTooltip" xml:space="preserve">
    <value>Perform variable elimination</value>
  </data>
  <data name="FullStr" xml:space="preserve">
    <value>Full</value>
  </data>
  <data name="InputCaption" xml:space="preserve">
    <value>Input</value>
  </data>
  <data name="InputTooltip" xml:space="preserve">
    <value>Input CNF as text</value>
  </data>
  <data name="LimitedStr" xml:space="preserve">
    <value>Limited</value>
  </data>
  <data name="LubyCaption" xml:space="preserve">
    <value>Luby sequence</value>
  </data>
  <data name="LubyTooltip" xml:space="preserve">
    <value>Use the luby restart sequence</value>
  </data>
  <data name="MoreStr" xml:space="preserve">
    <value>Detailed</value>
  </data>
  <data name="NoneStr" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="OffStr" xml:space="preserve">
    <value>Off</value>
  </data>
  <data name="OnStr" xml:space="preserve">
    <value>On</value>
  </data>
  <data name="OutputatResultTooltip" xml:space="preserve">
    <value>The solver's result output</value>
  </data>
  <data name="OutputConsoleCaption" xml:space="preserve">
    <value>Output console stream</value>
  </data>
  <data name="OutputConsoleTooltip" xml:space="preserve">
    <value>The solver's console output</value>
  </data>
  <data name="OutputOptionsGroup" xml:space="preserve">
    <value>Output options</value>
  </data>
  <data name="OutputResultCaption" xml:space="preserve">
    <value>Output result stream</value>
  </data>
  <data name="PhaseSavingCaption" xml:space="preserve">
    <value>Level of phase saving</value>
  </data>
  <data name="PhaseSavingTooltip" xml:space="preserve">
    <value>Assigns each decision variable to the value last forced by boolean constraint propagation</value>
  </data>
  <data name="PluginCaption" xml:space="preserve">
    <value>SAT Solver</value>
  </data>
  <data name="PluginDescription" xml:space="preserve">
    <value>Test the satisfiability of a boolean formula</value>
  </data>
  <data name="PreprocessCaption" xml:space="preserve">
    <value>Preprocessor</value>
  </data>
  <data name="PreprocessorOptionsGroup" xml:space="preserve">
    <value>Preprocessor Options</value>
  </data>
  <data name="PreprocessTooltip" xml:space="preserve">
    <value>Turn preprocessing (simplification of CNF) on / off</value>
  </data>
  <data name="RandomFreqCaption" xml:space="preserve">
    <value>Random frequency</value>
  </data>
  <data name="RandomFreqTooltip" xml:space="preserve">
    <value>The frequency with which the variable decision heuristic tries to choose a random variable (must be between 0.0 and 1.0, default=0)</value>
  </data>
  <data name="RandomInitCaption" xml:space="preserve">
    <value>Randomize initial activity</value>
  </data>
  <data name="RandomInitTooltip" xml:space="preserve">
    <value>Initialize all variables to random values</value>
  </data>
  <data name="RCheckCaption" xml:space="preserve">
    <value>Clause checking</value>
  </data>
  <data name="RCheckTooltip" xml:space="preserve">
    <value>Check if a clause is already implied</value>
  </data>
  <data name="RFirstCaption" xml:space="preserve">
    <value>Base restart interval</value>
  </data>
  <data name="RFirstTooltip" xml:space="preserve">
    <value>Base interval after how many conflicts the solver performs its first restart (0 - maxint, default=100)</value>
  </data>
  <data name="RIncCaption" xml:space="preserve">
    <value>Restart interval increase factor</value>
  </data>
  <data name="RIncTooltip" xml:space="preserve">
    <value>Factor by which the restart interval is multiplied after a restart (must be greater than 1.0, default=2)</value>
  </data>
  <data name="SilentStr" xml:space="preserve">
    <value>Silent</value>
  </data>
  <data name="SomeStr" xml:space="preserve">
    <value>Normal</value>
  </data>
  <data name="SubLimitCaption" xml:space="preserve">
    <value>Subsumption limit</value>
  </data>
  <data name="SubLimitTooltip" xml:space="preserve">
    <value>Do not check if subsumption against a clause larger than this (-1 - maxint, default=1000, -1 means no limit)</value>
  </data>
  <data name="VarDecayCaption" xml:space="preserve">
    <value>Variable activity decay factor</value>
  </data>
  <data name="VarDecayTooltip" xml:space="preserve">
    <value>Set the decay factor for variable activity (must be between 0.0 and 1.0, default=0.95)</value>
  </data>
  <data name="VerbosityCaption" xml:space="preserve">
    <value>Verbosity</value>
  </data>
  <data name="VerbosityTooltip" xml:space="preserve">
    <value>Set the level of verbosity</value>
  </data>
  <data name="NoStr" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="YesStr" xml:space="preserve">
    <value>Yes</value>
  </data>
</root>