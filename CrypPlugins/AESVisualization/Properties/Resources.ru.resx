<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="inputKeyDescription" xml:space="preserve">
    <value>Ввод ключа, используемого для шифрования</value>
  </data>
  <data name="inputKeyName" xml:space="preserve">
    <value>Ввод ключа</value>
  </data>
  <data name="inputTextDescription" xml:space="preserve">
    <value>Ввод текста, который должен быть зашифрован</value>
  </data>
  <data name="inputTextName" xml:space="preserve">
    <value>Ввод текста</value>
  </data>
  <data name="KeysizeCaption" xml:space="preserve">
    <value>KeySize</value>
  </data>
  <data name="KeysizeTooltip" xml:space="preserve">
    <value>Выберите размер ключа.</value>
  </data>
  <data name="OutputStreamCaption" xml:space="preserve">
    <value>Вывод текста</value>
  </data>
  <data name="OutputStreamTooltip" xml:space="preserve">
    <value>Вывод зашифрованного текста</value>
  </data>
  <data name="PluginCaption" xml:space="preserve">
    <value>Визуализация AES</value>
  </data>
  <data name="PluginTooltip" xml:space="preserve">
    <value>Визуализация шифрования AES</value>
  </data>
  <data name="addKeyButton" xml:space="preserve">
    <value>Добавить ключ</value>
  </data>
  <data name="addKeyExplanation" xml:space="preserve">
    <value>Круглый ключ добавляется в текущее состояние посредством XORing байтов.</value>
  </data>
  <data name="autoButton" xml:space="preserve">
    <value>Авто</value>
  </data>
  <data name="encButton" xml:space="preserve">
    <value>Пропустить расширение</value>
  </data>
  <data name="encryptionIntro" xml:space="preserve">
    <value>3</value>
  </data>
  <data name="encryptionIntro1" xml:space="preserve">
    <value>шифрование</value>
  </data>
  <data name="encTextBlock" xml:space="preserve">
    <value>шифрование</value>
  </data>
  <data name="endButton" xml:space="preserve">
    <value>Конец</value>
  </data>
  <data name="expansionExplanation" xml:space="preserve">
    <value>Сначала берутся последние четыре байта предыдущего ключа. Впоследствии последний байт помещается спереди.</value>
  </data>
  <data name="expansionExplanation1" xml:space="preserve">
    <value>Каждый байт обменивается с соответствующим байтом из S-box.</value>
  </data>
  <data name="expansionExplanation2" xml:space="preserve">
    <value>Добавляется круглая константа.</value>
  </data>
  <data name="expansionExplanation3" xml:space="preserve">
    <value>Добавление первых четырех байтов предыдущего ключа дает первые четыре байта следующего ключа.</value>
  </data>
  <data name="expansionExplanation4" xml:space="preserve">
    <value>Для столбца x нового ключа вы столбец XOR x из предыдущего ключа с столбцом x-1 из нового ключа.</value>
  </data>
  <data name="expansionIntro" xml:space="preserve">
    <value>2</value>
  </data>
  <data name="expansionIntro1" xml:space="preserve">
    <value>Расширение ключа</value>
  </data>
  <data name="expButton" xml:space="preserve">
    <value>К расширению</value>
  </data>
  <data name="expTextBlock" xml:space="preserve">
    <value>расширение</value>
  </data>
  <data name="initialRoundTextBlock" xml:space="preserve">
    <value>Начальный раунд</value>
  </data>
  <data name="introduction" xml:space="preserve">
    <value>Расширенный стандарт шифрования</value>
  </data>
  <data name="introduction1" xml:space="preserve">
    <value>(AES),</value>
  </data>
  <data name="introduction2" xml:space="preserve">
    <value>Визуализация этого современного блочного шифрования</value>
  </data>
  <data name="mixColButton" xml:space="preserve">
    <value>Mix Col.</value>
  </data>
  <data name="mixColExplanation" xml:space="preserve">
    <value>Один столбец берется из текущего состояния и помещается рядом с матрицей умножения.</value>
  </data>
  <data name="mixColExplanation1" xml:space="preserve">
    <value>Затем он умножается на матрицу умножения, чтобы определить следующий столбец следующего состояния.</value>
  </data>
  <data name="playButton" xml:space="preserve">
    <value>следующий</value>
  </data>
  <data name="prevOperationButton" xml:space="preserve">
    <value>Пред. операция</value>
  </data>
  <data name="prevRoundButton" xml:space="preserve">
    <value>Пред. Круглый</value>
  </data>
  <data name="Round1" xml:space="preserve">
    <value>Раунд 1</value>
  </data>
  <data name="Round10" xml:space="preserve">
    <value>Раунд 10</value>
  </data>
  <data name="Round11" xml:space="preserve">
    <value>11 раунд</value>
  </data>
  <data name="Round12" xml:space="preserve">
    <value>Круглый 12</value>
  </data>
  <data name="Round13" xml:space="preserve">
    <value>Round13</value>
  </data>
  <data name="Round14" xml:space="preserve">
    <value>Round14</value>
  </data>
  <data name="Round2" xml:space="preserve">
    <value>Раунд 2</value>
  </data>
  <data name="Round3" xml:space="preserve">
    <value>Раунд 3</value>
  </data>
  <data name="Round4" xml:space="preserve">
    <value>Раунд 4</value>
  </data>
  <data name="Round5" xml:space="preserve">
    <value>Раунд 5</value>
  </data>
  <data name="Round6" xml:space="preserve">
    <value>Круглый 6</value>
  </data>
  <data name="Round7" xml:space="preserve">
    <value>Раунд 7</value>
  </data>
  <data name="Round8" xml:space="preserve">
    <value>Раунд 8</value>
  </data>
  <data name="Round9" xml:space="preserve">
    <value>Круглый 9</value>
  </data>
  <data name="shiftLeftButton" xml:space="preserve">
    <value>&amp;lt;&amp;lt;</value>
  </data>
  <data name="shiftRightButton" xml:space="preserve">
    <value>&amp;gt;&amp;gt;</value>
  </data>
  <data name="shiftRowButton" xml:space="preserve">
    <value>Shift Row</value>
  </data>
  <data name="shiftRowExplanation" xml:space="preserve">
    <value>Во-первых, вторая строка сдвигается один раз влево. Затем третья строка сдвигается дважды влево, и, наконец, четвертая строка сдвигается три раза влево. Перекрывающиеся байты передаются вправо для формирования матрицы 4 x 4.</value>
  </data>
  <data name="skipOperationButton" xml:space="preserve">
    <value>Пропустить операцию</value>
  </data>
  <data name="skipRoundButton" xml:space="preserve">
    <value>Пропустить раунд</value>
  </data>
  <data name="startButton" xml:space="preserve">
    <value>Начало</value>
  </data>
  <data name="subBytesButton" xml:space="preserve">
    <value>Суббайты</value>
  </data>
  <data name="subBytesExplanation" xml:space="preserve">
    <value>Во-первых, байт переносится из матрицы состояний в пятно перехода и разбивается.</value>
  </data>
  <data name="subBytesExplanation1" xml:space="preserve">
    <value>Соответствующий байт в S-поле определяется и помещается в матрицу результатов.</value>
  </data>
  <data name="resultTextBlock" xml:space="preserve">
    <value>результат</value>
  </data>
  <data name="introTextBlock" xml:space="preserve">
    <value>AES - это современный блок-шифр. AES использует два входа: открытый текст, который должен быть зашифрован, и ключ. После шифрования AES выводит зашифрованный текст.</value>
  </data>
  <data name="introTextBlock1" xml:space="preserve">
    <value>AES начинается с «Key Expansion», в котором круглые клавиши производятся от исходного ключа. После расширения начинается первоначальный раунд, в котором исходный ключ применяется к открытому тексту. В зависимости от длины ключа алгоритм будет проходить через 9, 11 или 13 раундов. Каждый раунд состоит из четырех операций: «SubBytes», «ShiftRow», «MixColumns» и «AddRoundKey». Как только эти раунды завершены, выполняется последний раунд, который не имеет шага «MixColumn».</value>
  </data>
  <data name="Back" xml:space="preserve">
    <value>назад</value>
  </data>
  <data name="intro" xml:space="preserve">
    <value>1</value>
  </data>
  <data name="intro1" xml:space="preserve">
    <value>вступление</value>
  </data>
  <data name="IntroText" xml:space="preserve">
    <value>вступление</value>
  </data>
  <data name="Ciphertext" xml:space="preserve">
    <value>зашифрованный</value>
  </data>
  <data name="KeyText" xml:space="preserve">
    <value>ключ</value>
  </data>
  <data name="Plaintext" xml:space="preserve">
    <value>Простой текст</value>
  </data>
</root>