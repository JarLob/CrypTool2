<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="inputKeyDescription" xml:space="preserve">
    <value>输入用于加密的密钥</value>
  </data>
  <data name="inputKeyName" xml:space="preserve">
    <value>按键输入</value>
  </data>
  <data name="inputTextDescription" xml:space="preserve">
    <value>输入要加密的文本</value>
  </data>
  <data name="inputTextName" xml:space="preserve">
    <value>文字输入</value>
  </data>
  <data name="KeysizeCaption" xml:space="preserve">
    <value>密钥大小</value>
  </data>
  <data name="KeysizeTooltip" xml:space="preserve">
    <value>选择密钥的大小。</value>
  </data>
  <data name="OutputStreamCaption" xml:space="preserve">
    <value>文字输出</value>
  </data>
  <data name="OutputStreamTooltip" xml:space="preserve">
    <value>密文输出</value>
  </data>
  <data name="PluginCaption" xml:space="preserve">
    <value>AES可视化</value>
  </data>
  <data name="PluginTooltip" xml:space="preserve">
    <value>AES加密的可视化</value>
  </data>
  <data name="addKeyButton" xml:space="preserve">
    <value>新增金钥</value>
  </data>
  <data name="addKeyExplanation" xml:space="preserve">
    <value>通过对字节进行XOR运算，将回合密钥添加到当前状态。</value>
  </data>
  <data name="autoButton" xml:space="preserve">
    <value>汽车</value>
  </data>
  <data name="encButton" xml:space="preserve">
    <value>跳过扩展</value>
  </data>
  <data name="encryptionIntro" xml:space="preserve">
    <value>3</value>
  </data>
  <data name="encryptionIntro1" xml:space="preserve">
    <value>加密</value>
  </data>
  <data name="encTextBlock" xml:space="preserve">
    <value>加密</value>
  </data>
  <data name="endButton" xml:space="preserve">
    <value>结束</value>
  </data>
  <data name="expansionExplanation" xml:space="preserve">
    <value>首先，获取上一个密钥的最后四个字节。之后，最后一个字节放在最前面。</value>
  </data>
  <data name="expansionExplanation1" xml:space="preserve">
    <value>每个字节都与S-box中的相应字节交换。</value>
  </data>
  <data name="expansionExplanation2" xml:space="preserve">
    <value>添加一个舍入常数。</value>
  </data>
  <data name="expansionExplanation3" xml:space="preserve">
    <value>将上一个键的前四个字节相加即可得到下一个键的前四个字节。</value>
  </data>
  <data name="expansionExplanation4" xml:space="preserve">
    <value>对于新密钥的x列，您可以将前一个密钥的x列与新密钥的x-1列进行XOR运算。</value>
  </data>
  <data name="expansionIntro" xml:space="preserve">
    <value>2</value>
  </data>
  <data name="expansionIntro1" xml:space="preserve">
    <value>关键扩展</value>
  </data>
  <data name="expButton" xml:space="preserve">
    <value>扩展</value>
  </data>
  <data name="expTextBlock" xml:space="preserve">
    <value>扩张</value>
  </data>
  <data name="initialRoundTextBlock" xml:space="preserve">
    <value>首轮比赛</value>
  </data>
  <data name="introduction" xml:space="preserve">
    <value>先进的加密标准</value>
  </data>
  <data name="introduction1" xml:space="preserve">
    <value>（AES）</value>
  </data>
  <data name="introduction2" xml:space="preserve">
    <value>可视化这种现代分组密码</value>
  </data>
  <data name="mixColButton" xml:space="preserve">
    <value>混合色</value>
  </data>
  <data name="mixColExplanation" xml:space="preserve">
    <value>从当前状态中取出一列，并将其放在乘法矩阵的旁边。</value>
  </data>
  <data name="mixColExplanation1" xml:space="preserve">
    <value>然后将其与乘法矩阵相乘，以确定下一状态的下一列。</value>
  </data>
  <data name="playButton" xml:space="preserve">
    <value>下一个</value>
  </data>
  <data name="prevOperationButton" xml:space="preserve">
    <value>上一个运作方式</value>
  </data>
  <data name="prevRoundButton" xml:space="preserve">
    <value>上一个回合</value>
  </data>
  <data name="Round1" xml:space="preserve">
    <value>第1轮</value>
  </data>
  <data name="Round10" xml:space="preserve">
    <value>第十回合</value>
  </data>
  <data name="Round11" xml:space="preserve">
    <value>回合11</value>
  </data>
  <data name="Round12" xml:space="preserve">
    <value>第十二回合</value>
  </data>
  <data name="Round13" xml:space="preserve">
    <value>回合13</value>
  </data>
  <data name="Round14" xml:space="preserve">
    <value>回合14</value>
  </data>
  <data name="Round2" xml:space="preserve">
    <value>第二回合</value>
  </data>
  <data name="Round3" xml:space="preserve">
    <value>第三回合</value>
  </data>
  <data name="Round4" xml:space="preserve">
    <value>第四回合</value>
  </data>
  <data name="Round5" xml:space="preserve">
    <value>第五回合</value>
  </data>
  <data name="Round6" xml:space="preserve">
    <value>第六回合</value>
  </data>
  <data name="Round7" xml:space="preserve">
    <value>第七回合</value>
  </data>
  <data name="Round8" xml:space="preserve">
    <value>第八回合</value>
  </data>
  <data name="Round9" xml:space="preserve">
    <value>第9回合</value>
  </data>
  <data name="shiftLeftButton" xml:space="preserve">
    <value>&amp;lt;&amp;lt;</value>
  </data>
  <data name="shiftRightButton" xml:space="preserve">
    <value>&amp;gt;&amp;gt;</value>
  </data>
  <data name="shiftRowButton" xml:space="preserve">
    <value>排档</value>
  </data>
  <data name="shiftRowExplanation" xml:space="preserve">
    <value>首先，第二行向左移动一次。然后，第三行向左移动两次，最后第四行向左移动三次。重叠的字节向右转移以形成4 x 4矩阵。</value>
  </data>
  <data name="skipOperationButton" xml:space="preserve">
    <value>跳过操作</value>
  </data>
  <data name="skipRoundButton" xml:space="preserve">
    <value>跳过回合</value>
  </data>
  <data name="startButton" xml:space="preserve">
    <value>开始</value>
  </data>
  <data name="subBytesButton" xml:space="preserve">
    <value>子字节</value>
  </data>
  <data name="subBytesExplanation" xml:space="preserve">
    <value>首先，将一个字节从状态矩阵传输到过渡点并拆分。</value>
  </data>
  <data name="subBytesExplanation1" xml:space="preserve">
    <value>确定S-box中的相应字节并将其放入结果矩阵。</value>
  </data>
  <data name="resultTextBlock" xml:space="preserve">
    <value>结果</value>
  </data>
  <data name="introTextBlock" xml:space="preserve">
    <value>AES是一种现代的分组密码。 AES接受两个输入：要加密的纯文本和一个密钥。加密后，AES输出密文。</value>
  </data>
  <data name="introTextBlock1" xml:space="preserve">
    <value>AES以“密钥扩展”开头，其中圆形密钥是从原始密钥派生的。扩展后，将进行初始回合，其中原始密钥将应用于明文。根据密钥长度，算法将经过9、11或13轮。每个回合包含四个操作：“ SubBytes”，“ ShiftRow”，“ MixColumns”和“ AddRoundKey”。一旦完成这些回合，就执行最后一个回合，该回合没有“ MixColumn”步骤。</value>
  </data>
  <data name="Back" xml:space="preserve">
    <value>背部</value>
  </data>
  <data name="intro" xml:space="preserve">
    <value>1个</value>
  </data>
  <data name="intro1" xml:space="preserve">
    <value>介绍</value>
  </data>
  <data name="IntroText" xml:space="preserve">
    <value>介绍</value>
  </data>
  <data name="Ciphertext" xml:space="preserve">
    <value>密文</value>
  </data>
  <data name="KeyText" xml:space="preserve">
    <value>键</value>
  </data>
  <data name="Plaintext" xml:space="preserve">
    <value>纯文本</value>
  </data>
</root>