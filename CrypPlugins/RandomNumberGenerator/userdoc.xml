<?xml version="1.0" encoding="utf-8"?>
<documentation>
  <language culture="en" />
  <language culture="ru" />
  <language culture="de-DE" />
  <introduction lang="en">
    The concept of randomness is playing an increasingly important role not only in computer science, but also in modern cryptography. Random data is used in cryptography for various purposes. Among other things, they play an important role in the generation of keys for asymmetric encryption procedures.
    Random data is generated using a so-called pseudo-random generator. A pseudo-random generator may have statistically useful behavior, but cryptographically it may have unreasonable security deficiencies. In order to be usable for cryptographic purposes, it is not sufficient that the produced sequences pass all possible statistical tests, but a certain form of unpredictability must exist for the next random number produced.
    In summary, that means:
    <list><item>
        The numbers must look "random". This means that they must pass all statistical randomness tests (e.g. the number of ones and zeros generated should be almost equal).
      </item><item>
        They must be <b>unpredictable</b>. It must not be possible to predict the next <b>random bit</b>, even if one knows the algorithm used, the hardware used and all previous random bits.
      </item><item>
        They cannot be reproduced. If you start the random number generator a second time with the same input data, it must generate a completely different series of random numbers.
      </item></list>
    A pseudo-random generator (also known as a pseudo-random number generator) is an algorithm that generates a cyclic sequence (Z[n]) of p numbers (period length) based on a secret start value Z[0] - the "seed".
    For someone who does not know the seed Z[0], the sequence Z[i], Z[i+1], ..., Z[i+p] appears as a sequence of random numbers.
  <section headline="Random.Random">
    The Random.Random generator is the .NET builtin non-cryptographic random number generator. For details on this generator please have a look at the Microsoft documentation <ref id="randomrandom" />.
  </section>
  <section headline="RNGCryptoServiceProvider">
    The RNGCryptoServiceProvider generator is the .NET builtin cryptographic random number generator. For details on this generator please have a look at the Microsoft documentation <ref id="rngcryptoservice" />.
  </section>
	<section headline="X^2 modulo N Generator">
      The X square modulo N (X^2 mod N) generator <ref id="x2modn" /> is an algorithm for generating a sequence of seemingly random integers (X[i]) according to the recursive calculation rule:<newline /><newline />
      X[0] := Secret seed value, with X[0]*X[0] &gt; N<newline />
      X[i+1] := X[i]*X[i] (mod N) for i = 0, 1, 2, 3, ... <newline /><newline />
      where X[i] are integers from the value range 0,1,2, ..., N-1.<newline /><newline />
      In CrypTool we only look at "coin tosses" (the coin toss "head" is shown on 0 and the coin toss "number" is shown on 1). In the X^2 mod N generator we therefore map the coin toss 0 by the event[X[i] = 0 (mod 2)] and the coin toss 1 by the event[X[i] = 1 (mod 2)]. A sequence of 8 coin tosses results in a random ASCII character. The only parameter of the X^2 mod N generator is the module N.
      Note that the quality of the X^2 mod N generator depends decisively on the selection of the parameter N. If one knows the prime factorization of the module N, then it is possible to calculate the square root modulo N of X[i+1] and one can crack the random generator. Therefore, large RSA modules are often used for the N module, in which the prime factorization N = p * q cannot be determined in practice only with knowledge of N. The default parameter is an RSA module N = p*q with the property that p and q are flower numbers. Such X^2 mod N generators are called "Blum-Blum-Shub" generators.
    </section><section headline="Linear congruence Generator">
	The linear congruence generator (LCG) <ref id="linearcongruential" /> is an algorithm for generating a sequence of apparently random integers (X_[i]) according to the recursive calculation rule:<newline /><newline />
	X_[0] := Secret seed value<newline />
	X_[i+1] := a*X_[i] +b (mod N) for i = 0, 1, 2, 3, ... <newline /><newline />
	where X_[i] are integers from the value range 0,1,2, ..., N-1. It is common to normalize the random numbers into the rational value range [0.1[, therefore the output is as rational numbers Z[i]. := X_[i]/N. <newline /><newline />
	In CrypTool we only look at "coin tosses" (the coin toss "head" is shown on 0 and the coin toss "number" is shown on 1). In the LCG we therefore form coin toss 0 with the event[Z_[i] &lt; 0,5] and the coin toss 1 by the event[0,5 &lt;= Z_[i] 1]. The sequence of coin tosses is saved as a binary file (a sequence of 8 coin tosses results in a random ASCII character).<newline /><newline />
	Parameters for LCG are the numbers N, a, b of the straight line equation y = a*x+b (mod N): The module N, the multiplier a: 0&lt;a&lt; N and the additive increment b: 1&lt;b&lt;N. Furthermore, the LCG is initialized by the secret initial value or seed X_0.<newline /><newline />
	Note that the quality of the LCG depends decisively on the choice of parameters. An important measure here is the period length of the random sequence, which is defined by the parameters. The LCGs enjoy a high degree of popularity, as their simple design favours implementability and enables high performance. Most of the pseudo-random functions in operating systems (e.g. UNIX) and programming languages (such as ANSI C, Fortran, etc.) are implemented with LCG. Due to their popularity, LCG are among the best and most analyzed pseudo-random generators.
    </section><section headline="Inverse congruence Generator">
	The Inverse Congruence Generator (ICG) <ref id="inversecongruential" /> is an algorithm for generating a sequence of seemingly random integers (X_[i]) according to the recursive calculation rule:<newline /><newline />
	X_[0] := Secret seed value<newline />
	X_[i+1] := inverse[a*(X_[0]+i) + c] (mod P) for i = 0, 1, 2, 3, ... <newline /><newline />
	where X_[i] are integers from the value range 0,1,2, ..., P-1. It is common to normalize the random numbers into the rational value range[0.1[, therefore the output is as rational numbers Z[i]. := X_[i]/P. <newline /><newline />
	In CrypTool we only look at "coin tosses" (the coin toss "head" is shown on 0 and the coin toss "number" is shown on 1). In ICG we therefore form coin toss 0 with the event[Z_[i] &lt; 0,5] and the coin toss 1 by the event[0,5 &lt;= Z_[i] 1]. The sequence of coin tosses is saved as a binary file (a sequence of 8 coin tosses results in a random ASCII character).<newline /><newline />
	Parameters for ICG are the numbers P, a, c of modulo P Inversion of the linear equation y = ax+c: The module P is a prime number, the multiplier a: 0&lt;a&lt;N and the additive increment b: 1&lt;b&lt;N. Furthermore, the ICG is initialized by the secret initial value or seed X_0.<newline /><newline />
	Note that the quality of the ICG depends decisively on the choice of parameters. An important measure here is the period length of the random sequence, which is defined by the parameters. 
    </section>
    <section headline="Subtractive Generator">
      The generator calculates a sequence of random numbers, where each number is congruent to the subtraction of two previous numbers from the sequence.
      Its code is based on the implementation of the rosetta stone webpage, see <ref id="SubtractiveGenerator" /> for details.
    </section>
  </introduction>
  <introduction lang = "ru">
    Концепция случайности играет все более важную роль не только в информатике, но и в современной криптографии. Случайные данные используются в криптографии для различных целей. Среди прочего, они играют важную роль в генерации ключей для асимметричных процедур шифрования.
    Случайные данные генерируются с использованием так называемого псевдослучайного генератора. Псевдослучайный генератор может иметь статистически полезное поведение, но криптографически он может иметь необоснованные недостатки в области безопасности. Для использования в криптографических целях недостаточно, чтобы полученные последовательности проходили все возможные статистические тесты, но для следующего произвольного числа должна существовать определенная форма непредсказуемости.
    Таким образом, это означает:
    <list> <item>
        Цифры должны выглядеть «случайными». Это означает, что они должны пройти все статистические тесты случайности (например, количество сгенерированных нулей должно быть почти равным).
      </item> <item>
        Они должны быть <b> непредсказуемыми </b>. Невозможно предсказать следующий <b> случайный бит </b>, даже если известен используемый алгоритм, используемое оборудование и все предыдущие случайные биты.
      </item> <item>
        Они не могут быть воспроизведены. Если вы запускаете генератор случайных чисел во второй раз с теми же входными данными, он должен генерировать совершенно другую серию случайных чисел.
      </item> </list>
    Псевдослучайный генератор (также известный как генератор псевдослучайных чисел) является алгоритмом, который генерирует циклическую последовательность (Z [n]) чисел p (длина периода) на основе секретного стартового значения Z [0] - " семя».
    Для тех, кто не знает семя Z [0], последовательность Z [i], Z [i + 1], ..., Z [i + p] появляется как последовательность случайных чисел.
  <section headline = "Random.Random">
    Генератор Random.Random представляет собой встроенный генератор случайных чисел без шифрования .NET. Подробные сведения об этом генераторе см. В документации Microsoft <ref id = "randomrandom" />.
  </section>
  <section headline = "RNGCryptoServiceProvider">
    Генератор RNGCryptoServiceProvider представляет собой генератор случайных чисел встроенной криптографической системы .NET. Подробнее об этом генераторе см. В документации Microsoft <ref id = "rngcryptoservice" />.
  </section>
  <section headline = "X ^ 2 modulo N Generator">
    Генератор X-квадрат по модулю N (X ^ 2 mod N) <ref id = "x2modn" /> является алгоритмом для генерации последовательности кажущихся случайными целых чисел (X [i]) в соответствии с правилом рекурсивного вычисления: <newline/> <newline/>
    X [0]: = секретное начальное значение, с X [0] * X [0] &gt; N <newline />
    X [i + 1]: = X [i] * X [i] (mod N) для i = 0, 1, 2, 3, ... <newline/> <newline/>
    где X [i] - целые числа из диапазона значений 0,1,2, ..., N-1. <newline/> <newline/>
    В CrypTool мы смотрим только на «монеты» (монета «забрасывает» голову »отображается на 0, а« номер »монеты отображается на 1). Поэтому в генераторе X ^ 2 mod N мы сопоставляем монету сбрасыванием 0 событием [X [i] = 0 (mod 2)], а монета бросает 1 событием [X [i] = 1 (mod 2)] , Последовательность из 8 монументов монеты приводит к случайному символу ASCII. Единственным параметром генератора X ^ 2 mod N является модуль N.
    Заметим, что качество генератора X ^ 2 mod N зависит от выбора параметра N. Если знать простую факторизацию модуля N, то можно вычислить квадратный корень по модулю N из X [i + 1 ], и можно взломать случайный генератор. Поэтому большие модули RSA часто используются для модуля N, в котором простая факторизация N = p * q на практике не может быть определена только при знании N. Параметром по умолчанию является модуль RSA N = p * q с тем свойством, что p и q - числа цветов. Такие генераторы X ^ 2 mod N называются генераторами «Blum-Blum-Shub».
  </section> <section headline = "Генератор линейной конгруэнтности">
    Линейный конгруэнц-генератор (LCG) <ref id = "linearcongruential" /> является алгоритмом для генерации последовательности, по-видимому, случайных целых чисел (X_[i]) в соответствии с правилом рекурсивного вычисления: <newline/> <newline/>
    X_[0]: = секретное значение семени <newline/>
    X_[i + 1]: = a * X_[i] + b (mod N) для i = 0, 1, 2, 3, ... <newline/> <newline/>
    где X_[i] - целые числа из диапазона значений 0,1,2, ..., N-1. Обычным является нормализация случайных чисел в диапазоне рациональных значений [0,1 [, поэтому выход является как рациональные числа Z [i]. : = X_[i] / N. <newline/> <newline/>
    В CrypTool мы смотрим только на «монеты» (монета «забрасывает» голову »отображается на 0, а« номер »монеты отображается на 1). Поэтому в LCG мы формируем монету 0 с событием [Z_[i] 0,5], а монета подбрасывает 1 событием [0,5 &lt; = Z_[i] 1]. Последовательность бросков монет сохраняется как двоичный файл (последовательность из 8 монументов выводит случайный символ ASCII). <newline/> <newline/>
    Параметры для LCG - это числа N, a, b уравнения прямой y = a * x + b (mod N): модуль N, множитель a: 0 &lt; a &lt; N и приращение добавки b: 1 &lt; b &lt; N. Кроме того, LCGКроме того, LCG инициализируется секретным начальным значением или семенем X_0. <newline/> <newline/>
    Обратите внимание, что качество LCG зависит от выбора параметров. Важной мерой здесь является длина периода случайной последовательности, которая определяется параметрами. LCG пользуются высокой популярностью, так как их простой дизайн способствует реализации и обеспечивает высокую производительность. Большинство псевдослучайных функций в операционных системах (например, UNIX) и языках программирования (например, ANSI C, Fortran и т. Д.) Реализованы с помощью LCG. Благодаря своей популярности LCG являются одними из лучших и наиболее проанализированных псевдослучайных генераторов.
  </section> <section headline = "Обратный конгруэнтный генератор">
    Генератор обратных конгруэнций (ICG) <ref id = "inversecongruential" /> является алгоритмом для генерации последовательности кажущихся случайными целых чисел (X_[i]) в соответствии с правилом рекурсивного вычисления: <newline/> <newline/>
    X_[0]: = секретное значение семени <newline/>
    X_[i + 1]: = обратный [a * (X_[0] + i) + c] (mod P) для i = 0, 1, 2, 3, ... <newline/> <newline/>
    где X_[i] - целые числа из диапазона значений 0,1,2, ..., P-1. Обычным является нормализация случайных чисел в диапазоне рациональных значений [0,1 [, поэтому выход является как рациональные числа Z [i]. : = X_[i] / P. <newline/> <newline/>
    В CrypTool мы смотрим только на «монеты» (монета «забрасывает» голову »отображается на 0, а« номер »монеты отображается на 1). Поэтому в ICG мы формируем монету 0 с событием [Z_[i] 0,5], а монета подбрасывает 1 событием [0,5 &lt; = Z_[i] 1]. Последовательность бросков монет сохраняется как двоичный файл (последовательность из 8 монументов выводит случайный символ ASCII). <newline/> <newline/>
    Параметрами для МКГ являются числа P, a, c по модулю P Инверсия линейного уравнения y = ax + c: модуль P является простым числом, множитель a: 0 &lt; a &lt; N и приращение добавки b: 1 &lt; б &lt;, N. Кроме того, ICG инициализируется секретным начальным значением или семенем X_0. <newline/> <newline/>
    Обратите внимание, что качество МКГ зависит от выбора параметров. Важной мерой здесь является длина периода случайной последовательности, которая определяется параметрами.
  </section>
    <section headline="Subtractive Generator">
      Генератор вычисляет последовательность случайных чисел, где каждое число совпадает с вычитанием двух предыдущих чисел из последовательности.
      Его код основан на реализации веб-страницы «Розеттский камень», подробности смотрите в <ref id = "SubtractiveGenerator" />.
    </section>
  </introduction>
  <introduction lang="de-DE">
    Der Begriff der Zufälligkeit spielt in wachsendem Maße nicht nur in der Informatik eine Rolle, sondern auch in der modernen Kryptographie. Zufallsdaten werden in der Kryptographie für verschiedene Zwecke benötigt. Unter anderem spielen sie eine wichtige Rolle bei der Schlüsselgenerierung asymmetrischer Verschlüsselungsverfahren.
    Zufallsdaten werden mit Hilfe eines sogenannten Pseudozufallsgenerators erzeugt. Ein Pseudozufallsgenerator mag ein statistisch durchaus brauchbares Verhalten besitzen, kryptographisch jedoch unzumutbare Sicherheitsmängel aufweisen. Um für kryptographische Zwecke einsetzbar zu sein, reicht es nicht, dass die produzierten Folgen alle möglichen statistischen Tests bestehen, sondern es muss jeweils für die als nächstes produzierte Zufallszahl eine gewisse Form der Unvorhersagbarkeit vorliegen.
    Zusammengefasst heißt das:
    <list><item>
        Die Zahlen müssen "zufällig" aussehen. Das bedeutet, sie müssen alle statistischen Tests bezüglich Zufälligkeit bestehen (z.B. soll die Anzahl von erzeugten Einsen und Nullen fast gleich groß sein).
      </item><item>
        Sie müssen <b>unvorhersehbar</b> sein. Es darf nicht möglich sein, das nächste <b>Zufallsbit</b> vorherzusagen, auch wenn man den verwendeten Algorithmus, die verwendete Hardware und alle bisherigen Zufallsbits kennt.
      </item><item>
        Sie können nicht reproduziert werden. Wenn man den Zufallszahlengenerator ein zweites Mal mit den gleichen Eingabedaten startet, so muss er eine komplett andere Reihe von Zufallszahlen erzeugen.
      </item></list>
    Ein Pseudozufallsgenerator (auch Pseudozufallszahlengenerator genannt) ist ein Algorithmus, der ausgehend von einem geheimen Startwert Z[0] - der "Saat" - eine zyklische Folge (Z[n]) von p Zahlen (Periodenlänge) erzeugt.
    Für jemanden, der nicht die Saat Z[0] kennt, erscheint die Sequenz Z[i], Z[i+1], ..., Z[i+p] wie eine Folge von zufälligen Zahlen.
    <section headline="Random.Random">
      Der Random.Random Generator ist der in .NET eingebaute nicht-kryptographische Zufallszahlengenerator. Für Details siehe <ref id="randomrandom" />.
    </section>
    <section headline="RNGCryptoServiceProvider">
      Der Random.Random Generator ist der in .NET eingebaute kryptographische Zufallszahlengenerator. Für Details siehe <ref id="rngcryptoservice" />.
    </section>
    <section headline="X^2 modulo N Generator">
      Der X-Quadrat modulo N (X^2 mod N)-Generator <ref id="x2modn" /> ist ein Algorithmus zur Erzeugung einer Folge von scheinbar zufälligen ganzen Zahlen (X[i]) gemäß der rekursiven Rechenvorschrift:<newline /><newline />
      X[0] := Geheimer Saatwert, mit X[0]*X[0] &gt; N<newline />
      X[i+1] := X[i]*X[i] (mod N) für i = 0, 1, 2, 3, ... <newline /><newline />
      wobei X[i] ganze Zahlen aus dem Wertebereich 0,1,2, ..., N-1 sind.<newline /><newline />
      Wir betrachten in CrypTool nur "Münzwürfe" (der Münzwurf "Kopf" wird auf die 0 und der Münzwurf "Zahl" wird auf die 1 abgebildet). Beim X^2 mod N-Generator bilden wir deshalb den Münzwurf 0 durch das Ereignis [X[i] = 0 (mod 2)] und der Münzwurf 1 durch das Ereignis [X[i] = 1 (mod 2)] ab. Eeine Folge von 8 Münzwürfen ergibt ein zufälliges ASCII-Zeichen. Einziger Parameter beim X^2 mod N-Generator ist der Modul N.
      Beachten Sie, dass die Qualität des X^2 mod N-Generators entscheidend von der Wahl des Parameters N abhängt. Kennt man die Primfaktorzerlegung des Moduls N, dann ist es möglich die Quadratwurzel modulo N von X[i+1] berechnen und man kann den Zufallsgenerator knacken. Deshalb benutzt man oft für den Modul N große RSA-Module, bei denen die Primfaktorzerlegung N = p * q nur mit Kenntnis von N praktisch nicht bestimmbar ist. Voreingestellter Parameter ist ein RSA-Modul N = p*q mit der Eigenschaft, dass p und q Blum-Zahlen sind. Solche X^2 mod N-Generatoren heißen "Blum-Blum-Shub"-Generatoren.
    </section><section headline="Linearer Kongruenz Generator">
	Der lineare Kongruenzgenerator (LCG) <ref id="linearcongruential" /> ist ein Algorithmus zur Erzeugung einer Folge von scheinbar zufälligen ganzen Zahlen (X_[i]) gemäß der rekursiven Rechenvorschrift:<newline /><newline />
	X_[0] := Geheimer Saatwert<newline />
	X_[i+1] := a*X_[i] +b (mod N) für i = 0, 1, 2, 3, ... <newline /><newline />
	wobei X_[i] ganze Zahlen aus dem Wertebereich 0,1,2, ..., N-1 sind. Es ist üblich, die Zufallszahlen in den rationalen Wertebereich [0,1[ zu normieren, deshalb erfolgt die Ausgabe als rationale Zahlen Z[i] := X_[i]/N. <newline /><newline />
	Wir betrachten in CrypTool nur "Münzwürfe" (der Münzwurf "Kopf" wird auf die 0 und der Münzwurf "Zahl" wird auf die 1 abgebildet). Beim LCG bilden wir deshalb den Münzwurf 0 durch das Ereignis [Z_[i] &lt;  0,5] und den Münzwurf 1 durch das Ereignis [0,5 &lt;= Z_[i] &lt; 1] ab. Die Folge der Münzwürfe wird als Binärdatei (eine Folge von 8 Münzwürfen ergibt ein zufälliges ASCII-Zeichen) abgespeichert.<newline /><newline />
	Parameter beim LCG sind die Zahlen N, a, b der Geraden-Gleichung y = a*x+b (mod N): Der Modul N, der Multiplikator a: 0&lt;a&lt; N und das additive Inkrement b: 1&lt;b&lt;N. Des weiteren wird der LCG durch den geheimen Initialwert oder Saat X_0 initialisiert.<newline /><newline />
	Beachten Sie, dass die Qualität des LCG entscheidend von der Wahl der Parameter abhängt. Ein wichtiges Maß ist hierbei die Periodenlänge der Zufallsfolge, die durch die Parameter festgelegt wird. Die LCG erfreuen sich eines hohen Bekanntheitsgrades, da ihre einfache Bauweise die Implementierbarkeit begünstigt und eine hohe Performance ermöglicht. Ein Großteil der Pseudozufallsfunktionen in Betriebssystemen (z.B. UNIX) und Programmiersprachen (wie ANSI C, Fortran, usw.) werden mit LCG realisiert. Aufgrund ihrer Popularität zählen LCG zu den best- und meist-analysierten Pseudozufallsgeneratoren.
    </section><section headline="Inverser Kongruenz Generator">
	Der Inverse Kongruenzgenerator (ICG) <ref id="inversecongruential" /> ist ein Algorithmus zur Erzeugung einer Folge von scheinbar zufälligen ganzen Zahlen (X_[i]) gemäß der rekursiven Rechenvorschrift:<newline /><newline />
	X_[0] := Geheimer Saatwert<newline />
	X_[i+1] := inverse[a*(X_[0]+i) + c] (mod P) für i = 0, 1, 2, 3, ... <newline /><newline />
	wobei X_[i] ganze Zahlen aus dem Wertebereich 0,1,2, ..., P-1 sind. Es ist üblich, die Zufallszahlen in den rationalen Wertebereich [0,1[ zu normieren, deshalb erfolgt die Ausgabe als rationale Zahlen Z[i] := X_[i]/P. <newline /><newline />
	Wir betrachten in CrypTool nur "Münzwürfe" (der Münzwurf "Kopf" wird auf die 0 und der Münzwurf "Zahl" wird auf die 1 abgebildet). Beim ICG bilden wir deshalb den Münzwurf 0 durch das Ereignis [Z_[i] &lt; 0,5] und der Münzwurf 1 durch das Ereignis [0,5 &lt;= Z_[i] &lt; 1] ab. Die Folge der Münzwürfe wird als Binärdatei (eine Folge von 8 Münzwürfen ergibt ein zufälliges ASCII-Zeichen) abgespeichert.<newline /><newline />
	Parameter beim ICG sind die Zahlen P, a, c der modulo P Invertierung der Geraden-Gleichung y = ax+c: Der Modul P ist eine Primzahl, der Multiplikator a: 0&lt;a&lt;N und das additive Inkrement b: 1&lt;b&lt;N. Des weiteren wird der ICG durch den geheimen Initialwert oder Saat X_0 initialisiert.<newline /><newline />
	Beachten Sie, dass die Qualität des ICG entscheidend von der Wahl der Parameter abhängt. Ein wichtiges Maß ist hierbei die Periodenlänge der Zufallsfolge, die durch die Parameter festgelegt wird. 
    </section>
    <section headline="Subtractive Generator">
      Der Generator berechnet eine Folge von Zufallszahlen, wobei jede Zahl zur Subtraktion von zwei vorhergehenden Zahlen der Folge kongruent ist.
      Der Code basiert auf der Implementierung der Rosetta Stone-Webseite. Weitere Informationen finden Sie unter <ref id = "SubtractiveGenerator" />.
    </section>
  </introduction>
  <usage lang="en">
  The algorithm is selected via the configuration. Depending on the pseudorandom generator used, different parameters are used. These are assigned values via the entries.
  </usage>
  <usage lang="ru">Алгоритм выбирается через конфигурацию. В зависимости от используемого псевдослучайного генератора используются разные параметры. Это назначенные значения через записи.</usage>
  <usage lang="de-DE">
  Der Algorithmus wird über die Konfiguration gewählt. In Abhängigkeit des verwendeten Pseudozufallgenerators werden unterschiedliche Parameter verwendet. Diese werden über die Eingaben mit Werten belegt.
  </usage>
  <references>
    <linkReference id="randomrandom">
      <link url="https://docs.microsoft.com/en-us/dotnet/api/system.random?view=netframework-4.7.2" lang="en" />
      <caption lang="en">.NET Framework 4.7.2. -- Random Class</caption>
      <link url="https://docs.microsoft.com/de-de/dotnet/api/system.random?view=netframework-4.7.2" lang="de-DE" />
      <caption lang="de-DE">.NET Framework 4.7.2. -- Random Class</caption>
      <link url="https://docs.microsoft.com/ru-ru/dotnet/api/system.random?view=netframework-4.7.2" lang="ru" />
      <caption lang="ru">.NET Framework 4.7.2. -- Random Class</caption>
    </linkReference>        
    <linkReference id="rngcryptoservice">
      <link url="https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.rngcryptoserviceprovider?view=netframework-4.7.2" lang="en" />
      <caption lang="en">.NET Framework 4.7.2. -- RNGCryptoServiceProvider Class </caption>
      <link url="https://docs.microsoft.com/de-de/dotnet/api/system.security.cryptography.rngcryptoserviceprovider?view=netframework-4.7.2" lang="de-DE" />
      <caption lang="de-DE">.NET Framework 4.7.2. -- RNGCryptoServiceProvider Class </caption>
      <link url="https://docs.microsoft.com/ru-ru/dotnet/api/system.security.cryptography.rngcryptoserviceprovider?view=netframework-4.7.2" lang="ru" />
      <caption lang="ru">.NET Framework 4.7.2. -- RNGCryptoServiceProvider Class </caption>
    </linkReference>   
    <bookReference id="x2modn">
      <author>Blum, Lenore, Manuel Blum, and Mike Shub.</author>
      <publisher lang="en">SIAM Journal on computing 15.2 (1986): 364-383.</publisher>
      <name lang="en">A simple unpredictable pseudo-random number generator.</name>
    </bookReference>
    <linkReference id="linearcongruential">
      <link url="https://en.wikipedia.org/wiki/Linear_congruential_generator" lang="en" />
      <caption lang="en">Wikipedia -- Linear congruential generator</caption>
      <link url="https://de.wikipedia.org/wiki/Kongruenzgenerator" lang="de-DE" />
      <caption lang="de-DE">Wikipedia -- Kongruenzgenerator</caption>
      <link url="https://ru.wikipedia.org/wiki/Линейный_конгруэнтный_метод" lang="ru" />
      <caption lang="ru">Линейный конгруэнтный метод</caption>
    </linkReference>            
    <linkReference id="inversecongruential">
      <link url="https://en.wikipedia.org/wiki/Inversive_congruential_generator" lang="en" />
      <caption lang="en">Wikipedia -- Inversive congruential generator</caption>
      <link url="https://de.wikipedia.org/wiki/Inverser_Kongruenzgenerator" lang="de-DE" />
      <caption lang="de-DE">Wikipedia -- Inverser Kongruenzgenerator</caption>
      <link url="https://ru.wikipedia.org/wiki/Инверсный_конгруэнтный_метод" lang="ru" />
      <caption lang="ru">Инверсный конгруэнтный метод</caption>
    </linkReference>
    <linkReference id="SubtractiveGenerator">
      <link url="https://rosettacode.org/wiki/Subtractive_generator" lang="en" />
      <caption lang="en">Subtractive generator</caption>
      <link url="https://rosettacode.org/wiki/Subtractive_generator" lang="de-DE" />
      <caption lang="de-DE">Subtractive generator</caption>
      <link url="https://rosettacode.org/wiki/Subtractive_generator" lang="ru" />
      <caption lang="ru">Subtractive generator</caption>
    </linkReference>
  </references>
</documentation>