<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AppendICVCaption" xml:space="preserve">
    <value>Append Checksum</value>
  </data>
  <data name="AppendICVCaptionTooltip" xml:space="preserve">
    <value>The Component will automatically append a Checksum</value>
  </data>
  <data name="BarcodeSection" xml:space="preserve">
    <value>properties of barcode</value>
  </data>
  <data name="C128_ICV_DISC" xml:space="preserve">
    <value>The ICV is calculated from a weighted
sum (modulo 103) of all the characters.</value>
  </data>
  <data name="C128_ICV_LABLE" xml:space="preserve">
    <value>Integrity Check Value</value>
  </data>
  <data name="C128_STARTEND_DISC" xml:space="preserve">
    <value>There are three distinct start patterns 
that determine in which way the
code was encoded. However, the 
end pattern is always the same</value>
  </data>
  <data name="C128_STARTEND_LABLE" xml:space="preserve">
    <value>Start and End Pattern</value>
  </data>
  <data name="C38_ICV_DISC" xml:space="preserve">
    <value>The ICV is calculated from a weighted
sum (modulo 43) of all the characters.</value>
  </data>
  <data name="C38_ICV_LABLE" xml:space="preserve">
    <value>Integrity Check Value</value>
  </data>
  <data name="C38_STARTEND_DISC" xml:space="preserve">
    <value>The Start and End Symbol is a '*'. 
With the aid of the symbol, the
code can be read reliably, even if
it is read backwards.</value>
  </data>
  <data name="C38_STARTEND_LABLE" xml:space="preserve">
    <value>Start and End Symbol</value>
  </data>
  <data name="VisualEncoderCaption" xml:space="preserve">
    <value>Visual Encoder</value>
  </data>
  <data name="VisualEncoderTooltip" xml:space="preserve">
    <value>This Component encodes various types of one and two dimensional Codes.</value>
  </data>
  <data name="DimCodeLabel" xml:space="preserve">
    <value>Visual code</value>
  </data>
  <data name="DM_ALIG_DISC" xml:space="preserve">
    <value>The alignment pattern is static.  
It enables to read the code at 
every alignment.</value>
  </data>
  <data name="DM_ALIG_LABLE" xml:space="preserve">
    <value>Alignment Detection</value>
  </data>
  <data name="DM_COLUMNID_DISC" xml:space="preserve">
    <value>This pattern helps the reader to easily  
find the different data column in the code.</value>
  </data>
  <data name="DM_COLUMNID_LABLE" xml:space="preserve">
    <value>Column Identificator</value>
  </data>
  <data name="EAN13_FIXED_DISC" xml:space="preserve">
    <value>The fixed Bars are mainly orientations
points for the reader. 
In fact, the reader needs to know when 
it’s at the middle of the code,  because
the encoding changes at that point</value>
  </data>
  <data name="EAN13_FIXED_LABLE" xml:space="preserve">
    <value>Fixed Reference Point</value>
  </data>
  <data name="EAN13_ICV_DISC" xml:space="preserve">
    <value>The checksum is calculated taking a 
varying weight value times the value 
of each number in the barcode to 
make a sum (modulo 10).</value>
  </data>
  <data name="EAN13_ICV_LABLE" xml:space="preserve">
    <value>Integrity Check Value</value>
  </data>
  <data name="EAN8_FIXED_DISC" xml:space="preserve">
    <value>The fixed Bars are mainly orientations
points for the reader. 
In fact, the reader needs to know when 
it’s at the middle of the code,  because
the encoding changes at that point</value>
  </data>
  <data name="EAN8_FIXED_LABLE" xml:space="preserve">
    <value>Fixed Reference Point</value>
  </data>
  <data name="EAN8_ICV_DISC" xml:space="preserve">
    <value>The checksum is calculated taking a 
varying weight value times the value 
of each number in the barcode to 
make a sum (modulo 10).</value>
  </data>
  <data name="EAN8_ICV_LABLE" xml:space="preserve">
    <value>Integrity Check Value</value>
  </data>
  <data name="EncodingCaption" xml:space="preserve">
    <value>Type of Barcode</value>
  </data>
  <data name="EncodingTooltip" xml:space="preserve">
    <value>Choose a Barcodetype</value>
  </data>
  <data name="ExplainLabel" xml:space="preserve">
    <value>Explanation</value>
  </data>
  <data name="IncommingData" xml:space="preserve">
    <value>Input Data</value>
  </data>
  <data name="IncommingDataTooltip" xml:space="preserve">
    <value>The data you want to encode as a barcode.</value>
  </data>
  <data name="PictureBytesOutput" xml:space="preserve">
    <value>Picture output</value>
  </data>
  <data name="PictureBytesOutputTooltip" xml:space="preserve">
    <value>Your Barcode as a picture.</value>
  </data>
  <data name="QR_ALIG_DISC" xml:space="preserve">
    <value>The alignment pattern is static.  
It enables to read the code at 
every alignment.</value>
  </data>
  <data name="QR_ALIG_LABLE" xml:space="preserve">
    <value>Alignment Detection</value>
  </data>
  <data name="CODE39_INVALIDE_INPUT" xml:space="preserve">
    <value>Invalide Input</value>
  </data>
  <data name="PDF417_ROWID_DISC" xml:space="preserve">
    <value>This pattern helps the reader to easily  
find the different data rows in the code.</value>
  </data>
  <data name="PDF417_ROWID_LABLE" xml:space="preserve">
    <value>Row  Identificator</value>
  </data>
  <data name="PDF417_SEPAT_DISC" xml:space="preserve">
    <value>With the aid of the pattern, the
code can be read reliably, even if
it is read upside down or 
backwards.</value>
  </data>
  <data name="PDF417_SEPAT_LABLE" xml:space="preserve">
    <value>Start and End Pattern</value>
  </data>
  <data name="QR_FORMAT_DISC" xml:space="preserve">
    <value>Here among others, is the Error Correction
Level determined. This indicates what 
percentage of the code (7% - 30%) can be
recovered in case of damage</value>
  </data>
  <data name="QR_FORMAT_LABLE" xml:space="preserve">
    <value>Format Informations</value>
  </data>
  <data name="QR_VERSION_DISC" xml:space="preserve">
    <value>The version specifies one of 40 pre-
defined sizes for the QR code.</value>
  </data>
  <data name="QR_VERSION_LABLE" xml:space="preserve">
    <value>Version Informations</value>
  </data>
  <data name="QR_NORMAL_DISC" xml:space="preserve">
    <value>In this area, the data is shown  
redundant, so that it can be read 
reliably even if  pieces of code  
are covered or damaged.</value>
  </data>
  <data name="QR_NORMAL_LABLE" xml:space="preserve">
    <value>Data</value>
  </data>
  <data name="EAN_INVALIDE_INPUT" xml:space="preserve">
    <value>The input contains invalid characters. Only Digits are allowed.</value>
  </data>
</root>