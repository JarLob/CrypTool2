<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AppendICVCaption" xml:space="preserve">
    <value>附加校验和</value>
  </data>
  <data name="AppendICVTooltip" xml:space="preserve">
    <value>组件将自动附加校验和。</value>
  </data>
  <data name="BarcodeSection" xml:space="preserve">
    <value>条码的属性</value>
  </data>
  <data name="C128_ICV_DISC" xml:space="preserve">
    <value>根据所有字符的加权和（模103）来计算ICV。</value>
  </data>
  <data name="C128_ICV_LABLE" xml:space="preserve">
    <value>完整性检查值</value>
  </data>
  <data name="C128_STARTEND_DISC" xml:space="preserve">
    <value>有三种不同的开始模式，用于确定代码的编码方式。但是，结束模式始终相同。</value>
  </data>
  <data name="C128_STARTEND_LABLE" xml:space="preserve">
    <value>开始和结束模式</value>
  </data>
  <data name="C38_ICV_DISC" xml:space="preserve">
    <value>根据所有字符的加权和（模43）计算ICV。</value>
  </data>
  <data name="C38_ICV_LABLE" xml:space="preserve">
    <value>完整性检查值</value>
  </data>
  <data name="C38_STARTEND_DISC" xml:space="preserve">
    <value>起始和结束符号为“ *”。借助符号，即使向后读取代码，也可以可靠地读取代码。</value>
  </data>
  <data name="C38_STARTEND_LABLE" xml:space="preserve">
    <value>开始和结束符号</value>
  </data>
  <data name="PluginCaption" xml:space="preserve">
    <value>视觉编码器</value>
  </data>
  <data name="PluginTooltip" xml:space="preserve">
    <value>编码各种类型的一维和二维码</value>
  </data>
  <data name="DimCodeLabel" xml:space="preserve">
    <value>可视代码</value>
  </data>
  <data name="DM_ALIG_DISC" xml:space="preserve">
    <value>对齐方式是静态的。它使您能够在每次对齐时读取代码。</value>
  </data>
  <data name="DM_ALIG_LABLE" xml:space="preserve">
    <value>对准检测</value>
  </data>
  <data name="DM_COLUMNID_DISC" xml:space="preserve">
    <value>这种模式可以帮助读者轻松地找到代码中的不同数据列。</value>
  </data>
  <data name="DM_COLUMNID_LABLE" xml:space="preserve">
    <value>列标识符</value>
  </data>
  <data name="EAN13_FIXED_DISC" xml:space="preserve">
    <value>固定条主要是读者的方向点。它们是必需的，因为编码在这些点上会发生变化。</value>
  </data>
  <data name="EAN13_FIXED_LABLE" xml:space="preserve">
    <value>固定参考点</value>
  </data>
  <data name="EAN13_ICV_DISC" xml:space="preserve">
    <value>校验和的计算方法是将权重值乘以条形码中每个数字的值，然后求和（取模10）。</value>
  </data>
  <data name="EAN13_ICV_LABLE" xml:space="preserve">
    <value>完整性检查值</value>
  </data>
  <data name="EAN8_FIXED_DISC" xml:space="preserve">
    <value>固定条主要是读者的方向点。它们是必需的，因为编码在这些点上会发生变化。</value>
  </data>
  <data name="EAN8_FIXED_LABLE" xml:space="preserve">
    <value>固定参考点</value>
  </data>
  <data name="EAN8_ICV_DISC" xml:space="preserve">
    <value>校验和的计算方法是将权重值乘以条形码中每个数字的值，然后求和（取模10）。</value>
  </data>
  <data name="EAN8_ICV_LABLE" xml:space="preserve">
    <value>完整性检查值</value>
  </data>
  <data name="EncodingTypeCaption" xml:space="preserve">
    <value>条码类型</value>
  </data>
  <data name="EncodingTypeTooltip" xml:space="preserve">
    <value>选择条形码类型</value>
  </data>
  <data name="ExplainLabel" xml:space="preserve">
    <value>说明</value>
  </data>
  <data name="InputStreamCaption" xml:space="preserve">
    <value>输入数据</value>
  </data>
  <data name="InputStreamTooltip" xml:space="preserve">
    <value>您要编码为条形码的数据。</value>
  </data>
  <data name="PictureBytesCaption" xml:space="preserve">
    <value>图片输出</value>
  </data>
  <data name="PictureBytesTooltip" xml:space="preserve">
    <value>您的条形码作为图片。</value>
  </data>
  <data name="QR_ALIG_DISC" xml:space="preserve">
    <value>对齐方式是静态的。它使您能够在每次对齐时读取代码。</value>
  </data>
  <data name="QR_ALIG_LABLE" xml:space="preserve">
    <value>对准检测</value>
  </data>
  <data name="CODE39_INVALIDE_INPUT" xml:space="preserve">
    <value>无效输入</value>
  </data>
  <data name="PDF417_ROWID_DISC" xml:space="preserve">
    <value>这种模式可以帮助读者轻松地找到代码中的不同数据行。</value>
  </data>
  <data name="PDF417_ROWID_LABLE" xml:space="preserve">
    <value>行标识符</value>
  </data>
  <data name="PDF417_SEPAT_DISC" xml:space="preserve">
    <value>借助该模式，即使颠倒或反向读取代码，也可以可靠地读取代码。</value>
  </data>
  <data name="PDF417_SEPAT_LABLE" xml:space="preserve">
    <value>开始和结束模式</value>
  </data>
  <data name="QR_FORMAT_DISC" xml:space="preserve">
    <value>在此，确定纠错等级。这表明在损坏的情况下可以恢复多少百分比的代码（7％-30％）。</value>
  </data>
  <data name="QR_FORMAT_LABLE" xml:space="preserve">
    <value>格式信息</value>
  </data>
  <data name="QR_VERSION_DISC" xml:space="preserve">
    <value>该版本指定QR码的40种预定义尺寸之一。</value>
  </data>
  <data name="QR_VERSION_LABLE" xml:space="preserve">
    <value>版本信息</value>
  </data>
  <data name="QR_NORMAL_DISC" xml:space="preserve">
    <value>在该区域中，数据显示为冗余，因此即使代码段被覆盖或损坏，也可以可靠地读取它们。</value>
  </data>
  <data name="QR_NORMAL_LABLE" xml:space="preserve">
    <value>数据</value>
  </data>
  <data name="EAN_INVALIDE_INPUT" xml:space="preserve">
    <value>输入包含无效字符。仅允许数字。</value>
  </data>
</root>