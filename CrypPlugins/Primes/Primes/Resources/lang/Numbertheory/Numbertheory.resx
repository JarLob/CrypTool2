<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="copy_savetable" xml:space="preserve">
    <value>Gesamte Tabelle in Datei speichern</value>
  </data>
  <data name="copy_selectedrow" xml:space="preserve">
    <value>Markierte Zeile in die Zwischenablage kopieren</value>
  </data>
  <data name="copy_table" xml:space="preserve">
    <value>Gesamte Tabelle in die Zwischenablage kopieren</value>
  </data>
  <data name="eulerphi" xml:space="preserve">
    <value>Eulersche Phi-Funktion</value>
  </data>
  <data name="eulerphisum" xml:space="preserve">
    <value>Teilersummenformel</value>
  </data>
  <data name="eulerphivalues" xml:space="preserve">
    <value>Liste der Teilerfremden</value>
  </data>
  <data name="exteuclid" xml:space="preserve">
    <value>Erweiterter euklidischer Algorithmus</value>
  </data>
  <data name="gcd" xml:space="preserve">
    <value>Größter gemeinsamer Teiler</value>
  </data>
  <data name="goldbach_desc" xml:space="preserve">
    <value>y(n) gibt an, auf wie viele Arten sich die Zahl n als Summe zweier Primzahlen schreiben lässt. Beispiel: 10 = 3 + 7 und 10 = 5 + 5, also ist y(10)=2.</value>
  </data>
  <data name="goldbach_sum" xml:space="preserve">
    <value>Summe</value>
  </data>
  <data name="goldbach_sums" xml:space="preserve">
    <value>Summen</value>
  </data>
  <data name="groupbox_choosefunctions" xml:space="preserve">
    <value>Auswahl der zu berechnenden Funktionen</value>
  </data>
  <data name="groupbox_input" xml:space="preserve">
    <value>Eingabe</value>
  </data>
  <data name="invalidnumber" xml:space="preserve">
    <value>{0} ist keine Zahl zwischen {1} und {2}. Sie wird daher nicht weiter ausgewertet.</value>
  </data>
  <data name="lcm" xml:space="preserve">
    <value>Kleinstes gemeinsames Vielfaches</value>
  </data>
  <data name="modinv" xml:space="preserve">
    <value>Modulare multiplikative Inverse</value>
  </data>
  <data name="pix" xml:space="preserve">
    <value>Anzahl der Primzahlen</value>
  </data>
  <data name="powermod_base" xml:space="preserve">
    <value>Basis</value>
  </data>
  <data name="powermod_btncancel" xml:space="preserve">
    <value>Abbrechen</value>
  </data>
  <data name="powermod_btnexecute" xml:space="preserve">
    <value>Ausführen</value>
  </data>
  <data name="powermod_btnnextstep" xml:space="preserve">
    <value>Nächster Schritt</value>
  </data>
  <data name="powermod_btnresume" xml:space="preserve">
    <value>Weiter mit automatischer Ausführung</value>
  </data>
  <data name="powermod_ccw" xml:space="preserve">
    <value>gegen den Uhrzeigersinn</value>
  </data>
  <data name="powermod_cw" xml:space="preserve">
    <value>im Uhrzeigersinn</value>
  </data>
  <data name="powermod_execution" xml:space="preserve">
    <value>{0}. {1} * {2} mod {3} = {4}</value>
  </data>
  <data name="powermod_executionfirst" xml:space="preserve">
    <value>{0}. {1} mod {2} = {3}</value>
  </data>
  <data name="powermod_exponent" xml:space="preserve">
    <value>Exponent</value>
  </data>
  <data name="powermod_inputgroupbox" xml:space="preserve">
    <value>Eingabeparameter</value>
  </data>
  <data name="powermod_modulus" xml:space="preserve">
    <value>Modulus</value>
  </data>
  <data name="powermod_points" xml:space="preserve">
    <value>Anordnung der Punkte</value>
  </data>
  <data name="powermod_progress" xml:space="preserve">
    <value>Fortschritt</value>
  </data>
  <data name="powermod_rbautomatic" xml:space="preserve">
    <value>Automatische Ausführung</value>
  </data>
  <data name="powermod_stepwise" xml:space="preserve">
    <value>Schrittweise Ausführung</value>
  </data>
  <data name="powermod_zoom" xml:space="preserve">
    <value>Zoom</value>
  </data>
  <data name="proot_btnCancel" xml:space="preserve">
    <value>Abbrechen</value>
  </data>
  <data name="proot_btnExecute" xml:space="preserve">
    <value>Auswerten</value>
  </data>
  <data name="proot_btnSkipCalculation" xml:space="preserve">
    <value>Die aktuelle Berechnung überspringen</value>
  </data>
  <data name="proot_calculating" xml:space="preserve">
    <value>Primitivwurzeln werden berechnet...</value>
  </data>
  <data name="proot_genprimes" xml:space="preserve">
    <value>Primzahlen generieren</value>
  </data>
  <data name="proot_input" xml:space="preserve">
    <value>Eingabe</value>
  </data>
  <data name="proot_insert" xml:space="preserve">
    <value>Bitte geben Sie etwas ein.</value>
  </data>
  <data name="proot_noprime" xml:space="preserve">
    <value>{0}  ist keine Primzahl. Sie wird daher nicht weiter ausgewertet.</value>
  </data>
  <data name="proot_novalidnumber" xml:space="preserve">
    <value>{0} ist keine Zahl zwischen {1} und {2}. Sie wird daher nicht weiter ausgewertet.</value>
  </data>
  <data name="proot_printing" xml:space="preserve">
    <value>Ausgabe...</value>
  </data>
  <data name="proot_progress" xml:space="preserve">
    <value>Fortschritt</value>
  </data>
  <data name="proot_rangeboth" xml:space="preserve">
    <value>Bitte geben Sie beide Intervall-Grenzen an.</value>
  </data>
  <data name="proot_rangedown" xml:space="preserve">
    <value>Bitte geben Sie beide Intervall-Grenzen an. Die Zahl {0} wird als Untergrenze eines geschlossenen Intervalls interpretiert. Es fehlt noch die Eingabe für die Obergrenze.</value>
  </data>
  <data name="proot_rangeupper" xml:space="preserve">
    <value>Bitte geben Sie beide Intervall-Grenzen an. Die Zahl {0} wird als Obergrenze eines geschlossenen Intervalls interpretiert. Es fehlt noch die Eingabe für die Untergrenze.</value>
  </data>
  <data name="proot_result" xml:space="preserve">
    <value>Ergebnis</value>
  </data>
  <data name="proot_resultcalc" xml:space="preserve">
    <value>{0} hat {1} Primitivwurzel</value>
  </data>
  <data name="proot_resultscalc" xml:space="preserve">
    <value>{0} hat {1} Primitivwurzeln</value>
  </data>
  <data name="proot_skip" xml:space="preserve">
    <value>Die Berechnung wurde abgebrochen.</value>
  </data>
  <data name="proot_warningbiginterval" xml:space="preserve">
    <value>Warnung: Das Intervall {0} enthält große Zahlen, für die die Berechnung sehr lange dauern kann.</value>
  </data>
  <data name="proot_warningbignumber" xml:space="preserve">
    <value>Warnung: Für große Zahlen wie {0} kann die Berechnung sehr lange dauern.</value>
  </data>
  <data name="proot_wronginterval" xml:space="preserve">
    <value>Die erste Zahl des Intervalls {0} muss kleiner sein als die zweite.</value>
  </data>
  <data name="secondparametermissing" xml:space="preserve">
    <value>Sie haben eine Funktion ausgewählt, die den zweiten Parameter benötigt.</value>
  </data>
  <data name="sigma" xml:space="preserve">
    <value>Summe der Teiler</value>
  </data>
  <data name="tabitemheader_goldbach" xml:space="preserve">
    <value>Goldbach-Vermutung</value>
  </data>
  <data name="tabitemheader_ntfunctions" xml:space="preserve">
    <value>Zahlentheoretische Funktionen</value>
  </data>
  <data name="tabitemheader_power" xml:space="preserve">
    <value>Potenzieren</value>
  </data>
  <data name="tabitemheader_proots" xml:space="preserve">
    <value>Primitivwurzeln</value>
  </data>
  <data name="tau" xml:space="preserve">
    <value>Anzahl der Teiler</value>
  </data>
  <data name="tauvalues" xml:space="preserve">
    <value>Liste der Teiler</value>
  </data>
</root>