//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Primes.OnlineHelp.HelpFiles {
    using System;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Help {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Help() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Primes.OnlineHelp.HelpFiles.Help", typeof(Help).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Distribution of prime numbers among the natural numbers&lt;/h2&gt;
        ///
        ///There are three functions which represent the distribution of primes among the natural numbers; each of the three approaches visualizes the distribution in quite a different way:
        ///&lt;ul&gt;
        ///&lt;li&gt;
        ///  &lt;a href=&quot;help://Distribution_Numberline&quot;&gt;Distribution on the number line&lt;/a&gt;
        ///&lt;/li&gt;
        ///&lt;li&gt;
        ///  &lt;a href=&quot;help://Distribution_Numbergrid&quot;&gt;Distribution within the number grid&lt;/a&gt;
        ///&lt;/li&gt;
        ///&lt;li&gt;
        ///  &lt;a href=&quot;help://Spiral_Ulam&quot;&gt;Distribution in the Ulam spiral [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Distribution_Distribution {
            get {
                return ResourceManager.GetString("Distribution_Distribution", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Euler&apos;s &amp;phi;-Function&lt;/h2&gt;
        ///
        ///Euler&apos;s &amp;phi;-function is an arithmetic function. For any natural number n, the function returns a number which is the count of integers between 1 and n which are relatively prime to n.&lt;br /&gt;
        ///See: &lt;a href=&quot;http://en.wikipedia.org/wiki/Euler%27s_totient_function&quot; target=&quot;_blank&quot;&gt;Euler&apos;s totient function&lt;/a&gt;&lt;br /&gt;
        ///&lt;br /&gt;
        ///The function is defined as follows:&lt;br /&gt;
        ///&lt;img src=&quot;eulerphi&quot; /&gt;
        ///&lt;br /&gt;
        ///
        ///The name of the function goes back to &lt;a href=&quot;http://de.wikipedia.org/wiki/ [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Distribution_EulerPhi {
            get {
                return ResourceManager.GetString("Distribution_EulerPhi", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Sum of Euler&apos;s &amp;phi;-function over divisors&lt;/h2&gt;
        ///
        ///For every natural number n, the sum of the Euler &amp;phi;-function of all its divisors is equal to the number n itself:&lt;br /&gt;
        ///&lt;img src=&quot;eulerphisum&quot; /&gt;
        /// ähnelt.
        /// </summary>
        internal static string Distribution_EulerPhiSum {
            get {
                return ResourceManager.GetString("Distribution_EulerPhiSum", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Goldbach&apos;s conjecture&lt;/h2&gt;
        ///
        ///&lt;a href=&quot;http://en.wikipedia.org/wiki/Goldbach&apos;s_conjecture&quot; target=&quot;_blank&quot;&gt;Goldbach&apos;s conjeture&lt;/a&gt; is that:&lt;br /&gt;&lt;br /&gt;
        ///&lt;i&gt;
        ///  Every even number greater than 2 can be expressed uniquely as the sum of two primes.
        ///&lt;/i&gt;
        ///&lt;br /&gt;
        ///&lt;br /&gt;
        ///It was formulated 1742 by the mathematician Christian Goldbach in a letter to Leonhard Euler. Many mathematicians have tried to prove or disprove the conjecture, but to date no one has achieved this. Proof of the truth of Goldbach&apos;s conjec [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Distribution_Goldbach {
            get {
                return ResourceManager.GetString("Distribution_Goldbach", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Distribution of prime numbers in the number grid&lt;/h2&gt;
        ///
        ///&lt;p align=&quot;justify&quot;&gt;
        ///The natural numbers are here displayed as a grid, and the &quot;grid number&quot; is shown.
        ///Each box (square) in this grid represents a number. Prime numbers are shown as red squares.
        ///
        ///&lt;br /&gt;&lt;br /&gt;The number of rows and columns of the numerical grid can be changed by typing in the text box or by dragging the lower left and right margins.
        ///&lt;br /&gt;&lt;br /&gt;The buttons on the left allow you to scroll up and down. Click on the button with tw [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Distribution_Numbergrid {
            get {
                return ResourceManager.GetString("Distribution_Numbergrid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Distribution of prime numbers on the number line&lt;/h2&gt;
        ///
        ///&lt;p align=&quot;justify&quot;&gt;
        ///Euclid&apos;s theorem proves that there are infinitely many prime numbers. Their properties have been studied by mathematicians for thousands of years and still no one has discovered whether there is a pattern to the way in which the primes are distributed among the natural numbers - let alone to define such a distribution.
        ///&lt;br /&gt;&lt;br /&gt;
        ///This dialog shows the natural numbers &amp;gt;= 2. Every prime number is a pale blue dot; composit [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Distribution_Numberline {
            get {
                return ResourceManager.GetString("Distribution_Numberline", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Prime quadruplet&lt;/h2&gt;
        ///
        ///A &lt;a href=&quot;http://en.wikipedia.org/wiki/Prime_quadruplet&quot; target=&quot;_blank&quot;&gt;prime quadruplet&lt;/a&gt; is a pair of two consecutive twin primes having a spacing of four (4) between the larger prime of the smaller twin and the smaller prime of the larger twin. For example: The first prime quadruplets are (11,13,17,19), (101,103,107,109) &amp;amp; (191,193,197,199). Thus, we note that there is a difference of 4 between 13 and 17, between 103 and 107, and between 193 and 197.
        ///
        ///It is still un [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Distribution_QuadrupletPrimes {
            get {
                return ResourceManager.GetString("Distribution_QuadrupletPrimes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Sum of divisors&lt;/h2&gt;
        ///
        ///This function returns the sum of all the divisors of a natural number n (including 1 and n). &lt;br /&gt;
        ///It is defined as follows:&lt;br /&gt;
        ///&lt;img src=&quot;sigma&quot; /&gt;&lt;br /&gt;
        ///It is also used in the definiton of &lt;a href=&quot;http://en.wikipedia.org/wiki/Perfect_number&quot; target=&quot;_blank&quot;&gt;perfect numbers&lt;/a&gt;.
        ///&lt;br /&gt;
        ///It holds that &amp;sigma;(p) = p+1 for all prime numbers, and &amp;sigma;(n) = 2n for all perfect numbers.
        /// ähnelt.
        /// </summary>
        internal static string Distribution_Sigma {
            get {
                return ResourceManager.GetString("Distribution_Sigma", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Prime sextuplet&lt;/h2&gt;
        ///
        ///A &lt;a href=&quot;http://en.wikipedia.org/wiki/Prime_sextuplet&quot; target=&quot;_blank&quot;&gt;prime sextuplet&lt;/a&gt; is a group of 6 consecutive prime numbers with the distances 4, 2, 4, 2, and 4 between them. The middle four primes are therefore a &lt;a href=&quot;help://Distribution_QuadrupletPrimes&quot; &gt;prime quadruplet&lt;/a&gt;.
        ///The first prime number sextuplets are &lt;i&gt;(7, 11, 13, 17, 19, 23)&lt;/i&gt;, &lt;i&gt;(97, 	101, 	103, 	107, 	109, 	113)&lt;/i&gt; and &lt;i&gt;(16057, 	16061, 	16063, 	16067, 	16069, 	16073)&lt;/i&gt;.
        /// ähnelt.
        /// </summary>
        internal static string Distribution_SixTupletPrimes {
            get {
                return ResourceManager.GetString("Distribution_SixTupletPrimes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Number of divisors&lt;/h2&gt;
        ///
        ///The Tau function indicates the number of divisors a natural number n has. The divisors 1 and n, factors for any integer, are also taken into account, so that prime numbers will have exactly two factors. The function is denoted by the Greek letter &amp;tau;.&lt;br /&gt;
        ///&lt;br /&gt;
        ///It is defined in the following way:&lt;br /&gt;
        ///&lt;img src=&quot;tau&quot; /&gt;
        ///&lt;br /&gt;
        ///&lt;br /&gt;
        ///It holds that &amp;tau; (p) = 2 for all primes.
        ///Relation to the &amp;phi;-function: &amp;tau; (n) + &amp;phi; (n) = n + 1 for all n in N.
        /// ähnelt.
        /// </summary>
        internal static string Distribution_Tau {
            get {
                return ResourceManager.GetString("Distribution_Tau", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Twin primes&lt;/h2&gt;
        ///
        ///A &lt;a href=&quot;http://en.wikipedia.org/wiki/Twin_prime&quot; target=&quot;_blank&quot;&gt;twin prime&lt;/a&gt; is a pair of prime numbers with the smaller prime separated by 2 from the larger. The first twin primes are &lt;i&gt;(3,5)&lt;/i&gt;, &lt;i&gt;(5,7)&lt;/i&gt;, and &lt;i&gt;(11,13)&lt;/i&gt;.
        ///It is still not known whether there are infinitely many twin primes. This question is one of the great &lt;a href=&quot;http://en.wikipedia.org/wiki/List_of_unsolved_problems_in_mathematics&quot; target=&quot;_blank&quot;&gt;unsolved problems of mathematics&lt;/a&gt;.
        /// &lt;br /&gt;&lt;br [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Distribution_TwinPrimes {
            get {
                return ResourceManager.GetString("Distribution_TwinPrimes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Factorization by trial division (brute-force method)&lt;/h2&gt;
        ///
        ///Trial division is a very intuitive method of factorization.
        ///One begins by dividing the number to be factored by 2. If the number is divisible by 2 without remainder (known as dividing evenly), we then divide the result by 2 again. This process is continued until the result is no longer divisible by 2.
        ///The next step is to divide by 3 in the same manner, until the result of the division by 3 is no longer even.
        ///The process continues, with the  [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Factorization_BruteForce {
            get {
                return ResourceManager.GetString("Factorization_BruteForce", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Factorization (factoring) of numbers&lt;/h2&gt;
        ///
        ///The fundamental theorem of arithmetic says that every number can be uniquely broken down into its prime factors.
        ///To aid in the calculation of these prime factors, this tutorial provides the methods
        ///
        ///&lt;ul&gt;
        ///&lt;li&gt;&lt;a href=&quot;help://Factorization_BruteForce&quot;&gt;Trial Division&lt;/a&gt; and &lt;/li&gt;
        ///&lt;li&gt;&lt;a href=&quot;help://Factorization_QS&quot;&gt;Quadratic Sieve&lt;/a&gt;.&lt;/li&gt;
        ///&lt;/ul&gt;
        /// ähnelt.
        /// </summary>
        internal static string Factorization_Factorization {
            get {
                return ResourceManager.GetString("Factorization_Factorization", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Generate random numbers for factoring&lt;/h2&gt;
        ///
        ///Your chosen method of factoring will determine both the duration and the resource consumption of the process.
        ///&lt;ul&gt;
        ///&lt;li&gt;
        ///&lt;strong&gt;Trial Division&lt;/strong&gt;
        ///&lt;br /&gt;
        ///To use Trial Division, call up the procedure and fill in variables before running. Execution will use a great deal of memory and processor time. We have set a maximum limit for this procedure; should a factor not be found after 100,000 iterations, the process will terminate automatically.
        ///&lt;/li&gt;
        /// [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Factorization_Generate {
            get {
                return ResourceManager.GetString("Factorization_Generate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Generation of a very large random number&lt;/h2&gt;
        ///
        ///This routine generates a random number with 100 decimal digits for use in factorization. The chosen method of factorization determines the duration and the resource consumption of the process. Reasonable restraints are provided; for example, since the trial division process requires large amounts of memory and processor time, if no factor has been found following 20,000 attempts, the process is aborted.
        /// ähnelt.
        /// </summary>
        internal static string Factorization_Generate_BigInteger {
            get {
                return ResourceManager.GetString("Factorization_Generate_BigInteger", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Factorization with the quadratic sieve&lt;/h2&gt;
        ///
        ///The quadratic sieve is one of the fastest methods for factoring a natural number n. It makes use of mathematical principles that date back on the French mathematician Pierre de Fermat. The method is more complex and mathematically more sophisticated than trial division. Therefore, an example is presented here.&lt;br /&gt;&lt;br /&gt;
        ///The quadratic sieve makes use of congruences, so we first introduce the concept of congruences.
        ///
        ///&lt;h4&gt;Congruence&lt;/h4&gt;
        ///Two whole numbers a an [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Factorization_QS {
            get {
                return ResourceManager.GetString("Factorization_QS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Test Euler&apos;s quadratic polynomial&lt;/h2&gt;
        ///
        ///The mathematician &lt;a href=&quot;http://en.wikipedia.org/wiki/Leonhard_Euler&quot; target=&quot;_blank&quot;&gt;Leonhard Euler&lt;/a&gt; discovered that the quadratic polynomial&lt;br /&gt;
        ///&lt;img src=&quot;eulerpolynom&quot; /&gt;&lt;br /&gt; yields only primes for inputs 0 to 39.&lt;br /&gt;
        ///In this dialog, Euler&apos;s polynomial can be calculated for any interval.
        /// ähnelt.
        /// </summary>
        internal static string Generation_GenerateEuler1 {
            get {
                return ResourceManager.GetString("Generation_GenerateEuler1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Test a particular quadratic polynomial&lt;/h2&gt;
        ///
        ///Here you can generate quadratic polynomials of the form
        ///&lt;br /&gt;
        ///&lt;img src=&quot;quadratic&quot; /&gt;&lt;br /&gt;
        ///and calculate their values for an interval of x.&lt;br /&gt;
        ///The parameters &lt;i&gt;a&lt;/i&gt;, &lt;i&gt;b&lt;/i&gt; and &lt;i&gt;c&lt;/i&gt; can be entered in their corresponding input fields.
        ///The interval of the independent variable x can be specified in the input field &quot;Values for x&quot;.
        /// ähnelt.
        /// </summary>
        internal static string Generation_GenerateQuadratic {
            get {
                return ResourceManager.GetString("Generation_GenerateQuadratic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Test randomly generated quadratic polynomials&lt;/h2&gt;
        ///
        ///Selection of this dialog box creates random quadratic polynomials of the general form
        ///&lt;br /&gt;
        ///&lt;img src=&quot;quadratic&quot; /&gt;&lt;br /&gt;
        ///and these are then calculated. The intervals from which the parameters &lt;i&gt;a&lt;/i&gt;, &lt;i&gt;b&lt;/i&gt; and &lt;i&gt;c&lt;/i&gt; are chosen randomly, can be specified.
        ///Likewise, the user can specify whether the values for x are chosen randomly or whether x should take all values from a given interval.
        /// ähnelt.
        /// </summary>
        internal static string Generation_GenerateQuadraticRandom {
            get {
                return ResourceManager.GetString("Generation_GenerateQuadraticRandom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Test polynomials systematically&lt;/h2&gt;
        ///
        ///With this dialog you can systematically generate quadratic polynomials of the form
        ///&lt;br /&gt;
        ///&lt;img src=&quot;quadratic&quot; /&gt;&lt;br /&gt;
        ///and evaluate them.
        ///The polynomials are generated by iterating through all combinations of the coefficients &lt;i&gt;a&lt;/i&gt;, &lt;i&gt;b&lt;/i&gt; and &lt;i&gt;c&lt;/i&gt;, that the specification of their intervals allow.
        ///The interval of the independent variable x can be specified in the input field &quot;Values for x&quot;.
        /// ähnelt.
        /// </summary>
        internal static string Generation_GenerateQuadraticSystematic {
            get {
                return ResourceManager.GetString("Generation_GenerateQuadraticSystematic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Generation of primes&lt;/h2&gt;
        ///
        ///Prime numbers are of great importance for cryptography.
        ///The RSA cipher for example requires two big prime numbers for the generation of its key pair.&lt;br /&gt;
        ///This dialog is grouped in two sections.
        ///In the first section, you can generate as many prime numbers as you like and as big as you like.
        ///This is done by first generating a random number and checking it and the subsequent numbers with a probabilistic prime number test, until a prime number candidate is found.&lt;br /&gt;
        ///Th [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Generation_Generation {
            get {
                return ResourceManager.GetString("Generation_Generation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Test quadratic polynomials&lt;/h2&gt;
        ///
        ///Mathematicians discovered, that some polynomials of the general form&lt;br /&gt;
        ///&lt;img src=&quot;quadratic&quot; /&gt;&lt;br /&gt; produce more prime numbers for a range of input values than others.
        ///
        ///&lt;a href=&quot;http://en.wikipedia.org/wiki/Leonhard_Euler&quot; target=&quot;_blank&quot;&gt;Leonhard Euler&lt;/a&gt;
        ///found the polynomial&lt;br /&gt;
        ///&lt;img src=&quot;eulerpolynom&quot; /&gt;&lt;br /&gt;, that produces prime numbers for all input values &lt;i&gt;x&lt;/i&gt; from 0 to 39.&lt;br /&gt;
        ///
        ///With this dialog, you can look for polynomials that produce man [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Generation_Quadratic {
            get {
                return ResourceManager.GetString("Generation_Quadratic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Create random primes&lt;/h2&gt;
        ///
        ///Prime numbers are used in many cryptographic algorithms. The RSA algorithm for example needs two very big prime numbers for the creation of a secure key pair.
        ///These big prime numbers are usually created with the help of a random number generator.&lt;br /&gt;
        ///
        ///With this dialog you can generate a list of 10 random prime numbers with either 20, 50 or 100 digits, or even up to 500 digits by using the &lt;a href=&quot;help://Generation_RandomNTimesM&quot; &gt;&quot;n x m digits&quot;&lt;/a&gt; input field.
        /// ähnelt.
        /// </summary>
        internal static string Generation_Random {
            get {
                return ResourceManager.GetString("Generation_Random", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Create random primes with m digits&lt;/h2&gt;
        ///
        ///This dialog allows you to generate a list of n prime numbers, each with m digits. In principle, the size of the prime numbers that a computer can generate is not bounded, but as it takes longer and longer as more digits are requested, the maximum number of digits is here limited to 500.
        /// ähnelt.
        /// </summary>
        internal static string Generation_RandomNTimesM {
            get {
                return ResourceManager.GetString("Generation_RandomNTimesM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Sieve of Atkin&lt;/h2&gt;
        ///
        ///The sieve of Atkin was developed by the mathematician A.O.L. Atkin in 2004.
        ///His method finds all prime numbers up to a given limit and is an optimization
        ///of the &lt;a href=&quot;help://Primetest_SieveOfEratosthenes&quot; &gt;Sieve of Eratosthenes&lt;/a&gt;.
        ///It makes use of certain modular congruences to detect a prime number.
        ///&lt;br /&gt;
        ///This dialog generates a list of all numbers up to the given limit and marks them all as &quot;nonprime&quot; in the beginning.
        ///In the course of the algorithm, the state of each [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Generation_SieveOfAtkin {
            get {
                return ResourceManager.GetString("Generation_SieveOfAtkin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;The prime number theorem&lt;/h2&gt;
        ///
        ///At the age of 15 years, &lt;a href=&quot;http://en.wikipedia.org/wiki/Carl_Friedrich_Gauss&quot; target=&quot;_blank&quot;&gt;Carl Friedrich Gauss&lt;/a&gt;
        ///formulated an assumption about the number of prime numbers up to a given natural number &lt;strong&gt;n&lt;/strong&gt;.
        ///In the appendix of a logarithm table he found a list of all prime numbers up to 1000. He counted the number of prime numbers up to 10, 100, ..., and deduced that &amp;pi;(n)~n/ln(n), but he found no proof for this. A proof was found 100 years l [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Graph_GaussPi {
            get {
                return ResourceManager.GetString("Graph_GaussPi", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Limits of calculating the number of prime numbers&lt;/h2&gt;
        ///
        ///If you enter range limits of more than one million, evaluating the number of prime numbers with the function &lt;a href=&quot;help://Graph_PiX&quot; &gt;&amp;pi;(x)&lt;/a&gt; can take a very long time as this function calculates the exact number of primes.
        ///For numbers bigger than one billion, also the evaluation of the &lt;a href=&quot;help://Graph_LiN&quot; &gt;logarithmic integral&lt;/a&gt; will become very slow.&lt;br /&gt;
        ///You can interrupt the evaluation of each of the functions by pressing t [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Graph_LargeNumbers {
            get {
                return ResourceManager.GetString("Graph_LargeNumbers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;The logarithmic integral function&lt;/h2&gt;
        ///
        ///The logarithmic integral function of J. P. G. L. Dirichlet is an improvement of
        ///&lt;a href=&quot;http://en.wikipedia.org/wiki/Carl_Friedrich_Gauss&quot; target=&quot;_blank&quot;&gt;Gauss&apos;&lt;/a&gt; first estimation of the
        ///number of primes, the &lt;a href=&quot;help://Graph_GaussPi&quot; &gt;prime number theorem&lt;/a&gt;.
        ///&lt;br /&gt;
        ///Like the prime number theorem, the logarithmic integral gives an approximation of the number of prime numbers up to a given natural number &lt;strong&gt;n&lt;/strong&gt;.
        ///For big values of &lt;stron [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Graph_LiN {
            get {
                return ResourceManager.GetString("Graph_LiN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;The number of prime numbers&lt;/h2&gt;
        ///
        ///There is no known formula for calculating the number of prime numbers up to a given natural number &lt;strong&gt;n&lt;/strong&gt;.
        ///If you want to know how many prime numbers there are up to &lt;strong&gt;n&lt;/strong&gt;, you have to essentially determine for each of the numbers up to n if they are prime numbers and count the primes. The function that counts the primes is called &amp;pi;(n).
        ///It is a step function, which can be seen in the visualization when using small interval sizes.
        ///&lt;br /&gt;&lt; [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Graph_PiX {
            get {
                return ResourceManager.GetString("Graph_PiX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Counting the number of prime numbers&lt;/h2&gt;
        ///
        ///In 300 BC, the Greek mathematician &lt;a href=&quot;http://en.wikipedia.org/wiki/Euclid&quot; target=&quot;_blank&quot;&gt;Euclid&lt;/a&gt; proved that there are infinitely many prime numbers.
        ///
        ///&lt;a href=&quot;http://en.wikipedia.org/wiki/Carl_Friedrich_Gauss&quot; target=&quot;_blank&quot;&gt;Carl Friedrich Gauss&lt;/a&gt; was the first to try to estimate the
        ///number of prime numbers up to a given number n.
        ///
        ///With this dialog, you can evaluate three different functions that count the prime numbers in a given range.
        /// [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Graph_PrimesCount {
            get {
                return ResourceManager.GetString("Graph_PrimesCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Modular powers&lt;/h2&gt;
        ///
        ///Calculating the &lt;strong&gt;powers&lt;/strong&gt; of a number in a &lt;a href=&quot;http://en.wikipedia.org/wiki/Quotient_ring&quot; target=&quot;_blank&quot;&gt;residue class ring&lt;/a&gt; is a mathematical operation that plays an important role in many cryptographic methods (e.g. RSA). The reason for this is that in a residue class ring the powers of a number can be calculated very fast and easy, whereas the inverse operation, i.e. calculating the discrete logarithm of a number, is very difficult. There are no known ef [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Modular_Exponentiation {
            get {
                return ResourceManager.GetString("Modular_Exponentiation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Number-theoretic functions&lt;/h2&gt;
        ///
        ///&lt;strong&gt;Number-theoretic (or arithmetic) functions&lt;/strong&gt; are functions whose domain is the set of natural numbers and that take real or complex values.
        ///In &lt;a href=&quot;http://en.wikipedia.org/wiki/Number_theory&quot; target=&quot;_blank&quot;&gt;number theory&lt;/a&gt;, the properties of natural numbers are examined and described, especially with respect to their divisibility.&lt;br /&gt;
        ///&lt;br /&gt;
        ///A special type of number-theoretic functions are the &lt;strong&gt;multiplicative number-theoretic functions [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Numbertheoretic_Functions {
            get {
                return ResourceManager.GetString("Numbertheoretic_Functions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Number theory&lt;/h2&gt;
        ///
        ///&lt;strong&gt;Number theory&lt;/strong&gt; is the branch of mathematics that is devoted to the study of integers. It plays a significant role in cryptology, because the security of many encryption methods depends on as yet unsolved number theoretical problems, for example the efficient factorization of big integers.
        ///&lt;br /&gt;
        ///&lt;br /&gt;
        ///The following four sections allow you to experiment with some number theoretic aspects:
        ///&lt;ul&gt;
        ///&lt;li&gt;
        ///  &lt;a href=&quot;help://Modular_Exponentiation&quot;&gt;Powering&lt;/a&gt;
        ///&lt;/li&gt;        /// [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Numbertheory_Numbertheory {
            get {
                return ResourceManager.GetString("Numbertheory_Numbertheory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Pari/GP for the evaluation of the logarithmic integral&lt;/h2&gt;
        ///
        ///Pari/GP is an open source &lt;a href=&quot;http://en.wikipedia.org/wiki/Computer_algebra_system&quot; target=&quot;_blank&quot;&gt;computer algebra system (CAS)&lt;/a&gt;,
        ///that offers very fast implementations of arithmetic functions.&lt;br /&gt;
        ///It evaluates the logarithmic integral with much more precision than using Simpson&apos;s rule.&lt;br /&gt;
        ///Pari/GP can be downloaded from the &lt;a href=&quot;http://pari.math.u-bordeaux.fr/&quot;target=&quot;_blank&quot;&gt;webite of the University of Bordeaux&lt;/a&gt;.
        ///&lt;b [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Pari_Lin {
            get {
                return ResourceManager.GetString("Pari_Lin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Miller-Rabin test&lt;/h2&gt;
        ///
        ///&lt;p align=&quot;justify&quot;&gt;
        ///The Miller-Rabin test is the most often used primality test.
        ///It is based on &lt;a href=&quot;http://de.wikipedia.org/wiki/Kleiner_fermatscher_Satz&quot; target=&quot;_blank&quot;&gt;Fermat&apos;s Little Theorem&lt;/a&gt;.
        ///A very clear explanation of the procedure can be found &lt;a href=&quot;http://www.iti.fh-flensburg.de/lang/krypto/algo/primtest.htm&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; (in German).
        ///Because of the nature of this test, mistakes are possible: The method may produce a result which is supposedl [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Primetest_MillerRabin {
            get {
                return ResourceManager.GetString("Primetest_MillerRabin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Primality test&lt;/h2&gt;
        ///
        ///A prime number test answers the question &quot;Is the given number n a prime number?&quot; with yes or no.
        ///
        ///Such tests are often required by cryptographic methods that use prime numbers.
        ///The RSA cryptosystem for example relies on the fact that the &lt;a href=&quot;help://Factorization_Factorization&quot;&gt;factorization&lt;/a&gt; of a number into its prime factors is a very difficult mathematical problem and may take a very, very long time for big numbers.
        ///
        ///In practise, RSA initially needs two randomly gen [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Primetest_Primetest {
            get {
                return ResourceManager.GetString("Primetest_Primetest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Sieve of Eratosthenes&lt;/h2&gt;
        ///
        ///The sieve of Eratosthenes is a method for finding all prime numbers up to a given number.
        ///To test if a given number is prime, one determines all primes smaller than the given number and
        ///checks, if it is part of the list of the found primes. 
        ///The method dates back on the Greek mathematician Eratosthenes of Cyrene (ca. 200 BC).&lt;br /&gt;&lt;br /&gt;
        ///&lt;b&gt;Method:&lt;/b&gt;&lt;br /&gt;
        ///Take the list of all numbers 1 to n.
        ///Start with the number 2. Cross out all multiples of 2 (excluding 2 itself) [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Primetest_SieveOfEratosthenes {
            get {
                return ResourceManager.GetString("Primetest_SieveOfEratosthenes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Primitive roots of a prime number: entering values&lt;/h2&gt;
        ///
        ///You can calculate the primitive roots for multiple prime numbers by entering the primes in the following form:&lt;br /&gt;
        ///[prime1], [prime2], [prime3], ...
        ///&lt;br /&gt;
        ///&lt;br /&gt;
        ///You can also calculate the primitive roots for all prime numbers in a range of numbers by entering the range in the form [number1]:[number2].&lt;br /&gt;
        ///The following image shows an example:&lt;br /&gt;
        ///&lt;img src=&quot;primitivroot_inputsample&quot; /&gt;
        /// ähnelt.
        /// </summary>
        internal static string PrimitivRoot_Input {
            get {
                return ResourceManager.GetString("PrimitivRoot_Input", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Primitive root of a prime number&lt;/h2&gt;
        ///
        ///A &lt;strong&gt;primitive root&lt;/strong&gt; modulo m is a term from &lt;a href=&quot;http://en.wikipedia.org/wiki/Number_theory&quot; target=&quot;_blank&quot;&gt;number theory&lt;/a&gt;, an 
        ///&lt;a href=&quot;http://en.wikipedia.org/wiki/Areas_of_mathematics&quot; target=&quot;_blank&quot;&gt;area of mathematics&lt;/a&gt;.&lt;br /&gt;
        ///
        ///A primitive root is a special element of the prime residues with the property, that each 
        ///of the prime residues can be represented as a power of the primitive root.&lt;br /&gt;
        ///For example, 6 is a primitive roo [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string PrimitivRoot_PrimitivRoot {
            get {
                return ResourceManager.GetString("PrimitivRoot_PrimitivRoot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Simpson&apos;s rule is used to calculate logarithmic integrals&lt;/h2&gt;
        ///
        ///&lt;p align=&quot;justify&quot;&gt;
        ///&lt;a href=&quot;http://en.wikipedia.org/wiki/Simpson&apos;s_rule&quot; target=&quot;_blank&quot;&gt;Simpson&apos;s rule&lt;/a&gt; is an &quot;approximation method&quot; for calculating an integral; this means that the calculated value does not correspond exactly with that of the integral. While this formula gives less accurate values than those calculated using Pari / GP will, the calculation is significantly faster.
        ///&lt;/p&gt;
        /// ähnelt.
        /// </summary>
        internal static string Simpson_Lin {
            get {
                return ResourceManager.GetString("Simpson_Lin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Ulam&apos;s spiral&lt;/h2&gt;
        ///
        ///The &lt;a href=&quot;http://en.wikipedia.org/wiki/Ulam_spiral&quot; target=&quot;_blank&quot;&gt;Ulam spiral&lt;/a&gt; is a famous method of visualizing the prime numbers.
        ///It was discovered by the mathematician Stanisław Ulam in 1963 during a boring presentation, when he started writing the natural numbers on a graphed paper in the shape of a spiral. He then marked all the prime numbers and to his surprise he found, that almost all of the prime numbers lay on
        ///diagonals.&lt;br /&gt;
        ///
        ///This dialog draws the Ulam spira [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Spiral_Ulam {
            get {
                return ResourceManager.GetString("Spiral_Ulam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;The World of Prime Numbers - Help&lt;/h2&gt;
        ///
        ///Welcome to the online help of the Crypto Tutorial &quot;The World of Prime Numbers&quot;.&lt;/br&gt;
        ///Here you can find detailed informations about the properties and applications of prime numbers.&lt;/br&gt;&lt;/br&gt;
        ///You can reach the different pages of this Crypto Tutorial via the navigation tab on the left side.
        ///More information about a topic is provided when you click on the help icon that is located near the corresponding item.
        /// ähnelt.
        /// </summary>
        internal static string StartControl {
            get {
                return ResourceManager.GetString("StartControl", resourceCulture);
            }
        }
    }
}
