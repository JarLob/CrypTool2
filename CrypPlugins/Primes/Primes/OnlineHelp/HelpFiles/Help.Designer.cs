//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.296
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Primes.OnlineHelp.HelpFiles {
    using System;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Help {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Help() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Primes.OnlineHelp.HelpFiles.Help", typeof(Help).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Verteilung der Primzahlen in den natürlichen Zahlen&lt;/h2&gt;
        ///
        ///Es stehen drei Funktionen zur Verfügung, die die Verteilung der Primzahlen in den natürlichen Zahlen auf unterschiedliche Weise darstellen.
        ///&lt;ul&gt;
        ///&lt;li&gt;
        ///  &lt;a href=&quot;help://Distribution_Numberline&quot;&gt;Verteilung auf der Zahlengerade&lt;/a&gt;
        ///&lt;/li&gt;
        ///&lt;li&gt;
        ///  &lt;a href=&quot;help://Distribution_Numbergrid&quot;&gt;Verteilung im Zahlengitter&lt;/a&gt;
        ///&lt;/li&gt;
        ///&lt;li&gt;
        ///  &lt;a href=&quot;help://Spiral_Ulam&quot;&gt;Verteilung in der Ulam-Spriale&lt;/a&gt;
        ///&lt;/li&gt;
        ///&lt;/ul&gt;
        /// ähnelt.
        /// </summary>
        internal static string Distribution_Distribution {
            get {
                return ResourceManager.GetString("Distribution_Distribution", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Eulersche &amp;phi;-Funktion&lt;/h2&gt;
        ///
        ///Die Eulersche &amp;phi;-Funktion ist eine zahlentheoretische Funktion. Sie gibt für jede natürliche Zahl n die Anzahl der zu ihr teilerfremden natürlichen Zahlen an.
        ///&lt;br /&gt;
        ///Ihre Definition lautet:&lt;br /&gt;
        ///&lt;img src=&quot;eulerphi&quot; /&gt;
        ///&lt;br /&gt;
        ///Der Name der Funktion geht auf &lt;a href=&quot;http://de.wikipedia.org/wiki/Leonhard_Euler&quot; target=&quot;_blank&quot;&gt;Leonhard Euler&lt;/a&gt; zurück, der diese Funktion erstmals mit dem &lt;a href=&quot;http://de.wikipedia.org/wiki/Kleiner_Fermat&quot; target=&quot;_blank&quot;&gt;kleinen [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Distribution_EulerPhi {
            get {
                return ResourceManager.GetString("Distribution_EulerPhi", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Teilersummenformel&lt;/h2&gt;
        ///
        ///Summiert man für eine natürliche Zahl n die Eulersche &amp;phi;-Funktion für alle ihre Teiler auf, so erhält man die Zahl n selbst:&lt;br /&gt;
        ///&lt;br /&gt;
        ///&lt;img src=&quot;eulerphisum&quot; /&gt;
        /// ähnelt.
        /// </summary>
        internal static string Distribution_EulerPhiSum {
            get {
                return ResourceManager.GetString("Distribution_EulerPhiSum", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Die Goldbach-Vermutung&lt;/h2&gt;
        ///
        ///Die Goldbach-Vermutung lautet:&lt;br /&gt;&lt;br /&gt;
        ///&lt;i&gt;
        ///  Jede gerade Zahl größer als 2 kann als Summe zweier Primzahlen geschrieben werden.
        ///&lt;/i&gt;
        ///&lt;br /&gt;
        ///&lt;br /&gt;
        ///Die &lt;a href=&quot;http://de.wikipedia.org/wiki/Goldbachsche_Vermutung&quot; target=&quot;_blank&quot;&gt;Vermutung&lt;/a&gt; wurde von dem Mathematiker Christian Goldbach in einem Brief an Leonhard Euler aufgestellt. Viele Mathematiker haben versucht, die Vermutung zu beweisen oder zu widerlegen, aber bis heute ist dies niemandem gelungen. Die Gol [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Distribution_Goldbach {
            get {
                return ResourceManager.GetString("Distribution_Goldbach", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Verteilung der Primzahlen im Zahlengitter&lt;/h2&gt;
        ///
        ///&lt;p align=&quot;justify&quot;&gt;
        ///Die natürlichen Zahlen werden hier als Gitter dargestellt. Jedes Feld (Quadrat) in diesem Gitter
        ///steht für eine Zahl. Primzahlen werden als rote Quadrate dargestellt.
        ///
        ///&lt;br /&gt;&lt;br /&gt;Die Anzahl der Zeilen und Spalten des Zahlengitters kann über die Eingabe in den Textboxen
        ///oder durch Ziehen am linken, unteren und rechten Rand verändert werden.
        ///&lt;br /&gt;&lt;br /&gt;Über die Schaltflächen links, kann man nach oben und unten scrollen. Durch Kl [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Distribution_Numbergrid {
            get {
                return ResourceManager.GetString("Distribution_Numbergrid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Verteilung der Primzahlen auf der Zahlengeraden&lt;/h2&gt;
        ///
        ///&lt;p align=&quot;justify&quot;&gt;
        ///Nach dem Satz von Euklid gibt es unendlich viele Primzahlen. Ihre Eigenschaften wurden von vielen Mathematikern über
        ///viele Jahre erforscht und doch kann niemand genau sagen, ob es eine Regel gibt, nach der die Primzahlen in den natürlichen Zahlen verteilt sind.&lt;br /&gt;
        ///Der vorliegende Dialog zeigt die natürlichen Zahlen ab 2. Jede Primzahl ist ein hellblauer Punkt, zusammengesetzte Zahlen sind schwarze Punkte.
        ///Die Größe des an [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Distribution_Numberline {
            get {
                return ResourceManager.GetString("Distribution_Numberline", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Primzahlvierling&lt;/h2&gt;
        ///
        ///Ein &lt;a href=&quot;http://de.wikipedia.org/wiki/Primzahlvierling&quot; target=&quot;_blank&quot;&gt;Primzahlvierling&lt;/a&gt; ist ein Paar aus zwei aufeinander folgenden Primzahlzwillingen mit dem Abstand 4, d.h zwischen der größeren Primzahl des kleineren Zwillings und der kleineren Primzahl des größeren Zwillings liegen
        ///4 Zahlen. Die ersten Primzahlvierlinge sind &lt;i&gt;(11,13,17,19)&lt;/i&gt;, &lt;i&gt;(101,103,107,109)&lt;/i&gt;, &lt;i&gt;(191,193,197,199)&lt;/i&gt;.
        ///Wir sehen, dass der Abstand zwischen 13 und 17, zwischen 103 und 107 [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Distribution_QuadrupletPrimes {
            get {
                return ResourceManager.GetString("Distribution_QuadrupletPrimes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Summe der Teiler&lt;/h2&gt;
        ///
        ///Diese Funktion gibt die Summe aller Teiler (inklusive 1 und n) einer natürlichen Zahl n an. &lt;br /&gt;
        ///Ihre Definition lautet:&lt;br /&gt;
        ///&lt;img src=&quot;sigma&quot; /&gt;&lt;br /&gt;
        ///Diese Funktion wird bei der Definition von &lt;a href=&quot;http://de.wikipedia.org/wiki/Vollkommene_Zahlen&quot; target=&quot;_blank&quot;&gt;vollkommenen Zahlen&lt;/a&gt; verwendet.
        ///&lt;br /&gt;
        ///Es gilt: &amp;sigma;(p) = p+1 für alle Primzahlen, und &amp;sigma;(n) = 2n für alle vollkommenen Zahlen.
        /// ähnelt.
        /// </summary>
        internal static string Distribution_Sigma {
            get {
                return ResourceManager.GetString("Distribution_Sigma", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Primzahlsechsling&lt;/h2&gt;
        ///
        ///Ein &lt;a href=&quot;http://de.wikipedia.org/wiki/Primzahlsechsling&quot; target=&quot;_blank&quot;&gt;Primzahlsechsling&lt;/a&gt; sind sechs aufeinander folgende Primzahlen
        ///mit den Abständen 4, 2, 4, 2, 4. Die mittleren vier Primzahlen sind also ein &lt;a href=&quot;help://Distribution_QuadrupletPrimes&quot; &gt;Primzahlvierling&lt;/a&gt;.
        ///Die ersten Primzahlsechslinge sind &lt;i&gt;(7, 11, 13, 17, 19, 23)&lt;/i&gt;, &lt;i&gt;(97, 	101, 	103, 	107, 	109, 	113)&lt;/i&gt; und &lt;i&gt;(16057, 	16061, 	16063, 	16067, 	16069, 	16073)&lt;/i&gt;.
        /// ähnelt.
        /// </summary>
        internal static string Distribution_SixTupletPrimes {
            get {
                return ResourceManager.GetString("Distribution_SixTupletPrimes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Anzahl der Teiler&lt;/h2&gt;
        ///
        ///Diese Funktion gibt an, wieviele Teiler eine natürliche Zahl n hat. Dabei werden auch die Zahl 1 und die Zahl n berücksichtigt. Die Funktion wird mit &amp;tau; bezeichnet.&lt;br /&gt;
        ///&lt;br /&gt;
        ///Ihre Definition lautet:&lt;br /&gt;
        ///&lt;img src=&quot;tau&quot; /&gt;
        ///&lt;br /&gt;
        ///Es gilt: &amp;tau; (p) = 2 für alle Primzahlen.&lt;br /&gt;
        ///Zusammenhang mit der &amp;phi;-Funktion: &amp;tau; (n) + &amp;phi; (n) = n + 1 für alle n aus N.
        /// ähnelt.
        /// </summary>
        internal static string Distribution_Tau {
            get {
                return ResourceManager.GetString("Distribution_Tau", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Primzahlzwillinge&lt;/h2&gt;
        ///
        ///Ein &lt;a href=&quot;http://de.wikipedia.org/wiki/Primzahlzwilling&quot; target=&quot;_blank&quot;&gt;Primzahlzwilling&lt;/a&gt; ist ein Paar aus Primzahlen mit dem Abstand 2. Die ersten Primzahlzwillinge sind &lt;i&gt;(3,5)&lt;/i&gt;, &lt;i&gt;(5,7)&lt;/i&gt;, &lt;i&gt;(11,13)&lt;/i&gt;.
        ///Bis heute ist nicht bekannt, ob es unendlich viele Primzahlzwillinge gibt. Diese Frage gehört zu den großen,
        /// bisher ungelösten &lt;a href=&quot;http://de.wikipedia.org/wiki/Ungel%C3%B6ste_Probleme_der_Mathematik&quot; target=&quot;_blank&quot;&gt;Problemen der Mathematik&lt;/a&gt;.
        /// &lt;br  [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Distribution_TwinPrimes {
            get {
                return ResourceManager.GetString("Distribution_TwinPrimes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Faktorisierung durch Probedivision&lt;/h2&gt;
        ///
        ///Die Probedivision ist ein sehr intuitives Verfahren zur Faktorisierung.
        ///Man beginnt damit, die Zahl durch 2 zu teilen. Ist die Zahl ohne Rest durch 2 teilbar,
        ///teilt man das Ergebnis nochmals durch 2. Damit f&amp;auml;hrt man solange fort, bis das Ergebnis nicht mehr ohne Rest durch 2 teilbar ist.
        ///Im n&amp;auml;chsten Schritt teilt man solange durch 3 bis das Ergebnis der Division nicht mehr ohne Rest durch 3 teilbar ist.
        ///So f&amp;auml;hrt man mit den n&amp;auml;chsten Zahl [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Factorization_BruteForce {
            get {
                return ResourceManager.GetString("Factorization_BruteForce", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Faktorisierung von Zahlen&lt;/h2&gt;
        ///
        ///Der Fundamentalsatz der Arithmetik besagt, dass sich jede Zahl eindeutig in ihre Primfaktoren
        ///zerlegen lässt. Um diese Darstellung zu berechnen, stehen in diesem Tutorial die folgenden Funktionen
        ///&lt;ul&gt;
        ///&lt;li&gt;&lt;a href=&quot;help://Factorization_BruteForce&quot;&gt;Probedivision&lt;/a&gt; und &lt;/li&gt;
        ///&lt;li&gt;&lt;a href=&quot;help://Factorization_QS&quot;&gt;quadratisches Sieb&lt;/a&gt;&lt;/li&gt;
        ///&lt;/ul&gt;
        ///zur Verfügung.
        /// ähnelt.
        /// </summary>
        internal static string Factorization_Factorization {
            get {
                return ResourceManager.GetString("Factorization_Factorization", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Generierung von Zufallszahlen zur Faktorisierung&lt;/h2&gt;
        ///
        ///Ihre gewählte Methode zur Faktorisierung bestimmt sowohl die Laufzeit als auch den Ressourcenverbrauch des Prozesses.
        ///&lt;ul&gt;
        ///&lt;li&gt;
        ///&lt;strong&gt;Probedivision&lt;/strong&gt;&lt;br /&gt;
        ///Die Probedivision ist das Verfahren mit der größten Laufzeit. Es benötigt sehr viel Arbeitsspeicher und Prozessorzeit.
        ///Sollte nach 100.000 Versuchen kein Faktor gefunden werden, wird das Verfahren automatisch beendet.
        ///&lt;/li&gt;
        ///&lt;/ul&gt;
        /// ähnelt.
        /// </summary>
        internal static string Factorization_Generate {
            get {
                return ResourceManager.GetString("Factorization_Generate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Generierung einer sehr großen zufälligen Zahl&lt;/h2&gt;
        ///
        ///Es wird eine Zahl mit 100 Dezimalstellen generiert. Ihre Wahl der Methode zur Faktorisierung bestimmt die Laufzeit und den Ressourcenverbrauch der Faktorisierung. So benötigt das Verfahren der Probedivision sehr viel Arbeitsspeicher und Prozessorzeit. Sollte nach 20.000 Versuchen kein Faktor gefunden werden, bricht das Verfahren ab.
        /// ähnelt.
        /// </summary>
        internal static string Factorization_Generate_BigInteger {
            get {
                return ResourceManager.GetString("Factorization_Generate_BigInteger", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Faktorisierung mit dem quadratischen Sieb&lt;/h2&gt;
        ///
        ///Das quadratische Sieb ist eines der schnellsten Verfahren zur Faktorisierung einer nat&amp;uuml;rlichen Zahl n. Hier werden mathematische Erkenntnisse eingesetzt, die auf den franz&amp;ouml;sischen Mathematiker Pierre de Fermat zur&amp;uuml;ckgehen. Das Verfahren ist aufw&amp;auml;ndiger und mathematisch anspruchsvoller als die Probedivision. Darum wird hier ein Beispiel aufgef&amp;uuml;hrt.&lt;br /&gt;&lt;br /&gt;
        ///Das quadratische Sieb nutzt Eigenschaften aus der Kongruenzrechnung. Um d [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Factorization_QS {
            get {
                return ResourceManager.GetString("Factorization_QS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Eulers quadratisches Polynom testen&lt;/h2&gt;
        ///
        ///Der Mathematiker &lt;a href=&quot;http://de.wikipedia.org/wiki/Leonhard_Euler&quot; target=&quot;_blank&quot;&gt;Leonhard Euler&lt;/a&gt; entdeckte,
        ///dass das quadratische Polynom&lt;br /&gt;&lt;img src=&quot;eulerpolynom&quot; /&gt;&lt;br /&gt; für die Eingaben 0 bis 39 ausschließlich Primzahlen liefert.&lt;br /&gt;
        ///Im vorliegenden Dialog kann Eulers Polynom für ein beliebiges Intervall berechnet werden.
        /// ähnelt.
        /// </summary>
        internal static string Generation_GenerateEuler1 {
            get {
                return ResourceManager.GetString("Generation_GenerateEuler1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Ein spezielles quadratisches Polynom testen&lt;/h2&gt;
        ///
        ///Hier können quadratische Polynome der Form
        ///&lt;br /&gt;
        ///&lt;img src=&quot;quadratic&quot; /&gt;&lt;br /&gt;
        ///erstellt und deren Funktionswerte für ein Intervall von x berechnet werden.&lt;br /&gt;
        ///Die Parameter &lt;i&gt;a&lt;/i&gt;, &lt;i&gt;b&lt;/i&gt; und &lt;i&gt;c&lt;/i&gt; werden über die entsprechenden Eingabefelder gesetzt.
        ///Das Intervall der unabhängigen Variable x kann in der Gruppierung &quot;Werte für x&quot; festgelegt werden.
        /// ähnelt.
        /// </summary>
        internal static string Generation_GenerateQuadratic {
            get {
                return ResourceManager.GetString("Generation_GenerateQuadratic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Zufällige quadratische Polynome testen&lt;/h2&gt;
        ///
        ///Der Dialog erstellt zufällige quadratische Polynome der Form
        ///&lt;br /&gt;
        ///&lt;img src=&quot;quadratic&quot; /&gt;&lt;br /&gt;
        ///und berechnet sie. Für die Parameter &lt;i&gt;a&lt;/i&gt;, &lt;i&gt;b&lt;/i&gt; und &lt;i&gt;c&lt;/i&gt; können Bereiche vorgegeben werden,
        ///aus denen der jeweilige Wert zufällig ausgewählt wird. Analog können die Werte für x für jede Funktion zufällig
        ///bestimmt werden, oder man kann mit der Option &quot;Werte für x&quot; ein Intervall vorgeben.
        /// ähnelt.
        /// </summary>
        internal static string Generation_GenerateQuadraticRandom {
            get {
                return ResourceManager.GetString("Generation_GenerateQuadraticRandom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Quadratische Polynome systematisch testen&lt;/h2&gt;
        ///
        ///Der Dialog erstellt systematisch Polynome der Form
        ///&lt;br /&gt;
        ///&lt;img src=&quot;quadratic&quot; /&gt;&lt;br /&gt;
        ///und berechnet sie.
        ///Jede Eingabe von &lt;i&gt;a&lt;/i&gt; wird mit jeder Eingabe von &lt;i&gt;b&lt;/i&gt; und wiederum mit jeder Eingabe von &lt;i&gt;c&lt;/i&gt; kombiniert.
        ///Das Intervall der unabhängigen Variable x kann in der Gruppierung &quot;Werte für x&quot; festgelegt werden.
        /// ähnelt.
        /// </summary>
        internal static string Generation_GenerateQuadraticSystematic {
            get {
                return ResourceManager.GetString("Generation_GenerateQuadraticSystematic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Die Erzeugung von Primzahlen&lt;/h2&gt;
        ///
        ///Primzahlen sind für die Kryptographie von großer Bedeutung.
        ///So wird das Schlüsselpaar für das RSA-Verfahren mit zwei großen Primzahlen erzeugt.&lt;br /&gt;
        ///Der Dialog teilt sich in zwei Funktionsbereiche.
        ///Zum einen können beliebig viele und beliebig große Primzahlen generiert werden.
        ///Dabei wird so verfahren, dass zunächst eine Zufallszahl generiert wird, und diese und die folgenden Zahlen mit einem probabilistischen Primzahltest überprüft werden, bis die nächste Primza [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Generation_Generation {
            get {
                return ResourceManager.GetString("Generation_Generation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Quadratische Polynome testen&lt;/h2&gt;
        ///
        ///Über die Jahre haben Zahlentheoretiker erkannt, dass es bestimmte Polynome der Form&lt;br /&gt;
        ///&lt;img src=&quot;quadratic&quot; /&gt;&lt;br /&gt; gibt, die sich besonders gut dazu eignen, Primzahlen zu erzeugen.
        ///So entdeckte der Mathematiker &lt;a href=&quot;http://de.wikipedia.org/wiki/Leonhard_Euler&quot; target=&quot;_blank&quot;&gt;Leonhard Euler&lt;/a&gt; ,
        ///dass die Formel&lt;br /&gt;&lt;img src=&quot;eulerpolynom&quot; /&gt;&lt;br /&gt; für die Eingaben 0 bis 39 ausschließlich Primzahlen liefert.&lt;br /&gt;
        ///Der vorliegende Dialog ermöglicht es, s [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Generation_Quadratic {
            get {
                return ResourceManager.GetString("Generation_Quadratic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Erzeugung zufälliger Primzahlen&lt;/h2&gt;
        ///
        ///Primzahlen werden in kryptographischen Verfahren wie RSA verwendet. Das RSA-Schlüsselpaar wird aus zwei sehr großen Primzahlen gebildet.
        ///Diese Zahlen werden zufällig bestimmt. &lt;br /&gt;
        ///Der Dialog erzeugt jeweils 10 zufällige Primzahlen mit 20, 50 oder 100 Stellen. Außerdem können Primzahlen mit bis zu 500 Stellen mit dem Modul &lt;a href=&quot;help://Generation_RandomNTimesM&quot; &gt;&quot;n x m-stellig&quot;&lt;/a&gt; erzeugt werden.
        /// ähnelt.
        /// </summary>
        internal static string Generation_Random {
            get {
                return ResourceManager.GetString("Generation_Random", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Erzeugung m-stelliger zufälliger Primzahlen&lt;/h2&gt;
        ///
        ///Der Dialog erstellt n Primzahlen mit jeweils m Stellen. Prinzipiell ist die Länge der Zahlen beliebig, aber ab einer Länge von 400 Stellen
        ///dauert es sehr lange, eine Primzahl zu berechnen. Darum ist die maximale Stellenanzahl auf 500 beschränkt.
        /// ähnelt.
        /// </summary>
        internal static string Generation_RandomNTimesM {
            get {
                return ResourceManager.GetString("Generation_RandomNTimesM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Das Sieb des Atkin&lt;/h2&gt;
        ///
        ///Das Sieb des Atkin wurde von dem Mathematiker A.O.L. Atkin im Jahre 2004 entwickelt.
        ///Das Verfahren ermittelt alle Primzahlen bis zu einer vorgegebenen Grenze
        ///und stellt eine Optimierung des &lt;a href=&quot;help://Primetest_SieveOfEratosthenes&quot; &gt;Sieb des Eratosthenes&lt;/a&gt; dar.
        ///Die Idee besteht darin, bestimmte Eigenschaften jeder Zahl mit modularer Arithmetik zu berechnen und so die Primzahlen zu erkennen.
        ///&lt;br /&gt;
        ///Der vorliegende Dialog erstellt eine Liste aller Zahlen bis zur vorg [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Generation_SieveOfAtkin {
            get {
                return ResourceManager.GetString("Generation_SieveOfAtkin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Der Primzahlsatz&lt;/h2&gt;
        ///
        ///&lt;a href=&quot;http://de.wikipedia.org/wiki/Carl_Friedrich_Gau%C3%9F&quot; target=&quot;_blank&quot;&gt;Carl Friedrich Gauß&lt;/a&gt; stellte im Alter von 15
        ///Jahren eine Vermutung zur Anzahl der Primzahlen bis zu einer gegebenen natürlichen Zahl &lt;strong&gt;n&lt;/strong&gt; auf. Im Anhang einer
        ///Logartihmentafel waren die Primzahlen bis 1000 abgedruckt. Er untersuchte die Anzahl der Primzahlen bis 10, dann bis 100 usw.
        ///und stellte draufhin die Vermutung &amp;pi;(n)~n/ln(n) auf, die er aber nicht beweisen konnte. Ein Bew [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Graph_GaussPi {
            get {
                return ResourceManager.GetString("Graph_GaussPi", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Grenzen der Berechnung der Anzahl der Primzahlen&lt;/h2&gt;
        ///
        ///Bei Eingaben von Zahlen gr&amp;ouml;&amp;szlig;er als eine Million f&amp;uuml;r die Bereichsgrenzen, kann die Berechnung mit Hilfe der
        ///Funktion &lt;a href=&quot;help://Graph_PiX&quot; &gt;&amp;pi;(x)&lt;/a&gt; sehr lange dauern, da hier die tats&amp;auml;chliche Anzahl der Primzahlen
        ///bis zur angegebenen Obergrenze berechnet wird.
        ///Ab dem Bereich von einer Milliarde wird auch die Berechnung
        ///des &lt;a href=&quot;help://Graph_LiN&quot; &gt;Logarithmischen Integrals&lt;/a&gt; sehr langsam.&lt;br /&gt;
        ///Sie k&amp;ouml;nne [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Graph_LargeNumbers {
            get {
                return ResourceManager.GetString("Graph_LargeNumbers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Das logarithmische Integral&lt;/h2&gt;
        ///
        ///Das logarithmische Integral von J. P. G. L. Dirichlet ist eine Verbesserung zu der ersten Abschätzung
        ///von &lt;a href=&quot;http://de.wikipedia.org/wiki/Carl_Friedrich_Gau%C3%9F&quot; target=&quot;_blank&quot;&gt;Carl Friedrich Gauß&lt;/a&gt;,
        ///dem so genannten &lt;a href=&quot;help://Graph_GaussPi&quot; &gt;Primzahlsatz&lt;/a&gt;.
        ///&lt;br /&gt;
        ///Auch das logarithmische Integral macht eine Aussage darüber, wieviele Primzahlen es bis zu einer gegebenen natürlichen Zahl &lt;strong&gt;n&lt;/strong&gt; gibt.
        ///Bei großen Werten nähert sich die [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Graph_LiN {
            get {
                return ResourceManager.GetString("Graph_LiN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Anzahl der Primzahlen&lt;/h2&gt;
        ///
        ///Die tatsächliche Anzahl der Primzahlen bis zu einer gegebenen natürlichen Zahl &lt;strong&gt;n&lt;/strong&gt; kann nicht sofort errechnet werden, sondern man muss von der ersten Primzahl 2 beginnend alle Primzahlen bestimmen und diese abzählen. Die Funktion, die dies tut heißt &amp;pi;(n). Das Ergebnis ist eine Treppenfunktion, die bei kleinen Intervallen sehr gut im Graphen zu erkennen ist.
        ///&lt;br /&gt;&lt;br /&gt;
        ///&lt;strong&gt;Hinweis:&lt;/strong&gt;&lt;br /&gt;
        ///Je größer die betrachteten Zahlen sind, desto länge [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Graph_PiX {
            get {
                return ResourceManager.GetString("Graph_PiX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Berechnung der Anzahl der Primzahlen&lt;/h2&gt;
        ///
        ///Der griechische Mathematiker &lt;a href=&quot;http://de.wikipedia.org/wiki/Euklid&quot; target=&quot;_blank&quot;&gt;Euklid&lt;/a&gt; bewies ca. 300 v.Chr., dass es unendlich viele Primzahlen gibt.
        ///
        ///&lt;a href=&quot;http://de.wikipedia.org/wiki/Carl_Friedrich_Gau%C3%9F&quot; target=&quot;_blank&quot;&gt;Carl Friedrich Gauß&lt;/a&gt; versuchte erstmals,
        ///die Anzahl der Primzahlen bis zu einer gegebenen Zahl n abzuschätzen.
        ///Mithilfe dieses Dialogs können drei verschiedene Funktionen aufgerufen werden, um die Anzahl der P [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Graph_PrimesCount {
            get {
                return ResourceManager.GetString("Graph_PrimesCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Pari/GP zur Berechnung des logarithmischen Integrals&lt;/h2&gt;
        ///
        ///Pari/GP ist ein Open-Source &lt;a href=&quot;http://de.wikipedia.org/wiki/Computer-Algebra-System&quot; target=&quot;_blank&quot;&gt;Computer-Algebra-System (CAS)&lt;/a&gt;,
        ///das eine sehr schnelle Implementierungen arithmetischer Funktionen enthält. &lt;br /&gt;
        ///Im Vergleich zur Berechnung des logarithmischen Integrals mit der Simpson-Formel berechnet Pari/GP die
        ///Werte sehr viel genauer.&lt;br /&gt;
        ///Pari/Gp kann auf der &lt;a href=&quot;http://pari.math.u-bordeaux.fr/&quot;target=&quot;_blank&quot;&gt;Websei [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Pari_Lin {
            get {
                return ResourceManager.GetString("Pari_Lin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Der Miller-Rabin-Test&lt;/h2&gt;
        ///
        ///&lt;p align=&quot;justify&quot;&gt;
        ///Der Miller-Rabin-Test ist ein Primzahltest, der besonders häufig zum Einsatz kommt.
        ///Er basiert auf dem &lt;a href=&quot;http://de.wikipedia.org/wiki/Kleiner_fermatscher_Satz&quot; target=&quot;_blank&quot;&gt;kleinen Satz von Fermat&lt;/a&gt;.
        ///Eine sehr anschauliche Erläuterung zum Verfahren findet sich &lt;a href=&quot;http://www.iti.fh-flensburg.de/lang/krypto/algo/primtest.htm&quot; target=&quot;_blank&quot;&gt;hier&lt;/a&gt;.
        ///Die Besonderheit dieses Tests ist, dass er sich irren kann, d.h. das Verfahren erken [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Primetest_MillerRabin {
            get {
                return ResourceManager.GetString("Primetest_MillerRabin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Primzahltests&lt;/h2&gt;
        ///
        ///Primzahltests beantworten die Frage &quot;Ist die gegebene Zahl n eine Primzahl?&quot; mit Ja oder Nein.
        ///
        ///Solche Tests werden von Verfahren eingesetzt, die Primzahlen verwenden.
        ///Beispielsweise beruht die Sicherheit des RSA-Kryptosystems darauf,
        ///dass die Zerlegung einer Zahl in ihre Primfaktoren, die so genannte
        ///&lt;a href=&quot;help://Factorization_Factorization&quot;&gt;Faktorisierung&lt;/a&gt;,
        ///ein sehr schwieriges Problem ist, dessen Lösung für große Zahlen extrem lange dauert.
        ///
        ///Initial benötigt das RS [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Primetest_Primetest {
            get {
                return ResourceManager.GetString("Primetest_Primetest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Das Sieb des Eratosthenes&lt;/h2&gt;
        ///
        ///Das Sieb des Eratosthenes ist ein Verfahren zur Bestimmung aller Primzahlen kleiner oder gleich einer gegebenen Zahl.
        ///Man testet eine gegebene Zahl auf ihre Zugehörigkeit zu den Primzahlen, indem man alle Primzahlen bis zu dieser Zahl ermittelt
        ///und prüft, ob die gegebene Zahl in der Liste der ermittelten Primzahlen vorkommt.
        ///Das Verfahren geht auf den griechischen Mathematiker Eratosthenes von Kyrene (ca. 200 v.Chr.) zurück.&lt;br /&gt;&lt;br /&gt;
        ///&lt;b&gt;Verfahren:&lt;/b&gt;&lt;br /&gt;
        ///Zunä [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Primetest_SieveOfEratosthenes {
            get {
                return ResourceManager.GetString("Primetest_SieveOfEratosthenes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Primitivwurzeln einer Primzahl: EingabemÃ¶glichkeiten&lt;/h2&gt;
        ///
        ///Primitivwurzeln kÃ¶nnen fÃ¼r mehrere Primzahlen berechnet werden. Die Primzahlen, deren Primitivwurzeln errechnet werden sollen, mÃ¼ssen in
        ///der Form &lt;br /&gt;
        ///[Primzahl1], [Primzahl2], [Primzahl3], ...
        ///&lt;br /&gt;
        ///eingegeben werden. &lt;br /&gt;
        ///AuÃŸerdem ist es mÃ¶glich, Primitivwurzeln fÃ¼r Primzahlen in einem bestimmten Bereich berechnen zu lassen. DafÃ¼r muss die Eingabe in der Form [Zahl1];[Zahl2] erfolgen.&lt;br /&gt;
        ///Die folgende Abbildung zeigt ein [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string PrimitivRoot_Input {
            get {
                return ResourceManager.GetString("PrimitivRoot_Input", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Primitivwurzeln einer Primzahl&lt;/h2&gt;
        ///
        ///Die &lt;strong&gt;Primitivwurzel&lt;/strong&gt; modulo m ist ein Begriff aus der &lt;a href=&quot;http://de.wikipedia.org/wiki/Zahlentheorie&quot; target=&quot;_blank&quot;&gt;Zahlentheorie&lt;/a&gt;, einem &lt;a href=&quot;http://de.wikipedia.org/wiki/Teilgebiete_der_Mathematik&quot; target=&quot;_blank&quot;&gt;Teilgebiet der Mathematik&lt;/a&gt;.&lt;br /&gt;
        ///
        ///Eine Primitivwurzel ist ein ausgezeichnetes Element einer primen Restklassengruppe: Die besondere Eigenschaft einer
        ///Primitivwurzel ist, dass jedes Element der Restklassengruppe als Po [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string PrimitivRoot_PrimitivRoot {
            get {
                return ResourceManager.GetString("PrimitivRoot_PrimitivRoot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Die Simpson-Formel zur Berechnung des logarithmischen Integrals&lt;/h2&gt;
        ///
        ///&lt;p align=&quot;justify&quot;&gt;
        ///Die &lt;a href=&quot;http://de.wikipedia.org/wiki/Simpsonregel&quot; target=&quot;_blank&quot;&gt;Simpson-Formel&lt;/a&gt; ist ein Näherungsverfahren zur Berechnung eines Integrals.
        ///Dabei bedeutet &quot;Näherungsverfahren&quot;, dass der berechnete Wert nicht exakt mit dem des Integrals übereinstimmt.&lt;br /&gt;
        ///Die Simpson-Formel liefert ungenauere Werte als die Berechnung mit Pari/GP, kann dafür aber schneller berechnet werden.
        ///&lt;/p&gt;
        /// ähnelt.
        /// </summary>
        internal static string Simpson_Lin {
            get {
                return ResourceManager.GetString("Simpson_Lin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Die Ulam-Spirale&lt;/h2&gt;
        ///
        ///Die &lt;a href=&quot;http://de.wikipedia.org/wiki/Ulam-Spirale&quot; target=&quot;_blank&quot;&gt;Ulam-Spirale&lt;/a&gt; ist eine
        ///berühmte Form, Primzahlen zu visualisieren. Sie wurde 1963 von dem Mathematiker
        ///Stanisław Ulam entdeckt, der während eines Vortrages aus Langeweile die natürlichen Zahlen, beginnend bei 1, in Form einer Spirale
        ///auf ein kariertes Blatt eintrug. Er kreiste die Primzahlen ein und machte die überraschende Entdeckung, dass sich fast alle
        ///Primzahlen auf diagonalen Geraden befanden. Di [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string Spiral_Ulam {
            get {
                return ResourceManager.GetString("Spiral_Ulam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;PKCS#1 / Bleichenbacher-Angriff - Hilfe&lt;/h2&gt;
        ///Willkommen in der Hilfe des Kryptotutoriums &quot;PKCS#1 / Bleichenbacher-Angriff&quot;.&lt;/br&gt;
        ///Hier finden Sie detaillierte Informationen zu PKCS#1-Signaturen und dem Bleichenbacher-Angriff.&lt;/br&gt;&lt;/br&gt;
        ///In die verschiedenen Masken dieses Kryptotutoriums gelangen Sie mit Hilfe der Navigation auf der linken Seite. In den verschiedenen Masken
        ///wiederum finden Sie mehrere Hilfebuttons. Wenn Sie auf diese klicken, bekommen Sie detaillierte Informationen über das jeweilige T [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string StartControl {
            get {
                return ResourceManager.GetString("StartControl", resourceCulture);
            }
        }
    }
}
