//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Primes.OnlineHelp.HelpFiles {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Help {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Help() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Primes.OnlineHelp.HelpFiles.Help", typeof(Help).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt;Die Verteilung der Primzahlen in den natürlichen Zahlen&lt;/h2&gt;
        ///Es stehen drei Funktionen zur Verfügung, die die Verteilung der Primzahlen in den natürlichen Zahlen auf ganz unterschiedliche Weise darstellen.
        ///&lt;ul&gt;
        ///&lt;li&gt;
        ///  &lt;a href=&quot;help://Distribution_Numberline&quot;&gt;Verteilung auf der Zahlengerade&lt;/a&gt;
        ///&lt;/li&gt;
        ///&lt;li&gt;
        ///  &lt;a href=&quot;help://Distribution_Numbergrid&quot;&gt;Verteilung im Zahlengrid&lt;/a&gt;
        ///&lt;/li&gt;
        ///&lt;li&gt;
        ///  &lt;a href=&quot;help://Spiral_Ulam&quot;&gt;Verteilung in der Ulam-Spriale&lt;/a&gt;
        ///&lt;/li&gt;
        ///&lt;/ul&gt;.
        /// </summary>
        internal static string Distribution_Distribution {
            get {
                return ResourceManager.GetString("Distribution_Distribution", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt;Eulersche φ-Funktion&lt;/h2&gt;
        ///Die Eulersche φ-Funktion ist eine zahlentheoretische Funktion. Sie gibt für jede natürliche Zahl n an die Anzahl der zu n teilerfremden 
        ///natürlichen Zahlen an.
        ///&lt;br /&gt;
        ///Die Vorschrift lautet:&lt;br /&gt;
        ///&lt;img src=&quot;eulerphi&quot; /&gt;
        ///&lt;br /&gt;
        ///Der
        ///Name der Funktion geht auf &lt;a href=&quot;http://de.wikipedia.org/wiki/Leonhard_Euler&quot; target= _blank&gt;Leonhard Euler&lt;/a&gt; zurück, 
        ///der diese Funktion erstmals mit dem &lt;a href=&quot;http://de.wikipedia.org/wiki/Kleiner_Fermat&quot; target= _blank&gt; kleinen Satz  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Distribution_EulerPhi {
            get {
                return ResourceManager.GetString("Distribution_EulerPhi", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt;Teilersummenformel&lt;/h2&gt;
        ///Die Funktion gibt die Summe der Anzahlen aller teilerfremden Zahlen zu einer natürlichen Zahl n zurück..&lt;br /&gt;
        ///Die Vorschrift lautet:&lt;br /&gt;
        ///&lt;img src=&quot;eulerphisum&quot; /&gt;.
        /// </summary>
        internal static string Distribution_EulerPhiSum {
            get {
                return ResourceManager.GetString("Distribution_EulerPhiSum", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt;Die Goldbachsche Vermutung&lt;/h2&gt;
        ///Die Goldbachsche Vermutung lautet:&lt;br /&gt;&lt;br /&gt;
        ///&lt;i&gt;
        ///  Jede gerade Zahl größer als 2 kann als Summe zweier Primzahlen geschrieben werden.
        ///&lt;/i&gt;
        ///&lt;br /&gt;
        ///&lt;br /&gt;
        ///&lt;a href=&quot;http://de.wikipedia.org/wiki/Goldbachsche_Vermutung&quot; target=_blank&quot;&gt;Die Vermutung&lt;/a&gt; wurde von dem Mathematiker Christian Goldbach in einem Brief an Leonhard Euler aufgestellt. Viele Mathematiker haben
        ///versucht die Vermutung zu beweisen oder zu widerlegen, aber bis heute ist dies niemanden gelungen. Di [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Distribution_Goldbach {
            get {
                return ResourceManager.GetString("Distribution_Goldbach", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt;Die Verteilung der Primzahlen im Zahlengrid&lt;/h2&gt;
        ///&lt;p align=&quot;justify&quot;&gt;
        ///Die natürlichen Zahlen werden hier als Gitter, das &quot;Zahlengrid&quot; heißt, dargestellt. Jedes Feld in diesem Gitter steht für eine Zahl. Primzahlen werden
        ///als rote Quadrate dargestellt. 
        ///&lt;br /&gt;&lt;br /&gt;Die Anzahl der Zeilen und Spalten des Zahlengrid kann über die Eingabe in den Textboxen
        ///oder durch Ziehen am linken, unteren und rechten Rand verändert werden. 
        ///&lt;br /&gt;&lt;br /&gt;Über die Schaltflächen links, kann nach oben und unten gescrollt  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Distribution_Numbergrid {
            get {
                return ResourceManager.GetString("Distribution_Numbergrid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt;Verteilung der Primzahlen auf der Zahlengeraden&lt;/h2&gt;
        ///&lt;p align=&quot;justify&quot;&gt;
        ///Nach dem Satz von Euklid gibt es unendlich viele Primzahlen. Ihre Eigenschaften wurden von tausenden Mathematikern über 
        ///viele Jahre erforscht und doch kann niemand genau sagen, ob es Regel gibt, nach der die Primzahlen in den natürlichen Zahlen verteilt sind - 
        ///geschweige denn, wie diese Regel lautet. &lt;br /&gt;
        ///Der vorliegende Dialog zeigt die natürlichen Zahlen ab 2. Jede Primzahl ist ein hellblauer Punkt, zusammengesetzte Zahl [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Distribution_Numberline {
            get {
                return ResourceManager.GetString("Distribution_Numberline", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt;Primzahlvierling&lt;/h2&gt;
        ///Ein &lt;a href=&quot;http://de.wikipedia.org/wiki/Primzahlvierling&quot; target=_blank&quot;&gt;Primzahlvierling&lt;/a&gt; ist ein Paar aus Primzahlzwillingen mit 
        ///dem Abstand 4, d.h zwischen der größten Primzahl des kleinere Zwillings und der kleinsten Primzahl des größten Zwillings liegen
        ///4 Zahlen. Die ersten Primzahlvierlinge sind &lt;i&gt;(11,13,17,19)&lt;/i&gt;, &lt;i&gt;(101,103,107,109)&lt;/i&gt;, &lt;i&gt;(191,193,197,199)&lt;/i&gt;.
        ///Bis heute ist nicht bekannt ob es unendlich viele Primzahlvierlinge gibt. Diese Frage gehört zu den [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Distribution_QuadrupletPrimes {
            get {
                return ResourceManager.GetString("Distribution_QuadrupletPrimes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt;Summe der Teiler&lt;/h2&gt;
        ///Die Funktion gibt die Summe aller Teiler (incl. der 1 und n) einer natürlichen Zahl n an. &lt;br /&gt;
        ///Die Vorschrift lautet:&lt;br /&gt;
        ///&lt;img src=&quot;rho&quot; /&gt;&lt;br /&gt;
        ///Diese Funktion wird für die Definition &lt;a href=&quot;http://de.wikipedia.org/wiki/Vollkommene_Zahlen&quot; target= _blank&gt; vollkommene Zahlen&lt;/a&gt; betrachtet.
        ///&lt;br /&gt;
        ///Es gilt: &amp;rho;(p) = p+1 für alle Primzahlen und &amp;rho;(n)= 2n  für alle vollkommenen Zahlen.
        ///.
        /// </summary>
        internal static string Distribution_Rho {
            get {
                return ResourceManager.GetString("Distribution_Rho", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt;Primzahlsechsling&lt;/h2&gt;
        ///Ein &lt;a href=&quot;http://de.wikipedia.org/wiki/Primzahlsechsling&quot; target=_blank&quot;&gt;Primzahlsechsling&lt;/a&gt; sind sechs Primzahlen 
        ///mit den Abständen 4, 2, 4, 2, 4. Die mittleren vier Primzahlen sind also ein &lt;a href=&quot;help://Distribution_QuadrupletPrimes&quot; &gt;Primzahlvierling&lt;/a&gt;. 
        ///Die ersten Primzahlsechslinge sind &lt;i&gt;(7, 11, 13, 17, 19, 23)&lt;/i&gt;, &lt;i&gt;(97, 	101, 	103, 	107, 	109, 	113)&lt;/i&gt; und  &lt;i&gt;(16057, 	16061, 	16063, 	16067, 	16069, 	16073)&lt;/i&gt;.
        ///.
        /// </summary>
        internal static string Distribution_SixTupletPrimes {
            get {
                return ResourceManager.GetString("Distribution_SixTupletPrimes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt;Anzahl der Teiler&lt;/h2&gt;
        ///Die Funktion gibt an, wieviele Teiler eine natürliche Zahl n hat. Dabei werden auch die Zahl 1 und die Zahl n berücksichtigt. Die Funktion wir mit τ bezeichnet.&lt;br /&gt;
        ///Die Vorschrift lautet:&lt;br /&gt;
        ///&lt;img src=&quot;tau&quot; /&gt;
        ///&lt;br /&gt;
        ///Es gilt: τ(p) = 2 für alle Primzahlen.
        ///Zusammenhang mit der Phi-Funktion: τ(n) + φ(n) = n+1 für alle n aus N.
        ///.
        /// </summary>
        internal static string Distribution_Tau {
            get {
                return ResourceManager.GetString("Distribution_Tau", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt;Primzahlzwillinge&lt;/h2&gt;
        ///Ein &lt;a href=&quot;http://de.wikipedia.org/wiki/Primzahlzwilling&quot; target=_blank&quot;&gt;Primzahlzwilling&lt;/a&gt; ist ein Paar aus Primzahlen mit dem Abstand 2. Die ersten Primzahlzwillinge sind &lt;i&gt;(3,5)&lt;/i&gt;, &lt;i&gt;(5,7)&lt;/i&gt;, &lt;i&gt;(11,13)&lt;/i&gt;.
        ///Bis heute ist nicht bekannt, ob es unendlich viele Primzahlzwillinge gibt. Diese Frage gehört zu den großen,
        /// bisher ungelösten &lt;a href=&quot;http://de.wikipedia.org/wiki/Ungel%C3%B6ste_Probleme_der_Mathematik&quot; target=_blank&quot;&gt;Problemen der Mathematik&lt;/a&gt;.
        /// &lt;br /&gt;&lt;b [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Distribution_TwinPrimes {
            get {
                return ResourceManager.GetString("Distribution_TwinPrimes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt;Faktorisierung durch Probedivision&lt;/h2&gt;
        ///Die Probedivision ist ein sehr intuitives Verfahren zur Faktorisierung.
        ///Man beginnt damit, die Zahl durch 2 zu teilen. Ist die Zahl ohne Rest durch 2 teilbar
        ///teilt man das Ergebnis nochmals durch 2. Damit fährt man solange fort, bis das Ergebnis nicht mehr ohne Rest durch 2 teilbar ist.
        ///Im nächsten Schritt teilt solange durch 3 bis das Ergebnis der Division nicht mehr ohne Rest durch 3 teilbar ist. 
        ///So fährt man mit den nächsten Zahlen fort, bis das Ergebnis  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Factorization_BruteForce {
            get {
                return ResourceManager.GetString("Factorization_BruteForce", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt;Faktorisierung von Zahlen&lt;/h2&gt;
        ///Der Fundamentalsatz der Arithmetik besagt, dass sich jede Zahl eindeutig in ihre Primfaktoren 
        ///zerlegen lässt. Um diese Darstellung zu berechnen, stehen die Funktionen
        ///&lt;ul&gt;
        ///&lt;li&gt;&lt;a href=&quot;help://Factorization_BruteForce&quot;&gt;Probedivision&lt;/a&gt; und &lt;/li&gt;
        ///&lt;li&gt;&lt;a href=&quot;help://Factorization_QS&quot;&gt;quadratisches Sieb&lt;/a&gt;&lt;/li&gt;
        ///&lt;/ul&gt;
        ///zur Verfügung..
        /// </summary>
        internal static string Factorization_Factorization {
            get {
                return ResourceManager.GetString("Factorization_Factorization", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt;Generierung von Zufallszahlen zur Faktorisierung&lt;/h2&gt;
        ///Ihre Wahl der Methode zur Faktorisierung  bestimmt die Laufzeit und den Resourcenverbrauch der Faktorisierung. 
        ///&lt;ul&gt;
        ///&lt;li&gt;
        ///&lt;strong&gt;Probedivision&lt;br /&gt;&lt;/strong&gt;
        ///Die Probedivision ist das Verfahren mit der größen Laufzeit. Es benötig sehr viel Arbeitsspeicher und Prozessorzeit.
        ///Sollte nach 100.000 Versuchen kein Faktor gefunden werden, wird das Verfahren automatisch beendet.
        ///&lt;/li&gt;
        ///&lt;/ul&gt;
        ///.
        /// </summary>
        internal static string Factorization_Generate {
            get {
                return ResourceManager.GetString("Factorization_Generate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt;Generierung einer sehr großen zufälligen Zahl&lt;/h2&gt;
        ///Es wird eine Zahl mit 100 Dezimalstellen generiert. Ihre Wahl der Methode zur Faktorisierung 
        ///bestimmt die Laufzeit und den Resourcenverbrauch der Faktorisierung. So benötigt Verfahren der 
        ///Probedivision sehr viel Arbeitsspeicher und Prozessorzeit. Sollte nach 20.000 Versuchen kein Faktor gefunden werden, 
        ///bricht das Verfahren ab.
        ///.
        /// </summary>
        internal static string Factorization_Generate_BigInteger {
            get {
                return ResourceManager.GetString("Factorization_Generate_BigInteger", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt;Faktorisierung mit dem quadratischen Sieb&lt;/h2&gt;
        ///Das &lt;a href=&quot;exec://Factor_QS&quot;&gt;quadratische Sieb&lt;/a&gt; ist eines der schnellsten Verfahren zur Faktorisierung einer natürlichen Zahl n.
        ///Hier werden mathematische Erkenntnisse eingesetzt, die auf den französischen Mathematiker 
        ///Pierre de Fermat zurück gehen. Das Verfahren ist relativ aufwändig und zum Verständnis benötigt 
        ///man eine gewisse Einarbeitungszeit, darum wird hier ein Beispiel aufgeführt.&lt;br /&gt;&lt;br /&gt;
        ///
        ///Das quadratische Sieb nutzt Eigenschaften a [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Factorization_QS {
            get {
                return ResourceManager.GetString("Factorization_QS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt;Faktorisierung mit der Pollard-Rho Methode&lt;/h2&gt;
        ///.
        /// </summary>
        internal static string Factorization_Rho {
            get {
                return ResourceManager.GetString("Factorization_Rho", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt;Die quadratische Formel nach Euler testen&lt;/h2&gt;
        ///Der Mathematiker &lt;a href=&quot;http://de.wikipedia.org/wiki/Leonhard_Euler&quot; target=_blank&quot;&gt;Leonhard Euler&lt;/a&gt; entdeckte, 
        ///dass die Formel&lt;br /&gt;&lt;img src=&quot;eulerpolynom&quot; /&gt;&lt;br /&gt; für die Eingaben 0 bis 39 ausschließlich Primzahlen liefert.&lt;br /&gt;
        ///Im vorliegenden Dialog kann Eulers Formel für ein beliebiges Interval berechnet werden..
        /// </summary>
        internal static string Generation_GenerateEuler1 {
            get {
                return ResourceManager.GetString("Generation_GenerateEuler1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt;Eine spezielle quadratische Formel testen&lt;/h2&gt;
        ///Hier können Formeln der Form
        ///&lt;br /&gt;
        ///&lt;img src=&quot;quadratic&quot; /&gt;&lt;br /&gt;
        ///erstellt und für ein Interval berechnet werden.&lt;br /&gt;
        ///Die Parameter &lt;i&gt;a&lt;/i&gt;, &lt;i&gt;b&lt;/i&gt; und &lt;i&gt;c&lt;/i&gt; werden über die entsprechenden Eingabefelder gesetzt. 
        ///Das Interval für die Eingabe der Formeln kann über &quot;Interval für die Eingabe&quot; bestimmt werden..
        /// </summary>
        internal static string Generation_GenerateQuadratic {
            get {
                return ResourceManager.GetString("Generation_GenerateQuadratic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt;Zufallige erzeugte Quadratische Formeln testen&lt;/h2&gt;
        ///Der Dialog erstellt zufällige quadratische Formeln der Form 
        ///&lt;br /&gt;
        ///&lt;img src=&quot;quadratic&quot; /&gt;&lt;br /&gt;
        ///und berechnet sie. Für die Parameter &lt;i&gt;a&lt;/i&gt;, &lt;i&gt;b&lt;/i&gt; und &lt;i&gt;c&lt;/i&gt; können Bereiche vorgegeben werden, 
        ///aus denen der jeweilige Werte zufällig ausgewählt wird. Die Eingabe für jede Formel kann mit der Option &quot;Werte für x zufällig bestimmen&quot; zufällig 
        ///bestimmt oder mit &quot;Werte für x&quot; systematisch vorgegeben werden..
        /// </summary>
        internal static string Generation_GenerateQuadraticRandom {
            get {
                return ResourceManager.GetString("Generation_GenerateQuadraticRandom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt;Systematisch erzeugte Quadratische Formeln testen&lt;/h2&gt;
        ///Der Dialog erstellt Formeln der Form 
        ///&lt;br /&gt;
        ///&lt;img src=&quot;quadratic&quot; /&gt;&lt;br /&gt;
        ///und berechet sie systematisch. Jede Eingabe von &lt;i&gt;a&lt;/i&gt; wird mit jeder Eingabe von &lt;i&gt;b&lt;/i&gt; und wiederum mit jeder Eingabe &lt;i&gt;c&lt;/i&gt; berechnet. 
        ///Über &quot;Werte von x&quot; wird das Interval der Eingabewert für jede Formel festgelegt..
        /// </summary>
        internal static string Generation_GenerateQuadraticSystematic {
            get {
                return ResourceManager.GetString("Generation_GenerateQuadraticSystematic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt;Die Erzeugung von Primzahlen&lt;/h2&gt;
        ///Primzahlen werden vor allen in der Kryptographie benötigt. So wird das Schlüsselpaar des RSA Verfahrens 
        ///mit zwei Primzahlen die jeweils 150 Dezimalstellen lang sind erzeugt. &lt;br /&gt;
        ///Der Dialog teil sich in zwei Funktionsbereiche. Zum einen können beliebig viele und beliebig große Primzahlen generiert werden. 
        ///Dabei wird so verfahren, dass zunächst eine Primzahl generiert wird und auf Basis dieser die nächste Primzahl mittels probalistischer Primzahltests 
        ///ermittelt [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Generation_Generation {
            get {
                return ResourceManager.GetString("Generation_Generation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt;Quadratische Formeln testen&lt;/h2&gt;
        ///Über die Jahre haben Zahlentheoretiker erkannt, dass es bestimmte Formen der Formel&lt;br /&gt;
        ///&lt;img src=&quot;quadratic&quot; /&gt;&lt;br /&gt; gibt, die sich besonders gut dazu eigenen Primzahlen zu erzeugen. 
        ///So entdeckte der Mathematiker &lt;a href=&quot;http://de.wikipedia.org/wiki/Leonhard_Euler&quot; target=_blank&quot;&gt;Leonhard Euler&lt;/a&gt; , 
        ///dass die Formel&lt;br /&gt;&lt;img src=&quot;eulerpolynom&quot; /&gt;&lt;br /&gt; für die Eingaben 0 bis 39 ausschließlich Primzahlen liefert.&lt;br /&gt;
        ///Der vorliegende Dialog ermöglicht es, sol [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Generation_Quadratic {
            get {
                return ResourceManager.GetString("Generation_Quadratic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt;Erzeugung zufälliger Zahlen&lt;/h2&gt;
        ///Primzahlen werden in kryptografischen Verfahren wie RSA verwendet. Das RSA Schlüsselpaar wird aus zwei sehr großen Primzahlen gebildet. 
        ///Diese Zahlen werden zufällig bestimmt. &lt;br /&gt;
        ///Der Dialog erzeugt zufällige Primzahlen mit 20, 50 oder 100 Stellen. Außerdem können beliebig lange Primzahlen über das Modul  &lt;a href=&quot;help://Generation_RandomNTimesM&quot; &gt;&quot;n x m-stellig&quot;&lt;/a&gt; erzeugt werden..
        /// </summary>
        internal static string Generation_Random {
            get {
                return ResourceManager.GetString("Generation_Random", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt;Erzeugung zufälliger Zahlen N-Mal M-Stellig&lt;/h2&gt;
        ///Der Dialog erstellt &quot;n&quot; Zahlen mit &quot;m&quot; Stellen. Prinzipiell ist die Länge der Zahlen beliebig, aber ab einer Länge von 400 Stellen
        ///dauert es sehr lange, eine Primzahlen zu berechnen. Darum ist die maximale Stellenanzahl auf 500 beschränkt..
        /// </summary>
        internal static string Generation_RandomNTimesM {
            get {
                return ResourceManager.GetString("Generation_RandomNTimesM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt;Das Sieb des Atkin&lt;/h2&gt;
        ///Das Sieb des Atkin würde von dem Mathematiker Atkin entwickelt. Das Verfahren ermittelt alle Primzahlen bis zu einer vorgegeben Grenze 
        ///und stellt eine Optimierung des &lt;a href=&quot;help://Primetest_SieveOfEratosthenes&quot; &gt;Sieb des Eratosthenes&lt;/a&gt; dar. Die Idee besteht darin;
        ///bestimmte Eigenschaften jeder Zahl mit modularer Arithmetik zu berechnen und so die Primzahlen zu erkennen. &lt;br /&gt;Der vorliegende Dialog 
        ///erstellt eine Liste aller Zahlen erstellt bis zur Vorgabezahl und marki [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Generation_SieveOfAtkin {
            get {
                return ResourceManager.GetString("Generation_SieveOfAtkin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt;Der Primzahlsatz&lt;/h2&gt;
        ///&lt;a href=&quot;http://de.wikipedia.org/wiki/Carl_Friedrich_Gau%C3%9F&quot; target=_blank&quot;&gt;Carl Friedrich Gauß&lt;/a&gt; stellte im Alter von 15
        ///Jahren eine Vermutung zur Anzahl der Primzahlen bis zu einer gegebenen natürlichen Zahl &lt;strong&gt;u&lt;/strong&gt; auf. Im Anhang einer 
        ///Logartihmentafel waren die Primzahlen bis 1000 abgedruckt. Er untersuchte die Anzahl der Primzahlen bis 10, dann bis 100 usw. 
        ///und stellte draufhin seine Vermutung π(u)~u/ln(u) auf. Gau&amp;szlig; konnte seine Vermutung nicht selb [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Graph_GaussPi {
            get {
                return ResourceManager.GetString("Graph_GaussPi", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt;Grenzen der Berechnung der Anzahl der Primzahlen&lt;/h2&gt;
        ///Bei Eingaben von Zahlen gr&amp;ouml;&amp;szlig;er als eine Million für die Bereichsgrenzen, kann die Berechnung der 
        ///Funktion &lt;a href=&quot;help://Graph_PiX&quot; &gt;&amp;pi;(x)&lt;/a&gt; sehr lange dauern, da hier die tatsächliche Anzahl der Primzahlen 
        ///bis zu angegebenen Obergrenze berechnet wird. Ab dem Bereich von einer Milliarde wird die Berechnung des &lt;a href=&quot;help://Graph_LiN&quot; &gt;Logarithmischen Integrals&lt;/a&gt; 
        ///ebenfalls sehr langsam, weil die Berechnung des Integrals seh [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Graph_LargeNumbers {
            get {
                return ResourceManager.GetString("Graph_LargeNumbers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt;Das logarithmische Integral&lt;/h2&gt;
        ///Das logarithmische Integral ist eine Verbesserung der ersten Abschätzung, dem so genannten &lt;a href=&quot;help://Graph_GaussPi&quot; &gt;Primzahlsatz&lt;/a&gt; die 
        ///&lt;a href=&quot;http://de.wikipedia.org/wiki/Carl_Friedrich_Gau%C3%9F&quot; target=_blank&quot;&gt;Carl Friedrich Gauß&lt;/a&gt; Mitte 
        ///des 19. Jahrhunderts aufstellte. &lt;br /&gt;
        ///Auch das logarithmische Integral mach eine Aussage darüber, wieviele Primzahlen es bis zu einer gegebenen natürlichen Zahl &lt;strong&gt;u&lt;/strong&gt; gibt. 
        ///Bei großen Werten nähert s [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Graph_LiN {
            get {
                return ResourceManager.GetString("Graph_LiN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt;Anzahl der Primzahlen&lt;/h2&gt;
        ///Die tatsächliche Anzahl der Primzahlen bis zu einer gegebenen natürlichen Zahl &lt;strong&gt;u&lt;/strong&gt; kann nicht sofort errechnet werden, sondern man muss von der ersten Primzahl 2 beginnend alle 
        ///Primzahlen errechnen und zählen. Die Funktion, die dies tut heißt &amp;pi;(u). Das Ergebnis ist eine Treppenfunktion, die bei kleine Intervallen sehr gut im Graphen zu erkennen ist.
        ///&lt;br /&gt;&lt;br /&gt;
        ///&lt;strong&gt;Hinweis:&lt;/strong&gt;&lt;br /&gt;
        ///Je großer die betrachteten Zahlen sind, desto länger dauert  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Graph_PiX {
            get {
                return ResourceManager.GetString("Graph_PiX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt;Berechnung der Anzahl der Primzahlen&lt;/h2&gt;
        ///Der Grieche &lt;a href=&quot;http://de.wikipedia.org/wiki/Euklid&quot;&gt;Euklid&lt;/a&gt; bewies ca. 300 v.Chr., dass es unendlich viele Primzahlen gibt. 
        ///&lt;a href=&quot;http://de.wikipedia.org/wiki/Carl_Friedrich_Gau%C3%9F&quot; target=_blank&quot;&gt;Carl Friedrich Gauß&lt;/a&gt; versuchte erstmals, 
        ///die Anzahl der Primzahlen bis zu einer gegebenen Zahl n abzuschätzen.
        ///Mithilfe dieses Dialogs können drei verschiedene Funktionen aufgerufen werden, um die Anzahl der Primzahlen in 
        ///einem vorgegebenen Be [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Graph_PrimesCount {
            get {
                return ResourceManager.GetString("Graph_PrimesCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt;Pari/GP zur Berechnung des logarithmischen Integrals&lt;/h2&gt;
        ///Pari/Gp ist ein Open Source &lt;a href=&quot;http://de.wikipedia.org/wiki/Computer-Algebra-System&quot; target=&quot;_blank&quot;&gt;Computer Algebra System (CAS)&lt;/a&gt;,
        ///das eine sehr schnelle Arithmetik anbietet. &lt;br /&gt;
        ///Im Vergleich zur Berechnung des logarithmischen Integrals mit der Simpson-Formel berechnet Pari/Gp die 
        ///Werte sehr viel genauer.&lt;br /&gt;
        ///Pari/Gp kann auf der &lt;a href=&quot;http://pari.math.u-bordeaux.fr/&quot;target=&quot;_blank&quot;&gt;Webseite der Universität Bordeaux&lt;/a&gt; h [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Pari_Lin {
            get {
                return ResourceManager.GetString("Pari_Lin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt;Der Miller/Rabin-Test&lt;/h2&gt;
        ///&lt;p align=&quot;justify&quot;&gt;
        ///Der Miller/Rabin-Test ist ein Primzahltest, der besonders häufig zum Einsatz kommt. 
        ///Er basiert auf dem 
        ///&lt;a href=&quot;http://de.wikipedia.org/wiki/Kleiner_fermatscher_Satz&quot; target=&quot;_blank&quot;&quot;&gt;
        ///kleinen Satz von Fermat&lt;/a&gt;. 
        ///Eine sehr anschauliche Erläuterung zum Verfahren findet sich 
        ///&lt;a href=&quot;http://www.iti.fh-flensburg.de/lang/krypto/algo/primtest.htm&quot; target=&quot;_blank&quot;&quot;&gt;hier&lt;/a&gt;.
        ///Die Besonderheit
        ///dieses Test er sich irren kann, d.h. das Verfahren erkennt [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Primetest_MillerRabin {
            get {
                return ResourceManager.GetString("Primetest_MillerRabin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt;Primzahltests&lt;/h2&gt;
        ///Primzahltests beantworten die Frage &quot;Ist die gegebene Zahl n eine Primzahl?&quot; mit Ja oder Nein. 
        ///Solche Tests werden von Verfahren eingesetzt, die Primzahlen verwenden. Das Kryptosystem RSA beruht auf 
        ///der Tatsache, das die Zerlegung einer Zahl in ihre Primfaktoren, die so genannte 
        ///&lt;a href=&quot;help://Factorization_Factorization&quot;&gt;Faktorisierung&lt;/a&gt;, 
        ///ein sehr schwieriges Problem ist, dessen Lösung für große Zahlen extrem lange dauert.
        ///Man bildet das Produkt zweier Primzahlen mit meh [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Primetest_Primetest {
            get {
                return ResourceManager.GetString("Primetest_Primetest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt;Das Sieb des Eratosthenes&lt;/h2&gt;
        ///Das Sieb des Eratosthenes ist ein Verfahren zur Bestimmung aller Primzahlen kleiner oder gleich einer gegebenen Zahl.
        ///Man testet eine Zahl auf ihre Zugehörigkeit zu den Primzahlen, indem man alle Primzahlen bis zu dieser Zahl ermittelt
        ///und prüft, ob sie in der Liste der ermittelten Primzahlen vorkommt. Das Verfahren geht auf den griechischen Mathematiker
        ///Eratosthenes von Kyrene (ca. 200 	v.Chr.) zurück. &lt;br /&gt;&lt;br /&gt;
        ///&lt;b&gt;Verfahren:&lt;/b&gt;&lt;br /&gt;
        ///Zunächst werden alle Zahlen [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Primetest_SieveOfEratosthenes {
            get {
                return ResourceManager.GetString("Primetest_SieveOfEratosthenes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt;Primitivwurzeln einer Primzahl: Eingabemöglichkeiten&lt;/h2&gt;
        ///Primitivwurzeln können für mehrere Primzahlen berechnet werden. Die Primzahlen deren Primitivwurzel errechnet werden sollen, müssen in 
        ///der Form &lt;br /&gt;
        ///[Primzahl], [Primzahl], [Primzahl], ...
        ///&lt;br /&gt;
        ///eingegeben werden. &lt;br /&gt;
        ///Außerdem ist es möglich, Primitivwurzeln für Primzahlen in einem bestimmten Bereich berechnen zu lassen. Dafür muss die Eingabe in der Form
        ///&lt;br /&gt;
        ///[Zahl];[Zahl]
        ///&lt;br /&gt;
        ///erfolgen.&lt;br /&gt;
        ///Die folgende Abbildung zeigt e [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string PrimitivRoot_Input {
            get {
                return ResourceManager.GetString("PrimitivRoot_Input", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt;Primitivwurzeln einer Primzahl&lt;/h2&gt;
        ///Die &lt;strong&gt;Primitivwurzel&lt;/strong&gt; modulo m ist ein Begriff aus dem &lt;a href=&quot;http://de.wikipedia.org/wiki/Teilgebiete_der_Mathematik&quot; target=&quot;_blank&quot;&gt;mathematischen Teilgebiet&lt;/a&gt; &lt;a href=&quot;http://de.wikipedia.org/wiki/Zahlentheorie&quot; target=&quot;_blank&quot;&gt;Zahlentheorie&lt;/a&gt;.&lt;br /&gt;
        ///Eine Primitivwurzel ist ein ausgezeichnetes Element einer primen Restklassengruppe: Die besondere Eigenschaft einer Primitivwurzel ist, dass jedes Element (bis auf die 0) der Restklassengruppe al [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string PrimitivRoot_PrimitivRoot {
            get {
                return ResourceManager.GetString("PrimitivRoot_PrimitivRoot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt;Die Simpson-Formel zur Berechnung des logarithmischen Integrals&lt;/h2&gt;
        ///&lt;p align=&quot;justify&quot;&gt;
        ///Die &lt;a href=&quot;http://de.wikipedia.org/wiki/Simpsonregel&quot; target=&quot;_blank&quot;&gt;Simpson-Formel&lt;/a&gt; ist ein Näherungsverfahren zur Berechnung eines Integrals.
        ///Dabei bedeutet &quot;Näherungsverfahren&quot;, dass der berechnete Wert nicht exakt mit dem des Integrals übereinstimmt. &lt;br /&gt;
        ///Die Simpson-Formel liefert ungenauere Werte als die Berechnung mit Pari/GP, kann dafür aber schneller berechnet werden.
        ///&lt;/p&gt;.
        /// </summary>
        internal static string Simpson_Lin {
            get {
                return ResourceManager.GetString("Simpson_Lin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2&gt;Die Ulam-Spirale&lt;/h2&gt;
        ///&lt;a href=&quot;http://de.wikipedia.org/wiki/Ulam-Spirale&quot; target=_blank&quot;&gt;Die Ulam-Spirale&lt;/a&gt; ist eine der 
        ///berühmtesten Darstellungen in Zusammenhang mit Primzahlen. Sie wurde 1963 von dem Mathematiker
        ///Stanisław Marcin Ulam entdeckt, der während eines Vortrages aus Langeweile die natürlichen Zahlen beginnend bei 1 in Form einer Spirale
        ///auf ein karites Blatt eintrug. Er kreiste die Primzahlen ein und machte die überraschende Entdeckung, dass sich fast alle 
        ///Primzahlen auf diagonalen [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Spiral_Ulam {
            get {
                return ResourceManager.GetString("Spiral_Ulam", resourceCulture);
            }
        }
    }
}
