//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.1
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Cryptool.Vigenere.Properties {
    using System;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Cryptool.Vigenere.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Action ähnelt.
        /// </summary>
        internal static string ActionCaption {
            get {
                return ResourceManager.GetString("ActionCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select the Algorithm action ähnelt.
        /// </summary>
        internal static string ActionTooltip {
            get {
                return ResourceManager.GetString("ActionTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Alphabet case sensitive ähnelt.
        /// </summary>
        internal static string AlphabetCaseCaption {
            get {
                return ResourceManager.GetString("AlphabetCaseCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Should upper and lower case be treated differently? (Should a == A) ähnelt.
        /// </summary>
        internal static string AlphabetCaseTooltip {
            get {
                return ResourceManager.GetString("AlphabetCaseTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Alphabet ähnelt.
        /// </summary>
        internal static string AlphabetSymbolsCaption {
            get {
                return ResourceManager.GetString("AlphabetSymbolsCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die This is the used alphabet. ähnelt.
        /// </summary>
        internal static string AlphabetSymbolsTooltip {
            get {
                return ResourceManager.GetString("AlphabetSymbolsTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die External alphabet input ähnelt.
        /// </summary>
        internal static string InputAlphabetCaption {
            get {
                return ResourceManager.GetString("InputAlphabetCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Input a string containing the alhabet which should be used by Vigenère. If no alphabet is provided on this input, the internal alphabet will be used. ähnelt.
        /// </summary>
        internal static string InputAlphabetTooltip {
            get {
                return ResourceManager.GetString("InputAlphabetTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Text input ähnelt.
        /// </summary>
        internal static string InputStringCaption {
            get {
                return ResourceManager.GetString("InputStringCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Input a string to be processed by the Vigenère cipher ähnelt.
        /// </summary>
        internal static string InputStringTooltip {
            get {
                return ResourceManager.GetString("InputStringTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Modus ähnelt.
        /// </summary>
        internal static string ModusCaption {
            get {
                return ResourceManager.GetString("ModusCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select the Algorithm action ähnelt.
        /// </summary>
        internal static string ModusTooltip {
            get {
                return ResourceManager.GetString("ModusTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Stream output ähnelt.
        /// </summary>
        internal static string OutputDataCaption {
            get {
                return ResourceManager.GetString("OutputDataCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The string after processing with the Vigenère cipher is converted to a stream.Default encoding is used. ähnelt.
        /// </summary>
        internal static string OutputDataTooltip {
            get {
                return ResourceManager.GetString("OutputDataTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Text output ähnelt.
        /// </summary>
        internal static string OutputStringCaption {
            get {
                return ResourceManager.GetString("OutputStringCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The string after processing with the Vigenère cipher ähnelt.
        /// </summary>
        internal static string OutputStringTooltip {
            get {
                return ResourceManager.GetString("OutputStringTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Vigenère ähnelt.
        /// </summary>
        internal static string PluginCaption {
            get {
                return ResourceManager.GetString("PluginCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Vigenere/DetailedDescription/Description.xaml ähnelt.
        /// </summary>
        internal static string PluginDescriptionURL {
            get {
                return ResourceManager.GetString("PluginDescriptionURL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Vigenère -- classic or autokey polyalphabetic substitution cipher ähnelt.
        /// </summary>
        internal static string PluginTooltip {
            get {
                return ResourceManager.GetString("PluginTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Shift key (multiple letters) ähnelt.
        /// </summary>
        internal static string ShiftCharCaption {
            get {
                return ResourceManager.GetString("ShiftCharCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Enter multiple letters as the key ähnelt.
        /// </summary>
        internal static string ShiftCharTooltip {
            get {
                return ResourceManager.GetString("ShiftCharTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die String ähnelt.
        /// </summary>
        internal static string ShiftValueCaption {
            get {
                return ResourceManager.GetString("ShiftValueCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Keyword as derived by the VigenereAnalyser ähnelt.
        /// </summary>
        internal static string ShiftValueTooltip {
            get {
                return ResourceManager.GetString("ShiftValueTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Shift value (integer) ähnelt.
        /// </summary>
        internal static string ShiftValueTPCaption {
            get {
                return ResourceManager.GetString("ShiftValueTPCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Enter the numbers of letters to shift separated by comma. ähnelt.
        /// </summary>
        internal static string ShiftValueTPTooltip {
            get {
                return ResourceManager.GetString("ShiftValueTPTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Unknown symbol handling ähnelt.
        /// </summary>
        internal static string UnknownSymbolHandlingCaption {
            get {
                return ResourceManager.GetString("UnknownSymbolHandlingCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die What should be done with ecountered characters at the input which are not in the alphabet? ähnelt.
        /// </summary>
        internal static string UnknownSymbolHandlingTooltip {
            get {
                return ResourceManager.GetString("UnknownSymbolHandlingTooltip", resourceCulture);
            }
        }
    }
}
