<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PluginCaption" xml:space="preserve">
    <value>HKDF SHA-256</value>
  </data>
  <data name="HKDFSHA256Tooltip" xml:space="preserve">
    <value>Visualisierung der Schlüsselgenerierungs-Funktion HKDF SHA-256</value>
  </data>
  <data name="ConfigInfinityOutput" xml:space="preserve">
    <value>Implementierung gemäß RFC 5869</value>
  </data>
  <data name="ConfigInfinityOutputTooltip" xml:space="preserve">
    <value>Implementierung gemäß RFC 5869. Das heißt, es wird ein 8-Bit-Zähler (Counter) verwendet und die Länge der Ausgabebytes ist auf 8192 beschränkt. Weitere Informationen sind in der Hilfe zu finden.</value>
  </data>
  <data name="ConfigPresCaption" xml:space="preserve">
    <value>Präsentation aktiv?</value>
  </data>
  <data name="ConfigPresTooltip" xml:space="preserve">
    <value>Aktiviert oder deaktiviert die Präsentation der Komponente</value>
  </data>
  <data name="ConfigPrintKMToFileCaption" xml:space="preserve">
    <value>Generiertes Schlüsselmaterial in Datei speichern</value>
  </data>
  <data name="ConfigPrintKMToFileTooltip" xml:space="preserve">
    <value>Legt fest, dass das generierte Schlüsselmaterial in einer Datei gespeichert wird, um dieses eventuell in anderen Tools zu verwenden</value>
  </data>
  <data name="InputSaltCaption" xml:space="preserve">
    <value>Salt</value>
  </data>
  <data name="InputSaltToolTip" xml:space="preserve">
    <value>Eingabe des Salt</value>
  </data>
  <data name="InputOutputLengthCaption" xml:space="preserve">
    <value>Länge Schlüsselmaterial (in Byte)</value>
  </data>
  <data name="InputOutputLengthToolTip" xml:space="preserve">
    <value>Länge des zu generierenden Schlüsselmaterial (in Byte)</value>
  </data>
  <data name="InputSKMCaption" xml:space="preserve">
    <value>Quellschlüssel-Material</value>
  </data>
  <data name="InputSKMToolTip" xml:space="preserve">
    <value>Eingabe des Quellschlüssel-Material</value>
  </data>
  <data name="OutputKeyMaterialCaption" xml:space="preserve">
    <value>Schlüsselmaterial</value>
  </data>
  <data name="OutputKeyMaterialDebugCaption" xml:space="preserve">
    <value>Debug</value>
  </data>
  <data name="OutputKeyMaterialDebugToolTip" xml:space="preserve">
    <value>Ausgabe der Zwischenschritte der Schlüsselgenerierung</value>
  </data>
  <data name="OutputKeyMaterialToolTip" xml:space="preserve">
    <value>Ausgabe des zu generierenden Schlüsselmaterials</value>
  </data>
  <data name="PresCalc" xml:space="preserve">
    <value>Berechnungschritte überspringen</value>
  </data>
  <data name="PresIntro" xml:space="preserve">
    <value>Kapitel überspringen</value>
  </data>
  <data name="PresNext" xml:space="preserve">
    <value>Weiter</value>
  </data>
  <data name="ProcessGroup" xml:space="preserve">
    <value>Konfiguration des Ablaufs</value>
  </data>
  <data name="SaveFileDialogCaption" xml:space="preserve">
    <value>Speichere Schlüsselmaterial in Datei</value>
  </data>
  <data name="SaveFileDialogTooltip" xml:space="preserve">
    <value>Spezifiziert die Datei, in der das Schlüsselmaterial gespeichert werden kann</value>
  </data>
  <data name="PresConstructionSectionHeading" xml:space="preserve">
    <value>Konstruktion</value>
  </data>
  <data name="PresConstructionSectionHeadingNum" xml:space="preserve">
    <value>2. Konstruktion HKDF SHA-256</value>
  </data>
  <data name="PresExplanationSectionHeading" xml:space="preserve">
    <value>HKDF SHA-256</value>
  </data>
  <data name="PresIntroductionPart1Text" xml:space="preserve">
    <value>Die Funktion HKDF SHA-256 ist eine Schlüsselgenerierungs-
funktion (Key Derivation Function, KDF). Als Pseudozufallsfunktion (Pseudorandom Function, PRF) wird der Keyed-Hash Message Authentication Code (HMAC) verwendet. Dieser erhält neben dem SKM auch den geheimen Schlüssel als Eingabe. In dieser Implementierung wird als Hashfunktion der SHA-256 im HMAC verwendet. Dieses Schlüsselgenerierungsverfahren wird u.a. vom National Institute of Standards and Technology (NIST) empfohlen.</value>
  </data>
  <data name="PresIntroductionSectionHeading" xml:space="preserve">
    <value>Einführung</value>
  </data>
  <data name="PresIntroductionSectionHeadingNum" xml:space="preserve">
    <value>1. Einführung</value>
  </data>
  <data name="PresSectionIntroductionText" xml:space="preserve">
    <value>&lt;Bold&gt;&lt;Underline&gt;Eingaben:&lt;/Underline&gt;&lt;/Bold&gt;
&lt;Bold&gt;Quellschlüssel-Material:&lt;/Bold&gt; Spezifiziert das Quellschlüssel-
Material (Source Key Material, SKM).

&lt;Bold&gt;Salt:&lt;/Bold&gt; Spezifiziert den Saltwert zur Berechnung des Pseudozufallsschlüssel (Pseudorandom Key, PRK). Dieser muss nicht geheim sein.

&lt;Bold&gt;Kontext-Information:&lt;/Bold&gt; Spezifiziert die anwendungsspezifische Konstante CTXInfo (Context Information, CTXInfo). Diese kann auch leer sein.

&lt;Bold&gt;Länge des Schlüsselmaterials (in Byte):&lt;/Bold&gt; Spezifiziert die Länge des Schlüsselmaterials in Byte.

&lt;Bold&gt;&lt;Underline&gt;Ausgaben:&lt;/Underline&gt;&lt;/Bold&gt;
&lt;Bold&gt;Schlüsselmaterial:&lt;/Bold&gt; Nach der Berechnung ist das generierte Schlüsselmaterial (Key Material, KM) im Textfeld zu sehen.

&lt;Bold&gt;Debug:&lt;/Bold&gt; Das Schlüsselmaterial wird sukzessive in mehreren Schritten berechnet. Die Ergebnisse der jeweiligen Teilschritte sind in der Debugausgabe zu sehen.</value>
  </data>
  <data name="PresTitleHeading" xml:space="preserve">
    <value>HKDF SHA-256
--
Eine Schlüsselgenerierungs-Funktion mit erweiterbarer Ausgabelänge
</value>
  </data>
  <data name="ExToMuchOutputRequested" xml:space="preserve">
    <value>Bitte geben Sie einen kleineren Wert für die Länge der Ausgabebytes ein. Es wurde angegeben: {0}. Erlaubt sind maximal: {1}</value>
  </data>
  <data name="InputCtxInfoCaption" xml:space="preserve">
    <value>CTXInfo</value>
  </data>
  <data name="InputCtxInfoToolTip" xml:space="preserve">
    <value>Eingabe der anwendungsspezifischen Konstante CTXInfo</value>
  </data>
  <data name="KeyMaterialDebugTextTemplate" xml:space="preserve">
    <value>Ausgabe der {0}{ord} Berechnungsrunde:

Byte 1 - 8:   {1}
Byte 9 - 16:  {2}
Byte 17 - 24: {3}
Byte 25 - 32: {4}</value>
  </data>
  <data name="PresConstructionPart1Text" xml:space="preserve">
    <value>Die Berechnung des Schlüsselmaterials kann formal wie folgt beschrieben werden:</value>
  </data>
  <data name="PresConstructionPart2Text" xml:space="preserve">
    <value>Das HKDF-Verfahren besteht aus zwei Schritten. Im ersten Schritt wird ein Pseudozufallsschlüssel (Pseudorandom Key, PRK) generiert. Dieser wird auf Basis des SKM und eines optionalen Salts berechnet.</value>
  </data>
  <data name="PresConstructionPart3Text" xml:space="preserve">
    <value>Im zweiten Schritt wird das Schlüsselmaterial berechnet. Dazu wird der PRK aus dem ersten Schritt als geheimer Schlüssel verwendet. Das KM wird schrittweise berechnet. Das HKDF-Verfahren verwendet dazu eine Feedback-Schleife und einen Zähler: Der jeweiligs vorher berechnete Wert wird als Eingabe für die nachfolgende Berechnung verwendet. Der Zähler wird bei jedem Schritt inkrementiert. Die Eingabe CTXinfo ist eine anwendungsspezifische Konstante, diese kann auch entfallen.</value>
  </data>
  <data name="PresConstructionPart4Text" xml:space="preserve">
    <value>Die folgende Abbildung visualisiert Schritt zwei:</value>
  </data>
  <data name="PresConstructionScheme" xml:space="preserve">
    <value>Step 1: Extrahierung
        PRK = HMAC-SHA256(salt, SKM)

Step 2: Erweiterung
        KM(0) = empty string (zero length)
        KM(1) = HMAC-SHA256(PRK, KM(0) || info || CTR)
        KM(2) = HMAC-SHA256(PRK, KM (1) || info || CTR)
        …
        KM(n) = HMAC-SHA256(PRK, KM (n-1) || info || CTR)</value>
  </data>
  <data name="PresIterationPRKCalc" xml:space="preserve">
    <value>Step 1: Berechnung des PRK mit folgenden Eingaben:

SKM: {0} 
Salt: {1}</value>
  </data>
  <data name="PresIterationRounds" xml:space="preserve">
    <value>Step 2: Berechnungsrunde {0} von {1}

PRK: {2} 
SKM: {3}
CTXInfo: {4}
Counter: {5}</value>
  </data>
  <data name="PresIterationSectionHeading" xml:space="preserve">
    <value>Berechnung</value>
  </data>
  <data name="PresIterationSectionHeadingNum" xml:space="preserve">
    <value>3. Berechnung</value>
  </data>
  <data name="PresKeyMaterialDebugTextTemplate" xml:space="preserve">
    <value>Ausgabe der {0}{ord} Berechnungsrunde:

Byte 1 - 8:   {1}
Byte 9 - 16:  {2}
Byte 17 - 24: {3}
Byte 25 - 32: {4}</value>
  </data>
  <data name="PresPRKDebugTextTemplate" xml:space="preserve">
    <value>Ausgabe des PRK:

Byte 1 - 8:   {1}
Byte 9 - 16:  {2}
Byte 17 - 24: {3}
Byte 25 - 32: {4}</value>
  </data>
  <data name="PRKDebugTextTemplate" xml:space="preserve">
    <value>Ausgabe des PRK:

Byte 1 - 8:     {1}
Byte 9 - 16:   {2}
Byte 17 - 24: {3}
Byte 25 - 32: {4}</value>
  </data>
  <data name="ExSystemOutOfMemory" xml:space="preserve">
    <value>Bei der Anforderung des Speichers ist ein Fehler
aufgetreten. Bitte spezifizieren Sie einen kleineren Wert für die
Ausgabelänge.</value>
  </data>
  <data name="PresErrorText" xml:space="preserve">
    <value>Es ist ein Fehler aufgetreten. Weitere Informationen sind im Protokoll des CrypTool2 zu finden.</value>
  </data>
  <data name="PresFinishedSectionHeading" xml:space="preserve">
    <value>4. Berechnung beendet</value>
  </data>
  <data name="PresFinishedText" xml:space="preserve">
    <value>Zum Wiederholen der Berechnung gibt es 3 Alternativen: 

- Entweder die Ausführung stoppen und wieder starten
- Eine der Eingaben ändern
- Auf den Button "Neustart" klicken (dann startet die Berechnung automatisch neu)</value>
  </data>
  <data name="PresRestart" xml:space="preserve">
    <value>Neustart</value>
  </data>
  <data name="PresStart" xml:space="preserve">
    <value>Start</value>
  </data>
  <data name="TooMuchOutputRequestedLogForKPFStd" xml:space="preserve">
    <value>Die größte Menge an Ausgabebytes sind 8160 byte bei der Implementierung gemäß RFC 5869 . Die angeforderte Menge von {0} byte wurde auf das Maximum gesetzt.</value>
  </data>
  <data name="TooMuchOutputRequestedLogMSG" xml:space="preserve">
    <value>Die größte Menge an Ausgabebytes sind 5 MB 5242880byte). Die angeforderte Menge von {0} byte wurde auf das Maximum gesetzt.</value>
  </data>
  <data name="PresStepText" xml:space="preserve">
    <value>{0}/{1}</value>
  </data>
  <data name="PrintToFileGroup" xml:space="preserve">
    <value>Speicher-Parameter</value>
  </data>
</root>