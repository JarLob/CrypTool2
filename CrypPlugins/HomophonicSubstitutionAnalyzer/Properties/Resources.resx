<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AlgorithmSettingsGroup" xml:space="preserve">
    <value>Cryptanalysis algorithm settings</value>
  </data>
  <data name="AnalaysisModeTooltip" xml:space="preserve">
    <value>Automatic or semi-automatic mode</value>
  </data>
  <data name="AnalysisModeCaption" xml:space="preserve">
    <value>Analysis mode</value>
  </data>
  <data name="Analyzer" xml:space="preserve">
    <value>Analyzer</value>
  </data>
  <data name="BestList" xml:space="preserve">
    <value>Bestlist</value>
  </data>
  <data name="Ciphertext" xml:space="preserve">
    <value>Ciphertext:</value>
  </data>
  <data name="CiphertextAlphabet" xml:space="preserve">
    <value>Ciphertext alphabet:</value>
  </data>
  <data name="CiphertextCaption" xml:space="preserve">
    <value>Ciphertext</value>
  </data>
  <data name="CiphertextFormatCaption" xml:space="preserve">
    <value>Ciphertext format</value>
  </data>
  <data name="CiphertextFormatTooltip" xml:space="preserve">
    <value>This defines the format of the ciphertext (single letters, number groups, or comma-separated)</value>
  </data>
  <data name="CiphertextTooltip" xml:space="preserve">
    <value>Ciphertext to analyze</value>
  </data>
  <data name="CommaSeparated" xml:space="preserve">
    <value>Comma-separated</value>
  </data>
  <data name="Copy_all" xml:space="preserve">
    <value>Copy all lines</value>
  </data>
  <data name="Copy_key" xml:space="preserve">
    <value>Copy key</value>
  </data>
  <data name="Copy_line" xml:space="preserve">
    <value>Copy selected line</value>
  </data>
  <data name="Copy_text" xml:space="preserve">
    <value>Copy text</value>
  </data>
  <data name="Copy_value" xml:space="preserve">
    <value>Copy value</value>
  </data>
  <data name="CostFactorMultiplicatorCaption" xml:space="preserve">
    <value>Cost factor multiplicator</value>
  </data>
  <data name="CostValue_0" xml:space="preserve">
    <value>Cost value: {0}</value>
  </data>
  <data name="CyclesCaption" xml:space="preserve">
    <value>Cycles</value>
  </data>
  <data name="CyclesTooltip" xml:space="preserve">
    <value>Maximum number of analysis cycles to be performed</value>
  </data>
  <data name="DictionaryCaption" xml:space="preserve">
    <value>Dictionary</value>
  </data>
  <data name="DictionaryTooltip" xml:space="preserve">
    <value>The attached dictionary is used during cryptanalysis to find and lock already revealed plaintext words.</value>
  </data>
  <data name="DifferentHomophones" xml:space="preserve">
    <value>The ciphertext length is {0} and it contains {1} different homophones.</value>
  </data>
  <data name="FindLockWords" xml:space="preserve">
    <value>Find/Lock words</value>
  </data>
  <data name="FixedTemperatureCaption" xml:space="preserve">
    <value>Fixed temperature</value>
  </data>
  <data name="FullAutomatic" xml:space="preserve">
    <value>Automatic</value>
  </data>
  <data name="KeyHeader" xml:space="preserve">
    <value>Key</value>
  </data>
  <data name="KeyLetterDistribution" xml:space="preserve">
    <value>Key letter distribution</value>
  </data>
  <data name="LanguageCaption" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="LanguageSettingsGroup" xml:space="preserve">
    <value>Language settings</value>
  </data>
  <data name="LanguageTooltip" xml:space="preserve">
    <value>This language will be used by the cost function</value>
  </data>
  <data name="MaxWordLengthCaption" xml:space="preserve">
    <value>Maximum word length</value>
  </data>
  <data name="MaxWordLengthTooltip" xml:space="preserve">
    <value>The maximum length of each word to auto lock</value>
  </data>
  <data name="MinWordLengthCaption" xml:space="preserve">
    <value>Minimum word length</value>
  </data>
  <data name="MinWordLengthTooltip" xml:space="preserve">
    <value>The minimum length of each word to auto lock</value>
  </data>
  <data name="NumberGroups" xml:space="preserve">
    <value>Number groups</value>
  </data>
  <data name="Plaintext" xml:space="preserve">
    <value>Plaintext:</value>
  </data>
  <data name="PlaintextMapping" xml:space="preserve">
    <value>Plaintext mapping:</value>
  </data>
  <data name="PlaintextCaption" xml:space="preserve">
    <value>Plaintext</value>
  </data>
  <data name="PlaintextTooltip" xml:space="preserve">
    <value>New plaintext candidates with higher scores are shown here</value>
  </data>
  <data name="PluginCaption" xml:space="preserve">
    <value>Homophonic Substitution Analyzer</value>
  </data>
  <data name="PluginTooltip" xml:space="preserve">
    <value>Analyzer to cryptanalyze homophonic substitution ciphers</value>
  </data>
  <data name="ResetLockedLetters" xml:space="preserve">
    <value>Reset locked letters</value>
  </data>
  <data name="RestartsCaption" xml:space="preserve">
    <value>Restarts</value>
  </data>
  <data name="RestartsTooltip" xml:space="preserve">
    <value>How many times should the analysis algorithm be restarted?</value>
  </data>
  <data name="SemiAutomatic" xml:space="preserve">
    <value>Semi automatic</value>
  </data>
  <data name="SingleLetters" xml:space="preserve">
    <value>Single letters</value>
  </data>
  <data name="TextFormatGroup" xml:space="preserve">
    <value>Text format</value>
  </data>
  <data name="TextHeader" xml:space="preserve">
    <value>Revealed plaintext</value>
  </data>
  <data name="TopTenLabel" xml:space="preserve">
    <value>Bestlist</value>
  </data>
  <data name="UseSpacesCaption" xml:space="preserve">
    <value>Use spaces</value>
  </data>
  <data name="UseSpacesTooltip" xml:space="preserve">
    <value>If activated, the analyzer assumes spaces in the plaintext</value>
  </data>
  <data name="ValueHeader" xml:space="preserve">
    <value>Costvalue</value>
  </data>
  <data name="WordCountToFindCaption" xml:space="preserve">
    <value>Word count to find</value>
  </data>
  <data name="WordCountToFindTooltip" xml:space="preserve">
    <value>Defines the minimum number of words to find in the revealed plaintext, that the auto locker locks the according symbols</value>
  </data>
  <data name="WordLockerGroup" xml:space="preserve">
    <value>Word locker</value>
  </data>
  <data name="LetterLabel" xml:space="preserve">
    <value>Letter</value>
  </data>
  <data name="MaxLabel" xml:space="preserve">
    <value>Maximum number</value>
  </data>
  <data name="MinLabel" xml:space="preserve">
    <value>Minimum number</value>
  </data>
</root>