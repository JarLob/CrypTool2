<?xml version="1.0" encoding="utf-8" ?>

<documentation>
  <language culture="en"/>
  <language culture="de-DE"/>

  <introduction lang="en">
    PRESENT is an example of an SP-network (substitution permutation network) and consists of 31 rounds. 
    The block length is 64 bits and two key lengths of 80 and 128 bits are supported. 
    PRESENT is an ultra-lightweight block cipher, designed to work in extremely constrained environments such as RFID tags and 
    sensor networks with both security and hardware efficiency in mind.
  </introduction>

  <introduction lang="de-DE">
    PRESENT ist ein Beispiel für ein SP-Netzwerk (Substitutions-Permutations-Netzwerk) und besteht aus 31 Runden.
    Die Blocklänge beträgt 64 Bits, es werden zwei Schlüssellängen von 80 und 128 Bits unterstützt.
    PRESENT ist eine ultra-leichtgewichtige Blockchiffre, die darauf ausgelegt ist, in extrem Ressourcen-beschränkten Umgebungen, wie
    beispielsweise RFID-Tags und Sensornetzwerken, zu arbeiten. PRESENT berücksichtigt damit sowohl Aspekte der Sicherheit als auch der Hardwareeffizienz.
  </introduction>

  <usage lang="en">
    The PRESENT component has the two operation modes "Encryption" and "Decryption". You can switch between the modes in the settings of the component.
    <newline />
    <newline />

    <section headline="Encryption">
      In "Encryption" mode, the component expects the plaintext as a data stream on the input labeled "Input".
      If the size of the input is not a multiple of the block size, as many bytes as are necessary to achieve
      a multiple of the block size are padded. You can choose between several padding methods in the settings of the component.
      When decrypting a ciphertext, it is important to select the same padding method as was used for encryption.
      Otherwise the last block will be deciphered wrongly or not at all.
      The key is expected as a byte array on the input labeled "Key".
      If the selected key size does not correspond to the size of the entered key, an error message will be issued and the execution stops.
      The encrypted data block is sent to the output of the component as a data stream.
      <newline />
      <newline />
    </section>

    <section headline="Decryption">
      In "Decryption" mode, the component expects the ciphertext that is to be decrypted on the input labeled "Input".
      The size of the input must be a multiple of the block size. Otherwise, the component stops with an error message.
      The key is entered in the same way as in "Encryption" mode.
      Finally, the plaintext will be sent to the output of the component as a data stream.
      <newline />
      <newline />
    </section>

    <section headline="Cryptographic Mode">
      Block ciphers divide their input data into blocks of a fixed size and apply the encryption or decryption function on the blocks of the input.
      The chaining mode determines the way in which consecutive blocks, after being encrypted or decryted, are combined in order to achieve better security or error tolerance.
      The PRESENT component offers the following block chaining modes: ECB (Electronic Code Book), CBC (Cipher Block Chaining), CFB (Cipher Feedback) and OFB (Output Feedback).
      Select the appropriate chaining mode in the settings of the component.
      <newline />
      In ECB mode, each block is encrypted separately. In the other modes however, a plaintext block is combined with the previous ciphertext block.
      As there is no previous block for the first block, we must provide one for these modes. This extra block is given by the initialization vector (IV), which must be provided as a byte array
      on the input of the component. Thus the size of the IV must correspond to the block size. If the provided IV is too short, it is filled with null bytes. If it is too long, it is truncated.
      If no IV is given, the component will assume an IV consisting of null bytes.
    </section>
  </usage>

  <usage lang="de-DE">
    Die Komponente hat die zwei Betriebsarten "Verschlüsselung" und "Entschlüsselung", zwischen denen in den Einstellungen der Komponente umgeschaltet werden kann.
    <newline />
    <newline />
    <section headline="Verschlüsselung">
      In der Betriebsart "Verschlüsselung" erwartet die Komponente als Eingabe den zu verschlüsselnden Klartext als Datenstrom am Eingang "Eingabedatenstrom".
      Ist die Länge der Eingabe kein Vielfaches der Blockgröße, so müssen vor der Verschlüsselung so viele Bytes angehängt werden, bis sie ohne Rest in Blöcke der Blockgröße zerlegt werden kann.
      Diesen Vorgang nennt man 'Padding'. In den Einstellungen kann man zwischen verschiedenen Padding-Methoden wählen.
      Es ist wichtig, dass bei der Entschlüsselung eines Chiffretextes in den Einstellungen dieselbe Padding-Methode eingestellt wird, die bei der Verschlüsselung verwendet wurde,
      da der letzte Block sonst falsch oder gar nicht entschlüsselt wird.
      Der Schlüssel wird als Byte-Array am Eingang "Schlüssel" erwartet.
      Stimmt die Größe des eingegebenen Schlüssels nicht der erwarteten Schlüsselgröße überein, so wird eine Fehlermeldung ausgegeben und die Ausführung wird beendet.
      Der verschlüsselte Datenblock wird am Ausgang der Komponente als Datenstrom zur Verfügung gestellt.
      <newline />
      <newline />
    </section>
    <section headline="Entschlüsselung">
      In der Betriebsart "Entschlüsselung" erwartet die Komponente den zu entschlüsselnden Geheimtext als Datenstrom am Eingang "Eingabedatestrom".
      Die Länge der Eingabe muss hierbei ein Vielfaches der Blockgröße sein, andernfalls wird die Berechnung mit einer Fehlermeldung abgebrochen.
      Der Schlüssel wird wie bei der Entschlüsselung eingegeben. Der entschlüsselte Klartext wird dann schließlich am Ausgang der Komponente als Datenstrom bereitgestellt.
      <newline />
      <newline />
    </section>
    <section headline="Kryptographischer Modus">
      Blockverschlüsselungsverfahren unterteilen die Eingabedaten in Blöcke festgelegter Größen und
      wenden die Ver-/Entschlüsselungsfunktion dann fortlaufend auf diese Blöcke an. Der "kryptographische Modus", in dem
      eine Blockchiffre betrieben wird, gibt an, wie die Ergebnisse der Ver- bzw. Entschlüsselung aufeinanderfolgender Blöcke
      miteinander kombiniert werden, um z.B. größere Sicherheit oder Fehlertoleranz zu erzielen. Die PRESENT-Komponente bietet
      die kryptographischen Modi ECB (Electronic Code Book), CBC (Cipher Block Chaining), CFB (Cipher Feedback) und OFB (Output Feedback)
      an, die in den Einstellungen ausgewählt werden können.
      <newline />
      Beim ECB-Modus wird dabei jeder Block separat verschlüsselt. Bei den anderen Modi hingegen
      wird die Verschlüsselung eines Klartextblocks zusätzlich mit dem vorangehenden Chiffretextblock verknüpft. Da für den ersten
      Klartextblock kein vorangehender Chiffretextblock existiert, wird dieser mit einem Initialisierungsvektor verknüpft.
      Dieser muss die verwendete Blockgröße haben und wird am zugehörigen Eingang der Komponente
      als Byte-Array eingegeben. Ein zu kurzer Initialisierungsvektor wird mit Nullbytes aufgefüllt, ein zu langer auf die Blockgröße
      beschnitten. Wird der Eingang nicht verbunden, so wird ein Initialisierungsvektor bestehend aus Nullbytes verwendet.
    </section>
  </usage>
  
  <presentation lang="en">
  </presentation>
  
  <presentation lang="de-DE">
  </presentation>
  
  <references>
    <linkReference>
      <link url="http://en.wikipedia.org/wiki/PRESENT_(cipher)" lang="en" />
      <caption lang="en">PRESENT in Wikipedia</caption>
      <link url="http://en.wikipedia.org/wiki/PRESENT_(cipher)" lang="en" />
      <caption lang="de-DE">PRESENT in der englischen Wikipedia</caption>
    </linkReference>
    <linkReference>
      <link url="http://en.wikipedia.org/wiki/Substitution-permutation_network" lang="en" />
      <caption lang="en">Substitution permutation network in Wikipedia</caption>
      <link url="http://de.wikipedia.org/wiki/Substitutions-Permutations-Netzwerk " lang="de" />
      <caption lang="de">Substitutions-Permutations-Netzwerk in Wikipedia</caption>
    </linkReference>
    <linkReference>
      <link url="http://homes.esat.kuleuven.be/~abogdano/papers/present_ches07.pdf" lang="en" />
      <caption lang="en">A. Bogdanov, L.R. Knudsen, G. Leander, C. Paar, A. Poschmann, M.J.B. Robshaw, Y. Seurin, and C. Vikkelsoe: "PRESENT: An Ultra-Lightweight Block Cipher", 2007</caption>
    </linkReference>
    <linkReference>
      <link url="http://www.cosic.esat.kuleuven.be/publications/article-1234.pdf" lang="en" />
      <caption lang="en">Onur Özen, Kerem Varici, Cihangir Tezcan, and Celebi Kocair: Lightweight Block Ciphers Revisited:Cryptanalysis of Reduced Round PRESENT and HIGHT</caption>
    </linkReference>
  </references>
</documentation>