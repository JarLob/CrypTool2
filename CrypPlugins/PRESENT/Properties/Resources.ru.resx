<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PluginCaption" xml:space="preserve">
    <value>НАСТОЯЩЕЕ ВРЕМЯ</value>
  </data>
  <data name="PluginTooltip" xml:space="preserve">
    <value>PRESENT - сверхлегкий блочный шифр</value>
  </data>
  <data name="InputStreamCaption" xml:space="preserve">
    <value>вход</value>
  </data>
  <data name="InputStreamTooltip" xml:space="preserve">
    <value>Данные должны быть зашифрованы или дешифрованы.</value>
  </data>
  <data name="InputKeyCaption" xml:space="preserve">
    <value>ключ</value>
  </data>
  <data name="InputKeyTooltip" xml:space="preserve">
    <value>Должно быть 10 или 16 байт.</value>
  </data>
  <data name="InputIVCaption" xml:space="preserve">
    <value>Вектор инициализации</value>
  </data>
  <data name="InputIVTooltip" xml:space="preserve">
    <value>IV для использования в цепных режимах (CBC, CFB, OFB). Он должен быть того же размера, что и длина блока (8 байтов).</value>
  </data>
  <data name="OutputStreamCaption" xml:space="preserve">
    <value>Выходной поток</value>
  </data>
  <data name="OutputStreamTooltip" xml:space="preserve">
    <value>Шифрованные или дешифрованные выходные данные</value>
  </data>
  <data name="ActionCaption" xml:space="preserve">
    <value>действие</value>
  </data>
  <data name="ActionTooltip" xml:space="preserve">
    <value>Вы хотите, чтобы входные данные были зашифрованы или дешифрованы?</value>
  </data>
  <data name="ModeCaption" xml:space="preserve">
    <value>Цепочный режим</value>
  </data>
  <data name="ModeTooltip" xml:space="preserve">
    <value>Выберите режим блочного шифрования.</value>
  </data>
  <data name="PaddingCaption" xml:space="preserve">
    <value>Режим заполнения</value>
  </data>
  <data name="PaddingTooltip" xml:space="preserve">
    <value>Выберите режим для заполнения частичных блоков данных.</value>
  </data>
  <data name="ActionList1" xml:space="preserve">
    <value>шифровать</value>
  </data>
  <data name="ActionList2" xml:space="preserve">
    <value>расшифровывать</value>
  </data>
  <data name="ModeList1" xml:space="preserve">
    <value>Электронная кодовая книга (ЕЦБ)</value>
  </data>
  <data name="ModeList2" xml:space="preserve">
    <value>Cipher Block Chaining (CBC)</value>
  </data>
  <data name="ModeList3" xml:space="preserve">
    <value>Обратная связь с шифрованием (CFB)</value>
  </data>
  <data name="ModeList4" xml:space="preserve">
    <value>Выходная обратная связь (OFB)</value>
  </data>
  <data name="About" xml:space="preserve">
    <value>Около</value>
  </data>
  <data name="Add_Roundkey" xml:space="preserve">
    <value>Добавить раунд</value>
  </data>
  <data name="animation_speed" xml:space="preserve">
    <value>скорость анимации</value>
  </data>
  <data name="Assign" xml:space="preserve">
    <value>приписывать</value>
  </data>
  <data name="A_top_level_algorithmic_description_of_PRESENT" xml:space="preserve">
    <value>Алгоритмическое описание верхнего уровня НАСТОЯЩЕГО:</value>
  </data>
  <data name="bit_group_sbox" xml:space="preserve">
    <value>бит {0} (бит {1: d2}, {2: d2}, {3: d2}, {4: d2}) sbox: {5} -&gt; {6}</value>
  </data>
  <data name="bit_group_xor" xml:space="preserve">
    <value>бит {0} (бит {1: d2}, {2: d2}, {3: d2}, {4: d2}) ключ xor: {5} XOR {6} = {7}</value>
  </data>
  <data name="Data_" xml:space="preserve">
    <value>Данные:</value>
  </data>
  <data name="Done" xml:space="preserve">
    <value>Готово</value>
  </data>
  <data name="Encrypted_to" xml:space="preserve">
    <value>Шифрованный 0x {0: x16} до 0x {1: x16}</value>
  </data>
  <data name="Encryption" xml:space="preserve">
    <value>шифрование</value>
  </data>
  <data name="Encryption_Data" xml:space="preserve">
    <value>Шифрование: данные = 0x {0: x16}</value>
  </data>
  <data name="Finished" xml:space="preserve">
    <value>Законченный</value>
  </data>
  <data name="Finished_generating_32_roundkeys" xml:space="preserve">
    <value>Завершено создание 32 круглых клавиш</value>
  </data>
  <data name="Key_" xml:space="preserve">
    <value>Ключ:</value>
  </data>
  <data name="Key_Extraction" xml:space="preserve">
    <value>Экстракция ключа</value>
  </data>
  <data name="Key_Schedule" xml:space="preserve">
    <value>Расписание</value>
  </data>
  <data name="Key_Schedule_" xml:space="preserve">
    <value>Ключевое расписание: Ключ = 0x {0: x16} {1: x4}</value>
  </data>
  <data name="Key_Shift" xml:space="preserve">
    <value>Key_Shift</value>
  </data>
  <data name="Key_XOR" xml:space="preserve">
    <value>Key_XOR</value>
  </data>
  <data name="Key_XOR_" xml:space="preserve">
    <value>Ключ XOR (0x{1: x16} -&gt; 0x{2: x16})</value>
  </data>
  <data name="next_round" xml:space="preserve">
    <value>следующий раунд</value>
  </data>
  <data name="next_step" xml:space="preserve">
    <value>следующий шаг</value>
  </data>
  <data name="Overview" xml:space="preserve">
    <value>обзор</value>
  </data>
  <data name="passing_leftmost_4_bits" xml:space="preserve">
    <value>прохождение крайних левых 4 бит через S-box ({0} -&gt; {1})</value>
  </data>
  <data name="pause_resume" xml:space="preserve">
    <value>пауза / возобновление анимации</value>
  </data>
  <data name="Permutation" xml:space="preserve">
    <value>перестановка</value>
  </data>
  <data name="picking_the_64_left_most_bits" xml:space="preserve">
    <value>выбирая 64 левых бита как круглый ключ {0} (0x {1: x16})</value>
  </data>
  <data name="previous_round" xml:space="preserve">
    <value>предыдущий раунд</value>
  </data>
  <data name="previous_step" xml:space="preserve">
    <value>предыдущий шаг</value>
  </data>
  <data name="rotate_key_register_61" xml:space="preserve">
    <value>поверните регистр ключей 61 влево (0x {0: x16} {1: x4} -&gt; 0x {2: x16} {3: x4})</value>
  </data>
  <data name="Roundcounter_XOR" xml:space="preserve">
    <value>Круглый стол XOR</value>
  </data>
  <data name="Round_" xml:space="preserve">
    <value>Круглый:</value>
  </data>
  <data name="Settings" xml:space="preserve">
    <value>настройки</value>
  </data>
  <data name="Step_" xml:space="preserve">
    <value>Шаг:</value>
  </data>
  <data name="S_Box" xml:space="preserve">
    <value>S-Box</value>
  </data>
  <data name="The_PRESENT_cipher_is_an_example" xml:space="preserve">
    <value>PRESENT-шифр является примером SP-сети и состоит из 31 раунда. Длина блока составляет 64 бита, и поддерживаются две длины ключа 80 и 128 бит, но здесь используется только рекомендуемая 80-битная версия ключа.</value>
  </data>
  <data name="Trace" xml:space="preserve">
    <value>след</value>
  </data>
  <data name="xor_round_counter" xml:space="preserve">
    <value>xor round counter с регистром ключей: {0} XOR {1} = {2}</value>
  </data>
  <data name="PaddingList1" xml:space="preserve">
    <value>Никто</value>
  </data>
  <data name="PaddingList2" xml:space="preserve">
    <value>нули</value>
  </data>
  <data name="PaddingList3" xml:space="preserve">
    <value>PKCS7</value>
  </data>
  <data name="PaddingList4" xml:space="preserve">
    <value>ANSIX923</value>
  </data>
  <data name="PaddingList5" xml:space="preserve">
    <value>ISO10126</value>
  </data>
  <data name="PaddingList6" xml:space="preserve">
    <value>Отступ 1-0</value>
  </data>
</root>