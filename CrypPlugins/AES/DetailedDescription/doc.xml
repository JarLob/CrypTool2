<?xml version="1.0" encoding="utf-8"?>
<documentation>
  
  <language culture="en" />
  <language culture="de-DE" />

  <introduction lang="en">
    In cryptography, the Advanced Encryption Standard (AES), also known as Rijndael, is a block cipher adopted as an encryption standard by the U.S. government.
    It has been analyzed extensively and is now used worldwide, as was the case with its predecessor, the Data Encryption Standard <docRef item="Cryptool.Plugins.Cryptography.Encryption.DES">(DES)</docRef>. 
    AES was announced by National Institute of Standards and Technology (NIST) as U.S. FIPS PUB 197 (FIPS 197) <ref id="fips197" /> on November 26, 2001 after a 5-year standardization process. 
    It became effective as a standard May 26, 2002. As of 2006, AES is one of the most popular algorithms used in symmetric key cryptography.
    <newline />
    Rijdael is considered secure; only after 10 years after its standardisation the first &#8211; theoretical interesting, but with no practical relevance &#8211; attack has been discovered <ref id="RelatedKeyCrypt" />.
    Strictly speaking, AES is not precisely Rijndael (although in practice they are used interchangeably) as Rijndael supports a larger range of block and key sizes; 
    AES has a fixed block size of 128 bits and a key size of 128, 192, or 256 bits, whereas Rijndael can be specified with key and block sizes in any multiple of 32 bits, 
    with a minimum of 128 bits and a maximum of 256 bits.
    <newline /><newline />
    <i>
      Source: <ref id="wikipedia" />
    </i>
  </introduction>
  
  <introduction lang="de-DE">
    Der Advanced Encryption Standard (AES) ist ein symmetrisches Kryptosystem, das als Nachfolger für <docRef item="Cryptool.Plugins.Cryptography.Encryption.DES">DES</docRef> und 3DES im Oktober 2000 vom National Institute of Standards and Technology (NIST)
    als Standard (FIPS 197) <ref id="fips197" /> bekanntgegeben wurde. Nach seinen Entwicklern Joan Daemen und Vincent Rijmen wird er auch <i>Rijndael</i>-Algorithmus genannt (gesprochen wie dt. <i>räindahl</i>).
    <newline />
    Der Rijndael-Algorithmus besitzt eine variable Blockgröße von 128, 192 oder 256 Bits und eine variable Schlüssellänge von 128, 192 oder 256 Bits.
    Rijndael bietet ein sehr hohes Maß an Sicherheit; erst mehr als 10 Jahre nach seiner Standardisierung wurde der erste, theoretisch interessante, praktisch aber nicht relevante,
    Angriff gefunden <ref id="RelatedKeyCrypt" />. Streng genommen ist AES nicht Rijndael, da bei AES die Blocklänge auf 128 Bit eingeschränkt wurde, während die Wahl der Schlüssellänge von 128, 192 oder 256 Bits unverändert übernommen worden ist. 
    Die Bezeichnungen der drei AES-Varianten AES-128, AES-192 und AES-256 beziehen sich jeweils auf die gewählte Schlüssellänge.
    <newline />
    Der Algorithmus ist frei verfügbar und darf ohne Lizenzgebühren eingesetzt sowie in Soft- und Hardware implementiert werden. AES ist in den USA für staatliche Dokumente mit höchster Geheimhaltungsstufe zugelassen.
    <newline /><newline />
    <i>
      Quelle: <ref id="wikipedia" />
    </i>
  </introduction>

  <usage lang="en">
    In the settings of the component, you can select whether the component should be operated in Rijndael mode or in AES mode. In Rijndael mode, you can additionally select the block size.
    In AES mode, the block size is fixed at 128 bits. Apart from that, both algorithms provide the same settings.
    <newline/>
    <newline/>
    The AES component has the two operation modes "Encryption" and "Decryption". You can switch between the modes in the settings of the component.
    <newline />
    <newline />

    <section headline="Encryption">
      In "Encryption" mode, the component expects the plaintext as a data stream on the input labeled "Input".
      AES works with a block size of 128 bits (16 bytes), Rijndael with 128 bits (16 bytes), 192 bits (24 bytes) or 256 bits (32 bytes). If the size of the input is not a multiple of the block size, as many bytes as are necessary to achieve
      a multiple of the block size are padded. You can choose between several padding methods in the settings of the component.
      When decrypting a ciphertext, it is important to select the same padding method as was used for encryption.
      Otherwise the last block will be deciphered wrongly or not at all.
      The key is expected as a byte array on the input labeled "Key".
      In the settings of the component, you can determine the size of the key: 128 bits, 192 bits or 256 bits.
      If the selected key size does not correspond to the size of the entered key, a warning will be issued and the key is either padded with null bytes or
      reduced to the required size.
      The encrypted data block is then sent to the output of the component as a data stream.
      <newline />
      <newline />
    </section>

    <section headline="Decryption">
      In "Decryption" mode, the component expects the ciphertext that is to be decrypted on the input labeled "Input".
      The size of the input must be a multiple of the block size. Otherwise, the component stops with an error message.
      The key is entered in the same way as in "Encryption" mode.
      Finally, the plaintext will be sent to the output of the component as a data stream.
      <newline />
      <newline />
    </section>

    <section headline="Cryptographic Mode">
      Block ciphers divide their input data into blocks of a fixed size and apply the encryption or decryption function on the blocks of the input.
      The chaining mode determines the way in which consecutive blocks, after being encrypted or decryted, are combined in order to achieve better security or error tolerance.
      The AES component offers the following block chaining modes: ECB (Electronic Code Book), CBC (Cipher Block Chaining), CFB (Cipher Feedback) and OFB (Output Feedback).
      Select the appropriate chaining mode in the settings of the component.
      <newline />
      In ECB mode, each block is encrypted separately. In the other modes however, a plaintext block is combined with the previous ciphertext block.
      As there is no previous block for the first block, we must provide one for these modes. This extra block is given by the initialization vector (IV), which must be provided as a byte array
      on the input of the component. Thus the size of the IV must correspond to the block size. If the provided IV is too short, it is filled with null bytes. If it is too long, it is truncated.
      If no IV is given, the component will assume an IV consisting of null bytes.
    </section>
  </usage>

  <usage lang="de-DE">
    Wählen Sie in den Einstellungen der Komponente, ob sie im AES-Modus oder im Rijndael-Modus betrieben werden soll. Im Rijndael-Modus besteht zusätzlich die Möglichkeit, die Blockgröße einzustellen.
    Bei AES ist diese auf 128 Bits festgelegt. Abgesehen davon haben beide Algorithmen dieselben Einstellungsmöglichkeiten.
    <newline/>
    <newline/>
    Die Komponente hat die zwei Betriebsarten "Verschlüsselung" und "Entschlüsselung", zwischen denen in den Einstellungen der Komponente umgeschaltet werden kann.
    <newline />
    <newline />
    <section headline="Verschlüsselung">
      In der Betriebsart "Verschlüsselung" erwartet die Komponente als Eingabe den zu verschlüsselnden Klartext als Datenstrom am Eingang "Eingabe".
      AES arbeitet mit einer Blockgröße von 128 Bits (16 Bytes), Rijndael mit 128 Bits (16 Bytes), 192 Bits (24 Bytes) oder 256 Bits (32 Bytes).
      Ist die Länge der Eingabe kein Vielfaches der Blockgröße, so müssen vor der Verschlüsselung so viele Bytes angehängt werden, bis sie ohne Rest in Blöcke der Blockgröße zerlegt werden kann.
      Diesen Vorgang nennt man 'Padding'. In den Einstellungen kann man zwischen verschiedenen Padding-Methoden wählen.
      Es ist wichtig, dass bei der Entschlüsselung eines Chiffretextes in den Einstellungen dieselbe Padding-Methode eingestellt wird, die bei der Verschlüsselung verwendet wurde,
      da der letzte Block sonst falsch oder gar nicht entschlüsselt wird.
      Der Schlüssel wird als Byte-Array am Eingang "Schlüssel" erwartet. In den Einstellungen kann
      die Größe des zu verwendenden Schlüssels bestimmt werden: 128 Bits, 192 Bits oder 256 Bits. Stimmt die Größe des eingegebenen
      Schlüssels nicht mit dieser Einstellung überein, so wird eine Warnung ausgegeben und der Schlüssel entweder mit Nullbytes aufgefüllt
      oder auf die korrekte Größe beschnitten. Der verschlüsselte Datenblock wird dann am Ausgang der Komponente als Datenstrom zur Verfügung gestellt.
      <newline />
      <newline />
    </section>
    <section headline="Entschlüsselung">
      In der Betriebsart "Entschlüsselung" erwartet die Komponente den zu entschlüsselnden Geheimtext als Datenstrom am Eingang "Eingabe".
      Die Länge der Eingabe muss hierbei ein Vielfaches der Blockgröße sein, andernfalls wird die Berechnung mit einer
      Fehlermeldung abgebrochen. Der Schlüssel wird wie bei der Entschlüsselung eingegeben. Der entschlüsselte Klartext
      wird dann schließlich am Ausgang der Komponente als Datenstrom bereitgestellt.
      <newline />
      <newline />
    </section>
    <section headline="Kryptographischer Modus">
      Blockverschlüsselungsverfahren unterteilen die Eingabedaten in Blöcke festgelegter Größen und
      wenden die Ver-/Entschlüsselungsfunktion dann fortlaufend auf diese Blöcke an. Der "kryptographische Modus", in dem
      eine Blockchiffre betrieben wird, gibt an, wie die Ergebnisse der Ver- bzw. Entschlüsselung aufeinanderfolgender Blöcke
      miteinander kombiniert werden, um z.B. größere Sicherheit oder Fehlertoleranz zu erzielen. Die AES-Komponente bietet
      die kryptographischen Modi ECB (Electronic Code Book), CBC (Cipher Block Chaining), CFB (Cipher Feedback) und OFB (Output Feedback)
      an, die in den Einstellungen ausgewählt werden können.
      <newline />
      Beim ECB-Modus wird dabei jeder Block separat verschlüsselt. Bei den anderen Modi hingegen
      wird die Verschlüsselung eines Klartextblocks zusätzlich mit dem vorangehenden Geheimtextblock verknüpft. Da für den ersten
      Klartextblock kein vorangehender Geheimtextblock existiert, wird dieser mit einem Initialisierungsvektor verknüpft.
      Dieser muss die verwendete Blockgröße haben und wird am zugehörigen Eingang der Komponente
      als Byte-Array eingegeben. Ein zu kurzer Initialisierungsvektor wird mit Nullbytes aufgefüllt, ein zu langer auf die Blockgröße
      beschnitten. Wird der Eingang nicht verbunden, so wird ein Initialisierungsvektor bestehend aus Nullbytes verwendet.
    </section>
  </usage>

  <references>
    <linkReference id="wikipedia">
      <link url="http://en.wikipedia.org/wiki/Advanced_Encryption_Standard" lang="en" />
      <caption lang="en">AES (Wikipedia)</caption>
	    <link url="http://de.wikipedia.org/wiki/Advanced_Encryption_Standard" lang="de-DE" />
      <caption lang="de-DE">AES (Wikipedia)</caption>
    </linkReference>
    <linkReference id="fips197">
      <link url="http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf" lang="en" />
      <caption lang="en">FIPS PUB 197: the official AES standard</caption>
      <link url="http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf" lang="de-DE" />
      <caption lang="de-DE">Offizielle Spezifikation des AES vom NIST</caption>
    </linkReference>
    <linkReference id="RelatedKeyCrypt">
      <link url="http://cryptolux.uni.lu/mediawiki/uploads/1/1a/Aes-192-256.pdf" lang="en" />
      <caption lang="en">Related-key Cryptanalysis of the Full AES-192 and AES-256 (PDF)</caption>
    </linkReference>
  </references>
  
</documentation>
