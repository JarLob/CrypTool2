<?xml version="1.0" encoding="utf-8" ?>

<documentation>
  <language culture="en"/>
  <language culture="de-DE"/>

  <introduction lang="en">
  </introduction>

  <introduction lang="de-DE">
    Das DGK-Kryptosystem ist ein homomorphes Verschlüsselungsverfahren, das 2007 von I. Damgård, M. Geisler und M. Krøigaard vorgestellt wurde.
    <newline/>
    <newline/>
    Das Kryptosystem hat die folgenden homomorphen Eigenschaften:
    <list>
      <item>
        Werden zwei verschlüsselte Nachrichten miteinander multipliziert, so ist das Produkt die Verschlüsselung der Summe m1 + m2 der beiden Klartextnachrichten:
        <newline/>
        Dec( Enc(m1) * Enc(m2) ) = m1 + m2
      </item>
      <item>
        Wird eine verschlüsselte Nachricht zur m2-ten Potenz erhoben, so ist das Resultat die Verschlüsselung des Produktes m1 * m2 der beiden Klartextnachrichten.
        <newline/>
        Dec( Enc(m1) ^ m2 ) = m1 * m2
      </item>
    </list>
    Dies bedeutet, dass man ohne Kenntnis des privaten Schlüssels auf den verschlüsselten Daten die mathematischen Operationen Addition und Multiplikation mit einer Konstanten
    durchführen kann, ohne die Argumente zu kennen und die Ergebnisse zu erfahren.
  </introduction>

  <usage lang="en">
    The DGK cryptosystem is a homomorphic cryptosystem, that was presented by I. Damgård, M. Geisler, and M. Krøigaard in 2007.
    <newline/>
    <newline/>
    The cryptosystem has the following homomorphic properties:
    <list>
      <item>
        If you multiply two encrypted messages, the product is the encryption of the sum m1 + m2 of the two plaintext messages:
        <newline/>
        Dec( Enc(m1) * Enc(m2) ) = m1 + m2
      </item>
      <item>
        If you raise an encrypted message to the m2-th power, the result is the encryption of the product m1 * m2 of the two plaintext messages.
        <newline/>
        Dec( Enc(m1) ^ m2 ) = m1 * m2
      </item>
    </list>
    This means that, even without knowing the private key, one can carry out the mathematical operations addition and multiplication with a constant on encrypted numbers, 
    without knowing their values and without learning anything about the results.
  </usage>

  <usage lang="de-DE">
    Wählen Sie in den Einstellungen der Komponente, ob sie verschlüsseln oder entschlüsseln soll.
    <newline/>
    <newline/>
    Für die Verschlüsselung benötigt die Komponente den öffentlichen Schlüssel, der aus dem 4-Tupel (N,G,H,U) besteht. Dieser kann durch den DGK-Schlüsselgenerator erzeugt werden.
    <newline/>
    <newline/>
    Für die Entschlüsselung wird zusätzlich der private Schlüssel (VP,VQ,P) benötigt, der ebenfalls vom DGK-Schlüsselgenerator zur Verfügung gestellt wird.
    <newline/>
    <newline/>
    Die zu verschlüsselnde oder entschlüsselnde Nachricht muss am Eingang mit der Bezeichnung "Eingabe M" angegeben werden.
    Als Eingabe werden BigInteger-Zahlen und Byte-Arrays akzeptiert. Abhängig vom eingegebenen Datentyp wird das Resultat am BigInteger-Ausgang oder am Byte-Array-Ausgang ausgegeben.
  </usage>
  
  <presentation lang="en">
    Select in the settings of the component whether you want to encrypt or decrypt data.
    <newline/>
    <newline/>
    For encryption, the component needs the public key, that consists of the tuple (N,G,H,U). The public key can be provided by the DGK Key Generator component.
    <newline/>
    <newline/>
    For decryption, the component additionally needs the private key (VP,VQ,P), that is also provided by the DGK Key Generator.
    <newline/>
    <newline/>
    The data that is to be encrypted or decrypted must be entered at the input labeled "Input message M".
    The component accepts BigInteger numbers and byte arrays as input. Depending on the given data type, the result will be sent to the BigInteger output or the byte array output.
  </presentation>
  
  <presentation lang="de-DE">
  </presentation>
  
  <references>
    <linkReference id="dgk">
      <link url="http://alexandria.tue.nl/extra1/afstversl/wsk-i/makkes2010.pdf" lang="en" />
      <caption lang="en">Makkes, M.: Efficient Implementation of Homomorphic Cryptosystems (PDF)</caption>
      <link url="http://alexandria.tue.nl/extra1/afstversl/wsk-i/makkes2010.pdf" lang="de-DE" />
      <caption lang="en">Makkes, M.: Efficient Implementation of Homomorphic Cryptosystems (PDF, englisch)</caption>
    </linkReference>    
    <linkReference id="springer">
      <link url="http://alexandria.tue.nl/extra1/afstversl/wsk-i/makkes2010.pdf" lang="en" />
      <caption lang="en">Damgård, Geisler, Krøigaard: Efficient and Secure Comparison for On-Line Auctions</caption>
      <link url="http://alexandria.tue.nl/extra1/afstversl/wsk-i/makkes2010.pdf" lang="de-DE" />
      <caption lang="en">Damgård, Geisler, Krøigaard: Efficient and Secure Comparison for On-Line Auctions (englisch)</caption>
    </linkReference>
    <linkReference id="wikipedia">
      <link url="http://en.wikipedia.org/wiki/Homomorphic_encryption" lang="en" />
      <caption lang="en">Homomorphic encryption (Wikipedia)</caption>
      <link url="http://en.wikipedia.org/wiki/Homomorphic_encryption" lang="de-DE" />
      <caption lang="en">Homomorphic encryption (Wikipedia, englisch)</caption>
    </linkReference>
  </references>
  
</documentation>
