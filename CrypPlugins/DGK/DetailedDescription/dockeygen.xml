<?xml version="1.0" encoding="utf-8" ?>

<documentation>
  <language culture="en"/>
  <language culture="de-DE"/>

  <introduction lang="en">
  </introduction>

  <introduction lang="de-DE">
    Das DGK-Kryptosystem ist ein homomorphes Verschlüsselungsverfahren, das 2007 von I. Damgård, M. Geisler und H. Krøigaard vorgestellt wurde.
    <newline/>
    <newline/>
    Das Kryptosystem hat die folgenden homomorphen Eigenschaften:
    <list>
      <item>
        Werden zwei verschlüsselte Nachrichten miteinander multipliziert, so ist das Produkt die Verschlüsselung der Summe m1 + m2 der beiden Klartextnachrichten:
        <newline/>
        Dec( Enc(m1) * Enc(m2) ) = m1 + m2
      </item>
      <item>
        Wird eine verschlüsselte Nachricht zur m2-ten Potenz erhoben, so ist das Resultat die Verschlüsselung des Produktes m1 * m2 der beiden Klartextnachrichten.
        <newline/>
        Dec( Enc(m1) ^ m2 ) = m1 * m2
      </item>
    </list>
    Dies bedeutet, dass man ohne Kenntnis des privaten Schlüssels auf den verschlüsselten Daten die mathematischen Operationen Addition und Multiplikation mit einer Konstanten
    durchführen kann, ohne die Argumente zu kennen und die Ergebnisse zu erfahren.
    <newline/>
    <newline/>
    Diese Komponente generiert den öffentlichen und den privaten Schlüssel für das DGK-Verschlüsselungsverfahren.
  </introduction>

  <usage lang="en">
    The DGK cryptosystem is a homomorphic cryptosystem, that was presented by I. Damgård, M. Geisler and M. Krøigaard in 2007.
    <newline/>
    <newline/>
    The cryptosystem has the following homomorphic properties:
    <list>
      <item>
        If you multiply two encrypted messages, the product is the encryption of the sum m1 + m2 of the two plaintext messages:
        <newline/>
        Dec( Enc(m1) * Enc(m2) ) = m1 + m2
      </item>
      <item>
        If you raise an encrypted message to the m2-th power, the result is the encryption of the product m1 * m2 of the two plaintext messages.
        <newline/>
        Dec( Enc(m1) ^ m2 ) = m1 * m2
      </item>
    </list>
    This means that, even without knowing the private key, one can carry out the mathematical operations addition and multiplication with a constant on encrypted numbers,
    without knowing their values and without learning anything about the results.
    <newline/>
    <newline/>
    This component generates the public and the private key for the DGK encryption.
  </usage>

  <usage lang="de-DE">
    Der Schlüsselgenerator benötigt drei Angaben in den Einstellungen, um den Schlüssel zu erzeugen.
    <newline/>
    <newline/>
    Geben Sie die Bitlänge k des zu erzeugenden Modulus N an, der Teil des öffentlichen Schlüssels ist. Weiterhin wird die Bitlänge l des Eingabe-Alphabets und die Angabe des Sicherheitsparameters t benötigt.
    Für k, t und l gelten folgende Einschränkungen:
    <list>
      <item>
        8 &lt;= l &lt;= 16
      </item>
      <item>
        t muss größer als l sein.
      </item>
      <item>
        k muss gerade und größer als t sein.
      </item>
      <item>
        k/2 &gt;= l+t+10
      </item>
    </list>
    Die Komponente prüft die angegebenen Einschränkungen und gibt eine Fehlermeldung aus, falls sie nicht erfüllt sind.
    <newline/>
    <newline/>
    Wenn die Komponente ausgeführt wird, so gibt sie an den Ausgägnen den privaten Schlüssel bestehend aus den Ausgaben VP, VQ und P aus,
    und den öffentlichen Schlüssel bestehend aus den Ausgaben N, G, H und U.
  </usage>
  
  <presentation lang="en">
    The key generator depends on three parameters, that you can adjust in the settings.
    <newline/>
    <newline/>
    Enter the bit length k of the modulus N, that is part of the public key, the bit length l of the input alphabet, and the security parameter t.
    k, l and t are subject to the following constraints:
    <list>
      <item>
        8 &lt;= l &lt;= 16
      </item>
      <item>
        t must be greater than l.
      </item>
      <item>
        k must be even and greater than t.
      </item>
      <item>
        k/2 &gt;= l+t+10
      </item>
    </list>
    The component checks whether the given constraints are met and issues an error message otherwise.
    <newline/>
    <newline/>
    When the component is started, it provides the private key consisting of the outputs VP, VQ and P,
    and the public key consisting of the outputs N, G, H and U.
  </presentation>
  
  <presentation lang="de-DE">
  </presentation>
  
  <references>
    <linkReference id="dgk">
      <link url="http://alexandria.tue.nl/extra1/afstversl/wsk-i/makkes2010.pdf" lang="en" />
      <caption lang="en">Makkes, M.: Efficient Implementation of Homomorphic Cryptosystems (PDF)</caption>
      <link url="http://alexandria.tue.nl/extra1/afstversl/wsk-i/makkes2010.pdf" lang="de-DE" />
      <caption lang="en">Makkes, M.: Efficient Implementation of Homomorphic Cryptosystems (PDF, englisch)</caption>
    </linkReference>    
    <linkReference id="springer">
      <link url="http://alexandria.tue.nl/extra1/afstversl/wsk-i/makkes2010.pdf" lang="en" />
      <caption lang="en">Damgård, Geisler, Krøigaard: Efficient and Secure Comparison for On-Line Auctions</caption>
      <link url="http://alexandria.tue.nl/extra1/afstversl/wsk-i/makkes2010.pdf" lang="de-DE" />
      <caption lang="en">Damgård, Geisler, Krøigaard: Efficient and Secure Comparison for On-Line Auctions (englisch)</caption>
    </linkReference>
    <linkReference id="wikipedia">
      <link url="http://en.wikipedia.org/wiki/Homomorphic_encryption" lang="en" />
      <caption lang="en">Homomorphic encryption (Wikipedia)</caption>
      <link url="http://en.wikipedia.org/wiki/Homomorphic_encryption" lang="de-DE" />
      <caption lang="en">Homomorphic encryption (Wikipedia, englisch)</caption>
    </linkReference>
  </references>
  
</documentation>
