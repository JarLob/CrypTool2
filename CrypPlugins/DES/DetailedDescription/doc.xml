<?xml version="1.0" encoding="utf-8" ?>

<documentation>
  <language culture="en"/>
  <language culture="de-DE"/>

  <introduction lang="en">
    Data Encryption Standard (DES) is a symmetric cryptosystem that was announced by the US government in 1976 as official standard (FIPS 46) <ref id="NIST"/>.
    <newline />
    <newline />
    DES operates on plaintext blocks of length 64 bits (= 8 bytes) and generates blocks with encrypted text of length 64 bits.
    Once again, formally the key is 64 bits long, but in fact only 56 bits are actually used as 8 bits serve as parity bits. So cryptographers say, that the (effective) key length is 56 bits.
    However, it is possible today to crack a message encrypted with DES in less than 25 hours (Source: <ref id="DESCracker"/>), albeit with considerable effort, by searching through the entire key space.
    Today, due to the short key length, the security of DES is no longer considered sufficient.
    The involvement of the NSA in the design of the algorithm also nourished suspicions about a backdoor.
    <newline/>
    <newline/>
    A sequence of three DES encryptions using two or three different DES keys is called Triple DES (two or three key Triple DES). By this trick, the effective key length is 112 resp. 168 bit.
    Today, Triple DES is wide-spread for symmetric encryption. Due to its worse performance Triple DES is replaced by the modern <docRef item="Cryptool.Plugins.Cryptography.Encryption.AES">AES</docRef> algorithm.
    <newline/>
    <newline/>

    <section headline="A remark about the parity bits:">
      With encryption using the DES algorithm, the lowest order bit in each key byte is not used for encryption or decryption as it is used as a parity bit.
      As a result it is possible to to find a key via brute-force analysis that is not identical to the key which was used to encrypt the document.
      However, the two keys are equivalent if the only difference between them is the lowest order bit of each byte. Hence, bytes 00 and 01, 02 and 03,..., 0C and 0D, 0E and 0F are all equivalent to each other.
      The same applies also if instead of the leading 0 there is a different hexadecimal character 1, 2, 3,..., 9, A, B,..., F (see below).
      <newline/>
      <newline/>
      <b>Example:</b> The two following DES keys
      <newline/>
      <newline/>
      00 22 44 66 88 AA CC EE (hex) =
      <newline/>
      <newline/>
      00000000 00100010 01000100 01100110 10001000 10101010 11001100 11101110 (binary) and
      <newline/>
      <newline/>
      01 23 45 67 89 AB CD EF (hex) =
      <newline/>
      <newline/>
      00000001 00100011 01000101 01100111 10001001 10101011 11001101 11101111 (binary)
      <newline/>
      <newline/>
      are equivalent.
    </section>
  </introduction>
  
  <introduction lang="de-DE">
    Der Data Encryption Standard (DES) ist ein symmetrisches Verschlüsselungsverfahren, das von der US-Regierung 1976 als offizieller Standard (FIPS 46) <ref id="NIST"/> bekanntgegeben wurde.
    <newline />
    <newline />
    DES operiert auf Klartextblöcken der Länge 64 Bits (= 8 Bytes) und erzeugt Blöcke mit verschlüsseltem Text der Länge 64 Bits.
    Die formale Länge des Schlüssels beträgt ebenfalls 64 Bits; effektiv jedoch werden nur 56 Bits benutzt, da 8 Bits als Paritätsbits verwendet werden. Deshalb spricht man von einer (effektiven) Schlüssellänge von 56 Bit.
    Allerdings kann man heutzutage mittels einer vollständigen Schlüsselraumsuche mit einigem Aufwand eine mit DES verschlüsselte Nachricht in weniger als 25 Stunden knacken (Quelle: <ref id="DESCracker"/>).
    Heute wird DES schon aufgrund der kurzen Schlüssellänge von nur 56 Bits nicht mehr als ausreichend sicher erachtet.
    Auch wegen der Beteiligung der NSA am Design des Algorithmus gab es immer wieder Spekulationen über seine Sicherheit.
    <newline/>
    <newline/>
    Durch das Hintereinanderausführen von drei DES-Verschlüsselungen unter Verwendung von zwei oder drei verschiedenen 56 Bit DES-Schlüsseln erhält man das sogenannte Triple-DES-Verfahren (zwei oder drei Schlüssel Triple-DES).
    Durch diesen Trick erhält man eine effektive Schlüssellänge von 112 oder 168 Bit. Triple-DES ist heute weit verbreitet für die symmetrische Verschlüsselung.
    Aufgrund seiner schlechten Performance wird Triple-DES durch das modernere <docRef item="Cryptool.Plugins.Cryptography.Encryption.AES">AES</docRef>-Verfahren ersetzt.
    <newline/>
    <newline/>

    <section headline="Bemerkung zu den Paritätsbits:">
      Beim Verschlüsseln mit dem DES-Verschlüsselungsverfahren wird für die Ver-/Entschlüsselung von jedem Schlüssel-Byte das niederwertigste Bit nicht verwendet, da es als Paritätsbit genutzt wird.
      Dadurch kann es bei der Brute-Force-Analyse passieren, dass ein Schlüssel gefunden wird, der nicht mit dem Schlüssel, mit dem das Dokument verschlüsselt ist, identisch ist.
      Dennoch sind die beiden Schlüssel äquivalent, falls sie sich immer nur im niederwertigsten Bit jedes Bytes unterscheiden. Also sind die Bytes 00 und 01, 02 und 03, ..., 0C und 0D, 0E und 0F jeweils zueinander äquivalent.
      Dasselbe gilt auch, wenn statt der führenden 0 ein anderes hexadezimales Zeichen 1, 2, 3, ..., 9, A, B, ..., F vorhanden ist.
      <newline/>
      <newline/>
      <b>Beispiel:</b> Die beiden folgenden DES-Schlüssel
      <newline/>
      <newline/>
      00 22 44 66 88 AA CC EE (hex) =
      <newline/>
      <newline/>
      00000000 00100010 01000100 01100110 10001000 10101010 11001100 11101110 (binär) und
      <newline/>
      <newline/>
      01 23 45 67 89 AB CD EF (hex) =
      <newline/>
      <newline/>
      00000001 00100011 01000101 01100111 10001001 10101011 11001101 11101111 (binär)
      <newline/>
      <newline/>
      sind äquivalent.
    </section>
  </introduction>

  <usage lang="en">
    In the settings of the component, you can select whether the component should be operated in DES mode or in Triple DES mode. Both algorithms work with a block size of 64 bits (8 bytes).
    DES expects a key consisting of 64 bits (8 bytes), Triple DES expects a key consisting of 128 bits (16 bytes) or 192 bits (24 bytes).
    <newline/>
    <newline/>
    The DES component has the two operation modes "Encryption" and "Decryption". You can switch between the modes in the settings of the component.
    <newline />
    <newline />

    <section headline="Encryption">
      In "Encryption" mode, the component expects the plaintext as a data stream on the input labeled "Input".
      If the size of the input is not a multiple of the block size, as many bytes as are necessary to achieve
      a multiple of the block size are padded. You can choose between several padding methods in the settings of the component.
      When decrypting a ciphertext, it is important to select the same padding method as was used for encryption.
      Otherwise the last block will be deciphered wrongly or not at all.
      The key is expected as a byte array on the input labeled "Key".
      If the selected key size does not correspond to the size of the entered key, an error message will be issued and the execution stops.
      The encrypted data block is sent to the output of the component as a data stream.
      <newline />
      <newline />
    </section>

    <section headline="Decryption">
      In "Decryption" mode, the component expects the ciphertext that is to be decrypted on the input labeled "Input".
      The size of the input must be a multiple of the block size. Otherwise, the component stops with an error message.
      The key is entered in the same way as in "Encryption" mode.
      Finally, the plaintext will be sent to the output of the component as a data stream.
      <newline />
      <newline />
    </section>

    <section headline="Cryptographic Mode">
      Block ciphers divide their input data into blocks of a fixed size and apply the encryption or decryption function on the blocks of the input.
      The chaining mode determines the way in which consecutive blocks, after being encrypted or decryted, are combined in order to achieve better security or error tolerance.
      The DES component offers the following block chaining modes: ECB (Electronic Code Book), CBC (Cipher Block Chaining), CFB (Cipher Feedback) and OFB (Output Feedback).
      Select the appropriate chaining mode in the settings of the component.
      <newline />
      In ECB mode, each block is encrypted separately. In the other modes however, a plaintext block is combined with the previous ciphertext block.
      As there is no previous block for the first block, we must provide one for these modes. This extra block is given by the initialization vector (IV), which must be provided as a byte array
      on the input of the component. Thus the size of the IV must correspond to the block size. If the provided IV is too short, it is filled with null bytes. If it is too long, it is truncated.
      If no IV is given, the component will assume an IV consisting of null bytes.
    </section>
  </usage>

  <usage lang="de-DE">
    Wählen Sie in den Einstellungen der DES-Komponente, ob die Komponente im DES-Modus oder im Triple-DES-Modus betrieben werden soll. Beide Algorithmen arbeiten mit einer Blockgröße von 64 Bits (8 Bytes).
    DES erwartet einen Schlüssel bestehend aus 64 Bits (8 Bytes), Triple-DES einen Schlüssel bestehend aus 128 Bits (16 Bytes) oder 192 Bits (24 Bytes).
    <newline/>
    <newline/>
    Die Komponente hat die zwei Betriebsarten "Verschlüsselung" und "Entschlüsselung", zwischen denen in den Einstellungen der Komponente umgeschaltet werden kann.
    <newline />
    <newline />
    <section headline="Verschlüsselung">
      In der Betriebsart "Verschlüsselung" erwartet die Komponente als Eingabe den zu verschlüsselnden Klartext als Datenstrom am Eingang "Eingabe".
      Ist die Länge der Eingabe kein Vielfaches der Blockgröße, so müssen vor der Verschlüsselung so viele Bytes angehängt werden, bis sie ohne Rest in Blöcke der Blockgröße zerlegt werden kann.
      Diesen Vorgang nennt man 'Padding'. In den Einstellungen kann man zwischen verschiedenen Padding-Methoden wählen.
      Es ist wichtig, dass bei der Entschlüsselung eines Chiffretextes in den Einstellungen dieselbe Padding-Methode eingestellt wird, die bei der Verschlüsselung verwendet wurde,
      da der letzte Block sonst falsch oder gar nicht entschlüsselt wird.
      Der Schlüssel wird als Byte-Array am Eingang "Schlüssel" erwartet.
      Stimmt die Größe des eingegebenen Schlüssels nicht mit der erwarteten Schlüsselgröße überein, so wird eine Fehlermeldung ausgegeben und die Ausführung wird beendet.
      Der verschlüsselte Datenblock wird am Ausgang der Komponente als Datenstrom zur Verfügung gestellt.
      <newline />
      <newline />
    </section>
    <section headline="Entschlüsselung">
      In der Betriebsart "Entschlüsselung" erwartet die Komponente den zu entschlüsselnden Geheimtext als Datenstrom am Eingang "Eingabe".
      Die Länge der Eingabe muss hierbei ein Vielfaches der Blockgröße sein, andernfalls wird die Berechnung mit einer Fehlermeldung abgebrochen.
      Der Schlüssel wird wie bei der Entschlüsselung eingegeben. Der entschlüsselte Klartext wird dann schließlich am Ausgang der Komponente als Datenstrom bereitgestellt.
      <newline />
      <newline />
    </section>
    <section headline="Kryptographischer Modus">
      Blockverschlüsselungsverfahren unterteilen die Eingabedaten in Blöcke festgelegter Größen und
      wenden die Ver-/Entschlüsselungsfunktion dann fortlaufend auf diese Blöcke an. Der "kryptographische Modus", in dem
      eine Blockchiffre betrieben wird, gibt an, wie die Ergebnisse der Ver- bzw. Entschlüsselung aufeinanderfolgender Blöcke
      miteinander kombiniert werden, um z.B. größere Sicherheit oder Fehlertoleranz zu erzielen. Die DES-Komponente bietet
      die kryptographischen Modi ECB (Electronic Code Book), CBC (Cipher Block Chaining), CFB (Cipher Feedback) und OFB (Output Feedback)
      an, die in den Einstellungen ausgewählt werden können.
      <newline />
      Beim ECB-Modus wird dabei jeder Block separat verschlüsselt. Bei den anderen Modi hingegen
      wird die Verschlüsselung eines Klartextblocks zusätzlich mit dem vorangehenden Geheimtextblock verknüpft. Da für den ersten
      Klartextblock kein vorangehender Geheimtextblock existiert, wird dieser mit einem Initialisierungsvektor verknüpft.
      Dieser muss die verwendete Blockgröße haben und wird am zugehörigen Eingang der Komponente
      als Byte-Array eingegeben. Ein zu kurzer Initialisierungsvektor wird mit Nullbytes aufgefüllt, ein zu langer auf die Blockgröße
      beschnitten. Wird der Eingang nicht verbunden, so wird ein Initialisierungsvektor bestehend aus Nullbytes verwendet.
    </section>
  </usage>

  <presentation lang="en">
  </presentation>
  
  <presentation lang="de-DE">
  </presentation>

  <references>
    <linkReference id="wikipedia">
      <link url="http://en.wikipedia.org/wiki/Data_Encryption_Standard" lang="en" />
      <caption lang="en">Data Encryption Standard (Wikipedia)</caption>
      <link url="http://de.wikipedia.org/wiki/Data_Encryption_Standard" lang="de-DE" />
      <caption lang="de-DE">Data Encryption Standard (Wikipedia)</caption>
    </linkReference>
    <linkReference id="NIST">
      <link url="http://csrc.nist.gov/publications/fips/fips46-3/fips46-3.pdf" lang="en" />
      <caption lang="en">DES Specification by NIST (PDF)</caption>
      <link url="http://csrc.nist.gov/publications/fips/fips46-3/fips46-3.pdf" lang="de-DE" />
      <caption lang="de-DE">DES-Spezifikation des NIST (englisch, PDF)</caption>
    </linkReference>
    <linkReference id="DESCracker">
      <link url="https://w2.eff.org/Privacy/Crypto/Crypto_misc/DESCracker" lang="en" />
      <caption lang="en">DES Cracker by Electronic Frontier Foundation</caption>
      <link url="https://w2.eff.org/Privacy/Crypto/Crypto_misc/DESCracker" lang="de-DE" />
      <caption lang="de-DE">DES Cracker von der Electronic Frontier Foundation (englisch)</caption>
    </linkReference>
  </references>
  
</documentation>
