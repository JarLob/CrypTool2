<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ActionCaption" xml:space="preserve">
    <value>Action</value>
  </data>
  <data name="ActionTooltip" xml:space="preserve">
    <value>Select the Algorithm action</value>
  </data>
  <data name="AlphabetCaseCaption" xml:space="preserve">
    <value>Alphabet case</value>
  </data>
  <data name="AlphabetCaseTooltip" xml:space="preserve">
    <value>Transform the alphabet and input data to upper or lower case</value>
  </data>
  <data name="CleanTranspositionPassCaption" xml:space="preserve">
    <value>Clean transposition password</value>
  </data>
  <data name="CleanTranspositionPassTooltip" xml:space="preserve">
    <value>Transposition password, with removed non alphabet character und duplicates</value>
  </data>
  <data name="InputAlphabetCaption" xml:space="preserve">
    <value>External alphabet input</value>
  </data>
  <data name="InputAlphabetTooltip" xml:space="preserve">
    <value>Input a string containing the alphabet which should be used by ADFGVX.\nIf no alphabet is provided on this input, the internal alphabet (a-z,0-9) will be used.</value>
  </data>
  <data name="InputStringCaption" xml:space="preserve">
    <value>Text input</value>
  </data>
  <data name="InputStringTooltip" xml:space="preserve">
    <value>Input a string to be processed by the ADFGVX cipher</value>
  </data>
  <data name="OutputDataCaption" xml:space="preserve">
    <value>Stream output</value>
  </data>
  <data name="OutputDataTooltip" xml:space="preserve">
    <value>The string after processing with the ADFGVX cipher is converted to a stream. Default encoding is used.</value>
  </data>
  <data name="OutputStringCaption" xml:space="preserve">
    <value>Text output</value>
  </data>
  <data name="OutputStringTooltip" xml:space="preserve">
    <value>The string after processing with the ADFGVX cipher</value>
  </data>
  <data name="PluginCaption" xml:space="preserve">
    <value>ADFGVX</value>
  </data>
  <data name="PluginDescriptionURL" xml:space="preserve">
    <value>ADFGVX/DetailedDescription/Description.xaml</value>
  </data>
  <data name="PluginTooltip" xml:space="preserve">
    <value>ADFGVX -- cipher used in WW1, combining substitution and transposition</value>
  </data>
  <data name="RandomMatrixCaption" xml:space="preserve">
    <value>Random Matrix</value>
  </data>
  <data name="RandomMatrixTooltip" xml:space="preserve">
    <value>Create random matrix</value>
  </data>
  <data name="StandardMatrixCaption" xml:space="preserve">
    <value>Standard Matrix</value>
  </data>
  <data name="StandardMatrixTooltip" xml:space="preserve">
    <value>Create default matrix</value>
  </data>
  <data name="SubstitutionMatrixCaption" xml:space="preserve">
    <value>Substitution matrix</value>
  </data>
  <data name="SubstitutionMatrixTooltip" xml:space="preserve">
    <value>The matrixed used for encryption/decryption</value>
  </data>
  <data name="SubstitutionPassCaption" xml:space="preserve">
    <value>Substitution password</value>
  </data>
  <data name="SubstitutionPassTooltip" xml:space="preserve">
    <value>Enter the string of the substitution matrix</value>
  </data>
  <data name="TranspositionPassCaption" xml:space="preserve">
    <value>Transpositon password</value>
  </data>
  <data name="TranspositionPassTooltip" xml:space="preserve">
    <value>Transposition password can contain any string of characters. Redundant or invalid characters will be removed before de- or encryption.</value>
  </data>
  <data name="TranspositionPasswordCaption" xml:space="preserve">
    <value>Transposition password</value>
  </data>
  <data name="TranspositionPasswordTooltip" xml:space="preserve">
    <value>Same setting as Transposition password in Settings-Pane but as dynamic input.</value>
  </data>
  <data name="UnknownSymbolHandlingCaption" xml:space="preserve">
    <value>Unknown symbol handling</value>
  </data>
  <data name="UnknownSymbolHandlingTooltip" xml:space="preserve">
    <value>What should be done with encountered characters at the input which are not in the alphabet?</value>
  </data>
</root>