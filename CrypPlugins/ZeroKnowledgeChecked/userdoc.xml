<?xml version="1.0" encoding="utf-8"?>
<!-- You can edit this file manually or with the Util/CrypDocumentationEditor -->
<documentation>
  <language culture="en" />
  <language culture="zh-CN" />
  <language culture="ru" />
  <language culture="de-DE" />
  <introduction lang="en">
    In cryptography, a zero-knowledge proof or zero-knowledge protocol is a method by which one party (the prover) can prove to another party (the verifier) that he knows a secret,
    without conveying any information about the secret apart from the fact that he knows it.
    <newline /><newline />
    The implementation of the zero-knowledge protocol in CrypTool assumes, that the prover can prove that he knows the secret by influencing an experiment in such a way, that its result is a value that was requested by the verifier.
    The result of the experiment is a number in a given interval.
    <newline /><newline />
    The verifier determines the number of possible results of the experiment. He chooses a random result and challenges the prover to reproduce this result of the experiment.
    If the prover knows the secret, he can reproduce it every time. If he doesn't know it, the result of the experiment will be random.
    If it is different from the requested value, the verifier knows immediately that the prover doesn't know the secret.
    But if the result happens to be correct, the verifier can draw no conclusion.
    By repeating this process several times, the probability that the prover can convince the verifier without knowing the secret gets smaller and smaller.
    <newline /><newline />
    This component implements the actions of the prover. After hearing the requested result, he executes the experiment and sends the result to the prover.
    Depending on whether or not he knows the secret, the result of the experiment will either be always the requested value or a random value.
  </introduction>
  <introduction lang="zh-CN">在密码学中，零知识证明或零知识协议是一种方法，通过该方法，一方（证明方）可以向另一方（验证方）证明他知道秘密，而无需传递与秘密有关的任何信息。他知道这一点。 CrypTool中零知识协议的实现假定，证明者可以通过影响实验来证明自己知道秘密，其结果是验证者要求的值。实验的结果是给定间隔中的数字。验证者确定实验的可能结果数量。他选择一个随机结果，并挑战证明者重现该实验结果。如果证明者知道秘密，则他可以每次都复制它。如果他不知道，实验结果将是随机的。如果与要求的值不同，则验证者立即知道证明者不知道秘密。但是，如果结果恰好是正确的，则验证者无法得出任何结论。通过多次重复此过程，证明者可以在不知道秘密的情况下说服验证者的可能性越来越小。该组件实现证明者的动作。听到请求的结果后，他执行实验并将结果发送给证明者。根据他是否知道秘密，实验的结果将始终是请求的值或随机值。</introduction>
  <introduction lang="ru">В криптографии протокол доказательства нулевого знания или нулевой информации - это метод, с помощью которого одна сторона (проверщик) может доказать другой стороне (верификатору), что он знает секрет, не передавая никакой информации о тайне, кроме факта что он это знает. Внедрение протокола zero-knowledge в CrypTool предполагает, что проверщик может доказать, что он знает секрет, воздействуя таким образом на эксперимент таким образом, что его результат является значением, которое запрашивал верификатор. Результатом эксперимента является число в данном интервале. Верификатор определяет количество возможных результатов эксперимента. Он выбирает случайный результат и бросает вызов тому, чтобы воспроизвести этот результат эксперимента. Если проникник знает секрет, он может воспроизводить его каждый раз. Если он этого не знает, результат эксперимента будет случайным. Если он отличается от запрашиваемого значения, верификатор сразу узнает, что средство проверки не знает секрет. Но если результат окажется правильным, верификатор не может сделать никакого вывода. Повторяя этот процесс несколько раз, вероятность того, что проверщик может убедить верификатора, не зная тайны, становится все меньше и меньше. Этот компонент реализует действия проверки. Выслушав запрошенный результат, он выполнит эксперимент и отправит результат на проверку. В зависимости от того, знает ли он секрет, результат эксперимента будет всегда запрошенным значением или случайным значением.</introduction>
  <introduction lang="de-DE">
    Ein Zero-Knowledge-Beweis (auch kenntnisfreier Beweis) oder Zero-Knowledge-Protokoll (auch kenntnisfreies Protokoll) ist ein Protokoll aus dem Bereich der Kryptographie.
    Bei einem Zero-Knowledge-Protokoll kommunizieren zwei Parteien (der Beweiser und der Verifizierer) miteinander.
    Der Beweiser überzeugt dabei den Verifizierer mit einer gewissen Wahrscheinlichkeit davon, dass er ein Geheimnis kennt, ohne dabei Informationen über das Geheimnis selbst bekannt zu geben.
    <newline /><newline />
    Die Implementierung des Zero-Knowledge-Protokolls in CrypTool geht davon aus, dass der Beweiser die Kenntnis des Geheimnisses dadurch belegen kann, dass er ein Experiment so beeinflusst,
    dass ein vom Verifizierer verlangter Wert dabei herauskommt.
    Das Ergebnis des Experimentes ist eine Zahl aus einem vorgegebenen Intervall.
    <newline /><newline />
    Der Verifizierer bestimmt die Anzahl der möglichen Ergebnisse des Experimentes. Er wählt ein beliebiges Ergebnis aus und fordert den Beweiser auf, dieses durch das Experiment zu reproduzieren.
    Kennt der Beweiser das Geheimnis, so kann er das Experiment stets so ausführen, dass das geforderte Ergebnis zustande kommt. Kennt er es nicht, so ist das Ergebnis des Experiments zufällig.
    Wenn das Ergebnis nicht übereinstimmt, so weiss der Verifizierer sicher, dass der Beweiser das Geheimnis nicht kennt. Ist das Ergebnis aber durch Zufall richtig, so kann der Verifizierer keine Rückschlüsse ziehen.
    Durch mehrmalige Wiederholung wird die Wahrscheinlichkeit, dass der Beweiser bei Nichtkenntnis des Geheimnisses stets das richtige Ergebnis erzeugt, immer kleiner.
    <newline /><newline />
    Diese Komponente implementiert die Aktionen des Beweisers. Nachdem er vom Verifizierer den verlangten Wert mitgeteilt bekommt, führt er das Experiment durch und teilt das Ergebnis dem Verifizierer mit.
    Das Resultat hängt davon ab, ob er das Geheimnis kennt. Kennt er es, so wird immer das korrekte Resultat erzeugt, ansonsten ein zufälliger Wert.
  </introduction>
  <usage lang="en">
    In the settings of the component, you can decide whether or not the prover knows the secret.
    On the input "Amount of options" the verifier announces the number of possible results of the experiment.
    When the workspace is executed, the value that is requested by the verifier is available at the input.
    Then the prover executes the experiment and sends the result to the verifier via the output of the component.
  </usage>
  <usage lang="zh-CN">在组件的设置中，您可以决定证明者是否知道秘密。验证者在输入的“选项数量”中宣布实验的可能结果数量。当执行工作空间时，在输入处可以使用验证程序所请求的值。然后，证明者执行实验，并将结果通过组件的输出发送给验证者。</usage>
  <usage lang="ru">В настройках компонента вы можете решить, знает ли этот секрет секрет. На вкладке «Количество опций» верификатор объявляет количество возможных результатов эксперимента. Когда рабочая область выполняется, значение, запрашиваемое верификатором, доступно на входе. Затем проверка выполняет эксперимент и отправляет результат в верификатор через выход компонента.</usage>
  <usage lang="de-DE">
    Geben Sie in den Einstellungen der Komponente an, ob der Beweiser das Geheimnis kennt.
    Am Eingang "Anzahl der Optionen" gibt der Verifizierer die Anzahl der möglichen Ergebnisse des Experimentes bekannt.
    Wenn der Arbeitsbereich ausgeführt wird, wird der vom Verifizierer angeforderte Wert am Eingang "Eingabe" angegeben.
    Der Beweiser führt daraufhin das Experiment durch und gibt das Resultat am Ausgang an den Verifizierer weiter.
  </usage>
  <presentation lang="en"></presentation>
  <references>
    <linkReference>
      <link url="http://en.wikipedia.org/wiki/Zero-knowledge_proof" lang="en" />
      <caption lang="en">Zero-knowledge proof</caption>
      <link url="http://de.wikipedia.org/wiki/Zero-Knowledge-Beweis" lang="de-DE" />
      <caption lang="de-DE">Zero-Knowledge-Beweis</caption>
    </linkReference>
  </references>
</documentation>