<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AmountLabel" xml:space="preserve">
    <value>Empfangene Pakete:</value>
  </data>
  <data name="IPFromHeader" xml:space="preserve">
    <value>Absender-IP</value>
  </data>
  <data name="MetaLabel" xml:space="preserve">
    <value>Info</value>
  </data>
  <data name="PackageLimit" xml:space="preserve">
    <value>Paketlimit</value>
  </data>
  <data name="PackageLimitTooltip" xml:space="preserve">
    <value>Anzahl der Pakete, nach denen die Komponente anhalten soll. 0 bedeutet "halte nicht".</value>
  </data>
  <data name="PaylodHeader" xml:space="preserve">
    <value>Empfangene Daten</value>
  </data>
  <data name="PluginCaption" xml:space="preserve">
    <value>Netzwerk-Empfänger</value>
  </data>
  <data name="PluginTooltip" xml:space="preserve">
    <value>Die Komponente kann über ein Netzwerk gesendete Pakete empfangen.</value>
  </data>
  <data name="Port" xml:space="preserve">
    <value>Port</value>
  </data>
  <data name="PortTooltip" xml:space="preserve">
    <value>Port, auf welchem die Komponente horchen soll</value>
  </data>
  <data name="ReceivedPackagesLabel" xml:space="preserve">
    <value>Empfangene Pakete</value>
  </data>
  <data name="SingleOutput" xml:space="preserve">
    <value>Einzelnes Paket</value>
  </data>
  <data name="SingleOutputTooltip" xml:space="preserve">
    <value>Daten eines einzenen Paketes.</value>
  </data>
  <data name="StartLabel" xml:space="preserve">
    <value>Gestartet um:</value>
  </data>
  <data name="StopConditions" xml:space="preserve">
    <value>Haltebedingungen</value>
  </data>
  <data name="StreamOutput" xml:space="preserve">
    <value>Letztes Paket</value>
  </data>
  <data name="StreamOutputTooltip" xml:space="preserve">
    <value>Leitet das zuletzt empfangene Paket weiter.</value>
  </data>
  <data name="TimeLimit" xml:space="preserve">
    <value>Zeitlimit</value>
  </data>
  <data name="TimeLimitTooltip" xml:space="preserve">
    <value>Zeitspanne in Sekunden, nach der die Komponente anhalten soll. 0 bedeutet "halte nicht".</value>
  </data>
  <data name="TORHeader" xml:space="preserve">
    <value>Empfangen um</value>
  </data>
  <data name="UniqueIPLabel" xml:space="preserve">
    <value>Unterschiedliche Absender:</value>
  </data>
  <data name="DeviceIpCaption" xml:space="preserve">
    <value>Netzwerkkarten-IP:</value>
  </data>
  <data name="DeviceIpCaptionTooltip" xml:space="preserve">
    <value>Geben Sie die IP ihrer Netzwerkkarte an, um nur von dieser zu empfangen.</value>
  </data>
  <data name="LisPort" xml:space="preserve">
    <value>Port: </value>
  </data>
  <data name="NetworkConditions" xml:space="preserve">
    <value>Netzwerk</value>
  </data>
  <data name="NetworkDeviceCaption" xml:space="preserve">
    <value>Alle Netzwerkgeräte benutzen</value>
  </data>
  <data name="NetworkDeviceCaptionTooltip" xml:space="preserve">
    <value>Geben Sie die IP ihrer Netzwerkkarte an, um nur von dieser zu empfangen.</value>
  </data>
  <data name="ByteAsciiSwitchCaption" xml:space="preserve">
    <value>Bytes als ASCII anzeigen  </value>
  </data>
  <data name="ByteAsciiSwitchCaptionTooltip" xml:space="preserve">
    <value>Bytes als ASCII anzeigen</value>
  </data>
  <data name="PresentationSettings" xml:space="preserve">
    <value>Präsentation</value>
  </data>
  <data name="Size" xml:space="preserve">
    <value>Größe</value>
  </data>
  <data name="Protocol" xml:space="preserve">
    <value>Protokoll</value>
  </data>
  <data name="ProtocolTooltip" xml:space="preserve">
    <value>Ändert den Protokoll-Typ</value>
  </data>
  <data name="SpeedrateLabel" xml:space="preserve">
    <value>Empfangsrate: </value>
  </data>
  <data name="updateSpeedrateLable" xml:space="preserve">
    <value>Empfangsrate-Aktualisierungsintervall:</value>
  </data>
  <data name="updateSpeedrateTooltip" xml:space="preserve">
    <value>Bestimmt die Zeitspanne in Sekunden, in der die Empfangsrate neu berechnet wird.</value>
  </data>
  <data name="NumberOfClientsCaption" xml:space="preserve">
    <value>Client-Limit</value>
  </data>
  <data name="NumberOfClientsTooltip" xml:space="preserve">
    <value>Setzt die maximale Anzahl von Client-Verbindungen. 0 bedeutet "kein Limit"</value>
  </data>
  <data name="TCPServerConditions" xml:space="preserve">
    <value>TCP-Eigenschaften</value>
  </data>
  <data name="ConnectionIDInput" xml:space="preserve">
    <value>Verbindungseingang</value>
  </data>
  <data name="ConnectionIDInputTooltip" xml:space="preserve">
    <value>Gibt an, welche Verbindung der Empfänger überwachen soll.</value>
  </data>
  <data name="ConnectionIDOutput" xml:space="preserve">
    <value>Verbindungsausgang</value>
  </data>
  <data name="ConnectionIDOutputTooltip" xml:space="preserve">
    <value>Gibt die ID der aktuellen Verbindung an.</value>
  </data>
</root>