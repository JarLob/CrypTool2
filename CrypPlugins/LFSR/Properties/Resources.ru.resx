<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PluginCaption" xml:space="preserve">
    <value>ЛРСОС</value>
  </data>
  <data name="PluginTooltip" xml:space="preserve">
    <value>Линейный регистр сдвига обратной связи</value>
  </data>
  <data name="InputTapSequenceCaption" xml:space="preserve">
    <value>TapSequence</value>
  </data>
  <data name="InputTapSequenceTooltip" xml:space="preserve">
    <value>Строка, содержащая краны как последовательность c_i или как многочлен (например, 1011, который равен строке x ^ 4 + x ^ 2 + x + 1. Заметим, что последний 1, который равен x ^ 0 , неявно устанавливается в 1 внутри плагина).</value>
  </data>
  <data name="InputSeedCaption" xml:space="preserve">
    <value>семя</value>
  </data>
  <data name="InputSeedTooltip" xml:space="preserve">
    <value>Начальное двоичное значение всех состояний (например: 1001).</value>
  </data>
  <data name="InputClockBoolCaption" xml:space="preserve">
    <value>Часы</value>
  </data>
  <data name="InputClockBoolTooltip" xml:space="preserve">
    <value>Дополнительный внешний тактовый сигнал (через плагин CLK).</value>
  </data>
  <data name="OutputStringCaption" xml:space="preserve">
    <value>Строковый выход</value>
  </data>
  <data name="OutputStringTooltip" xml:space="preserve">
    <value>Строка, содержащая выходной поток с длиной раундов (например: 1001001, при условии, что было выполнено семь раундов).</value>
  </data>
  <data name="OutputBoolCaption" xml:space="preserve">
    <value>Логический вывод</value>
  </data>
  <data name="OutputBoolTooltip" xml:space="preserve">
    <value>Содержит текущий выходной бит как логическое значение.</value>
  </data>
  <data name="OutputClockingBitCaption" xml:space="preserve">
    <value>Дополнительный выходной бит</value>
  </data>
  <data name="OutputClockingBitTooltip" xml:space="preserve">
    <value>Выводит определенный этап LFSR как логическое значение.</value>
  </data>
  <data name="OutputBoolArrayCaption" xml:space="preserve">
    <value>Вывод этапов в булевом массиве</value>
  </data>
  <data name="OutputBoolArrayTooltip" xml:space="preserve">
    <value>Вывод всех этапов LFSR.</value>
  </data>
  <data name="AlwaysCreateOutputCaption" xml:space="preserve">
    <value>Всегда создавать вывод</value>
  </data>
  <data name="AlwaysCreateOutputTooltip" xml:space="preserve">
    <value>При включенном флажке будет генерироваться выходной сигнал, даже если для часов установлено значение false. Выходной бит будет бит от последнего такта.</value>
  </data>
  <data name="ClockingBitCaption" xml:space="preserve">
    <value>Дополнительный выходной бит #</value>
  </data>
  <data name="ClockingBitTooltip" xml:space="preserve">
    <value>Какой бит должен быть сгенерирован как дополнительный выход? Например, как бит синхронизации.</value>
  </data>
  <data name="NoQuickwatchCaption" xml:space="preserve">
    <value>Не показывать презентацию</value>
  </data>
  <data name="NoQuickwatchTooltip" xml:space="preserve">
    <value>Если этот флажок включен, презентация не будет показана, и производительность будет лучше.</value>
  </data>
  <data name="OutputStagesCaption" xml:space="preserve">
    <value>Этапы выхода</value>
  </data>
  <data name="OutputStagesTooltip" xml:space="preserve">
    <value>При включенном флажке будет выводиться текущее состояние.</value>
  </data>
  <data name="PeriodCaption" xml:space="preserve">
    <value>Период LFSR:</value>
  </data>
  <data name="PeriodTooltip" xml:space="preserve">
    <value>Указывает период, зависящий от полинома обратной связи и семян.</value>
  </data>
  <data name="PolynomialCaption" xml:space="preserve">
    <value>Полином обратной связи</value>
  </data>
  <data name="PolynomialTooltip" xml:space="preserve">
    <value>Определите полином обратной связи либо текстовым, либо цифровым способом. Например, x ^ 5 + x ^ 2 + 1, равное 10010.</value>
  </data>
  <data name="RoundsCaption" xml:space="preserve">
    <value>Туры</value>
  </data>
  <data name="RoundsTooltip" xml:space="preserve">
    <value>Сколько бит должно быть сгенерировано? Примечание. Это применимо только в том случае, если не используются внешние часы.</value>
  </data>
  <data name="SaveCurrentStateCaption" xml:space="preserve">
    <value>Сохранить состояние LFSR</value>
  </data>
  <data name="SaveCurrentStateTooltip" xml:space="preserve">
    <value>Сохраняет текущее состояние при остановке и перезапуске плагина или сохранении рабочего пространства.</value>
  </data>
  <data name="SeedCaption" xml:space="preserve">
    <value>семя</value>
  </data>
  <data name="SeedTooltip" xml:space="preserve">
    <value>Определите семя (начальное состояние) LFSR. Например, 11100.</value>
  </data>
  <data name="UseAdditionalOutputBitCaption" xml:space="preserve">
    <value>Создать add. выходной бит</value>
  </data>
  <data name="UseAdditionalOutputBitTooltip" xml:space="preserve">
    <value>При включенном флажке будет генерироваться дополнительный выходной бит.</value>
  </data>
  <data name="UseBoolClockCaption" xml:space="preserve">
    <value>Использовать внешние часы</value>
  </data>
  <data name="UseBoolClockTooltip" xml:space="preserve">
    <value>При включенном флажке будут использоваться внешние часы.</value>
  </data>
  <data name="UseBoolClockTPCaption" xml:space="preserve">
    <value>Использовать внешние часы</value>
  </data>
  <data name="UseBoolClockTPTooltip" xml:space="preserve">
    <value>При включенном флажке будут использоваться внешние часы (например, компонент CLK).</value>
  </data>
  <data name="initLFSRCaption" xml:space="preserve">
    <value>Нарисуйте LFSR</value>
  </data>
  <data name="initLFSRTooltip" xml:space="preserve">
    <value>Рисует представление LFSR, если полином подходит к семени.</value>
  </data>
  <data name="No_Quickwatch_data_right_now_" xml:space="preserve">
    <value>Данных сейчас нет.</value>
  </data>
  <data name="AlwaysCreateOutputList1" xml:space="preserve">
    <value>Всегда генерировать вывод?</value>
  </data>
  <data name="ClockGroup" xml:space="preserve">
    <value>Свойства часов</value>
  </data>
  <data name="ClockingBitGroup" xml:space="preserve">
    <value>Дополнительный выходной бит</value>
  </data>
  <data name="Feedback_polynomial" xml:space="preserve">
    <value>Полином обратной связи</value>
  </data>
  <data name="NoQuickwatchList1" xml:space="preserve">
    <value>Показать презентацию?</value>
  </data>
  <data name="Period_of_LFSR" xml:space="preserve">
    <value>Период LFSR</value>
  </data>
  <data name="SaveCurrentStateList1" xml:space="preserve">
    <value>Сохранить текущее состояние?</value>
  </data>
  <data name="UseAdditionalOutputBitList1" xml:space="preserve">
    <value>Создать дополнительный бит вывода?</value>
  </data>
  <data name="UseBoolClockList1" xml:space="preserve">
    <value>Использовать внешние часы?</value>
  </data>
</root>