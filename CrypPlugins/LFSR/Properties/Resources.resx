<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PluginCaption" xml:space="preserve">
    <value>LFSR</value>
  </data>
  <data name="PluginTooltip" xml:space="preserve">
    <value>Linear Feedback Shift Register</value>
  </data>
  <data name="PluginDescriptionURL" xml:space="preserve">
    <value>LFSR/DetailedDescription/Description.xaml</value>
  </data>
  <data name="InputTapSequenceCaption" xml:space="preserve">
    <value>TapSequence</value>
  </data>
  <data name="InputTapSequenceTooltip" xml:space="preserve">
    <value>TapSequence function in binary presentation.</value>
  </data>
  <data name="InputSeedCaption" xml:space="preserve">
    <value>Seed</value>
  </data>
  <data name="InputSeedTooltip" xml:space="preserve">
    <value>Seed of the LFSR in binary presentation.</value>
  </data>
  <data name="InputClockBoolCaption" xml:space="preserve">
    <value>Clock</value>
  </data>
  <data name="InputClockBoolTooltip" xml:space="preserve">
    <value>Optional clock input. LFSR only advances if clock is true.</value>
  </data>
  <data name="OutputStringCaption" xml:space="preserve">
    <value>String Output</value>
  </data>
  <data name="OutputStringTooltip" xml:space="preserve">
    <value>Produces the output bits as a string with length==rounds. Use this output without a clock input.</value>
  </data>
  <data name="OutputBoolCaption" xml:space="preserve">
    <value>Boolean Output</value>
  </data>
  <data name="OutputBoolTooltip" xml:space="preserve">
    <value>LFSR Boolean Output. Use this output together with a clock input.</value>
  </data>
  <data name="OutputClockingBitCaption" xml:space="preserve">
    <value>Additional Output Bit</value>
  </data>
  <data name="OutputClockingBitTooltip" xml:space="preserve">
    <value>Additional Output Bit.</value>
  </data>
  <data name="OutputBoolArrayCaption" xml:space="preserve">
    <value>Boolean Array Output of Stages</value>
  </data>
  <data name="OutputBoolArrayTooltip" xml:space="preserve">
    <value>LFSR Boolean Array Output of all Stages.</value>
  </data>
  <data name="AlwaysCreateOutputCaption" xml:space="preserve">
    <value>Always create output</value>
  </data>
  <data name="AlwaysCreateOutputTooltip" xml:space="preserve">
    <value>With this checkbox enabled, an output will be generated, even though the clock is set to false. The output bit will be the bit from the last clock cycle.</value>
  </data>
  <data name="ClockingBitCaption" xml:space="preserve">
    <value>Additional output bit #</value>
  </data>
  <data name="ClockingBitTooltip" xml:space="preserve">
    <value>Which bit shall be generated as an additional output? For example as an clocking bit.</value>
  </data>
  <data name="NoQuickwatchCaption" xml:space="preserve">
    <value>Do not display Quickwatch</value>
  </data>
  <data name="NoQuickwatchTooltip" xml:space="preserve">
    <value>With this checkbox enabled, no quickwatch will be generated for a better performance.</value>
  </data>
  <data name="OutputStagesCaption" xml:space="preserve">
    <value>Output stages</value>
  </data>
  <data name="OutputStagesTooltip" xml:space="preserve">
    <value>With this checkbox enabled, the current state will be output.</value>
  </data>
  <data name="PeriodCaption" xml:space="preserve">
    <value>Period</value>
  </data>
  <data name="PeriodTooltip" xml:space="preserve">
    <value>The computed period of the LFSR</value>
  </data>
  <data name="PolynomialCaption" xml:space="preserve">
    <value>Feedback polynomial</value>
  </data>
  <data name="PolynomialTooltip" xml:space="preserve">
    <value>Define the feedback polynomial either in a textual or a numeric way. For example x^5 + x^2 + 1 which is equal to 10010.</value>
  </data>
  <data name="RoundsCaption" xml:space="preserve">
    <value>Rounds</value>
  </data>
  <data name="RoundsTooltip" xml:space="preserve">
    <value>How many bits shall be generated? Note: This only applies if no external clock is used.</value>
  </data>
  <data name="SaveCurrentStateCaption" xml:space="preserve">
    <value>Save the state of the LFSR</value>
  </data>
  <data name="SaveCurrentStateTooltip" xml:space="preserve">
    <value>With this checkbox enabled, the current state will be restored after opening a .cte.</value>
  </data>
  <data name="SeedCaption" xml:space="preserve">
    <value>Seed</value>
  </data>
  <data name="SeedTooltip" xml:space="preserve">
    <value>Define the seed (initial state) of the LFSR. For example 11100</value>
  </data>
  <data name="UseAdditionalOutputBitCaption" xml:space="preserve">
    <value>Generate add. output bit</value>
  </data>
  <data name="UseAdditionalOutputBitTooltip" xml:space="preserve">
    <value>With this checkbox enabled, the additional output bit will be generated.</value>
  </data>
  <data name="UseBoolClockCaption" xml:space="preserve">
    <value>Use external clock</value>
  </data>
  <data name="UseBoolClockTooltip" xml:space="preserve">
    <value>With this checkbox enabled, an external clock will be used.</value>
  </data>
  <data name="UseBoolClockTPCaption" xml:space="preserve">
    <value>Use external clock</value>
  </data>
  <data name="UseBoolClockTPTooltip" xml:space="preserve">
    <value>With this checkbox enabled, an external clock will be used (f.e. the CLK-Plugin).</value>
  </data>
  <data name="initLFSRCaption" xml:space="preserve">
    <value>Draw LFSR</value>
  </data>
  <data name="initLFSRTooltip" xml:space="preserve">
    <value>Initializes LFSR and draws the presentation. This is used to view the LFSR before pressing play.</value>
  </data>
  <data name="No_Quickwatch_data_right_now_" xml:space="preserve">
    <value>No Quickwatch data right now.</value>
  </data>
  <data name="AlwaysCreateOutputList1" xml:space="preserve">
    <value>Always generate output?</value>
  </data>
  <data name="ClockGroup" xml:space="preserve">
    <value>Clock Properties</value>
  </data>
  <data name="ClockingBitGroup" xml:space="preserve">
    <value>Additional Output Bit</value>
  </data>
  <data name="Feedback_polynomial" xml:space="preserve">
    <value>Feedback polynomial</value>
  </data>
  <data name="NoQuickwatchList1" xml:space="preserve">
    <value>Display Quickwatch?</value>
  </data>
  <data name="Period_of_LFSR" xml:space="preserve">
    <value>Period of LFSR</value>
  </data>
  <data name="SaveCurrentStateList1" xml:space="preserve">
    <value>Save current state?</value>
  </data>
  <data name="UseAdditionalOutputBitList1" xml:space="preserve">
    <value>Generate additional output bit?</value>
  </data>
  <data name="UseBoolClockList1" xml:space="preserve">
    <value>Use external clock?</value>
  </data>
</root>