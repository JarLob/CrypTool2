//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.237
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LFSR.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("LFSR.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Always create output.
        /// </summary>
        internal static string AlwaysCreateOutputCaption {
            get {
                return ResourceManager.GetString("AlwaysCreateOutputCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Always generate output?.
        /// </summary>
        internal static string AlwaysCreateOutputList1 {
            get {
                return ResourceManager.GetString("AlwaysCreateOutputList1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to With this checkbox enabled, an output will be generated, even though the clock is set to false. The output bit will be the bit from the last clock cycle..
        /// </summary>
        internal static string AlwaysCreateOutputTooltip {
            get {
                return ResourceManager.GetString("AlwaysCreateOutputTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Clock Properties.
        /// </summary>
        internal static string ClockGroup {
            get {
                return ResourceManager.GetString("ClockGroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Additional output bit #.
        /// </summary>
        internal static string ClockingBitCaption {
            get {
                return ResourceManager.GetString("ClockingBitCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Additional Output Bit.
        /// </summary>
        internal static string ClockingBitGroup {
            get {
                return ResourceManager.GetString("ClockingBitGroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Which bit shall be generated as an additional output? For example as a clocking bit..
        /// </summary>
        internal static string ClockingBitTooltip {
            get {
                return ResourceManager.GetString("ClockingBitTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Feedback polynomial.
        /// </summary>
        internal static string Feedback_polynomial {
            get {
                return ResourceManager.GetString("Feedback_polynomial", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Draw LFSR.
        /// </summary>
        internal static string initLFSRCaption {
            get {
                return ResourceManager.GetString("initLFSRCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Draws the presentation of the LFSR, if the polynomial fits to the seed..
        /// </summary>
        internal static string initLFSRTooltip {
            get {
                return ResourceManager.GetString("initLFSRTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Clock.
        /// </summary>
        internal static string InputClockBoolCaption {
            get {
                return ResourceManager.GetString("InputClockBoolCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Optional external clock signal (through CLK plugin)..
        /// </summary>
        internal static string InputClockBoolTooltip {
            get {
                return ResourceManager.GetString("InputClockBoolTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Seed.
        /// </summary>
        internal static string InputSeedCaption {
            get {
                return ResourceManager.GetString("InputSeedCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The initial binary value of all states (E.g.: 1001)..
        /// </summary>
        internal static string InputSeedTooltip {
            get {
                return ResourceManager.GetString("InputSeedTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TapSequence.
        /// </summary>
        internal static string InputTapSequenceCaption {
            get {
                return ResourceManager.GetString("InputTapSequenceCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A string containing the taps as a sequence of the c_i or as a polynomial (e.g.: 1011, which is equal to the string x^4 + x^2 + x + 1. Note, that the last 1, which is x^0, is implicitly set to 1 inside the plugin)..
        /// </summary>
        internal static string InputTapSequenceTooltip {
            get {
                return ResourceManager.GetString("InputTapSequenceTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No data to present right now..
        /// </summary>
        internal static string No_Quickwatch_data_right_now_ {
            get {
                return ResourceManager.GetString("No_Quickwatch_data_right_now_", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not display presentation.
        /// </summary>
        internal static string NoQuickwatchCaption {
            get {
                return ResourceManager.GetString("NoQuickwatchCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Display presentation?.
        /// </summary>
        internal static string NoQuickwatchList1 {
            get {
                return ResourceManager.GetString("NoQuickwatchList1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to With this checkbox enabled, no presentation will be shown and performance will be better..
        /// </summary>
        internal static string NoQuickwatchTooltip {
            get {
                return ResourceManager.GetString("NoQuickwatchTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Boolean Array Output of Stages.
        /// </summary>
        internal static string OutputBoolArrayCaption {
            get {
                return ResourceManager.GetString("OutputBoolArrayCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Outputs all stages of the LFSR. This can be used for example to build a nonlinear filter generator together with the BooleanFunctionParser plugin..
        /// </summary>
        internal static string OutputBoolArrayTooltip {
            get {
                return ResourceManager.GetString("OutputBoolArrayTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Boolean Output.
        /// </summary>
        internal static string OutputBoolCaption {
            get {
                return ResourceManager.GetString("OutputBoolCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Contains the current output bit as a boolean value..
        /// </summary>
        internal static string OutputBoolTooltip {
            get {
                return ResourceManager.GetString("OutputBoolTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Additional Output Bit.
        /// </summary>
        internal static string OutputClockingBitCaption {
            get {
                return ResourceManager.GetString("OutputClockingBitCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Outputs a specific stage of the LFSR as a boolean value..
        /// </summary>
        internal static string OutputClockingBitTooltip {
            get {
                return ResourceManager.GetString("OutputClockingBitTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Output stages.
        /// </summary>
        internal static string OutputStagesCaption {
            get {
                return ResourceManager.GetString("OutputStagesCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to With this checkbox enabled, the current state will be output..
        /// </summary>
        internal static string OutputStagesTooltip {
            get {
                return ResourceManager.GetString("OutputStagesTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to String Output.
        /// </summary>
        internal static string OutputStringCaption {
            get {
                return ResourceManager.GetString("OutputStringCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The string containing the output stream with a length of the rounds (e.g.: 1001001, assuming that seven rounds have been performed)..
        /// </summary>
        internal static string OutputStringTooltip {
            get {
                return ResourceManager.GetString("OutputStringTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Period of LFSR.
        /// </summary>
        internal static string Period_of_LFSR {
            get {
                return ResourceManager.GetString("Period_of_LFSR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Period.
        /// </summary>
        internal static string PeriodCaption {
            get {
                return ResourceManager.GetString("PeriodCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates the period depending on feedback polynomial and seed..
        /// </summary>
        internal static string PeriodTooltip {
            get {
                return ResourceManager.GetString("PeriodTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to LFSR.
        /// </summary>
        internal static string PluginCaption {
            get {
                return ResourceManager.GetString("PluginCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Linear Feedback Shift Register.
        /// </summary>
        internal static string PluginTooltip {
            get {
                return ResourceManager.GetString("PluginTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Feedback polynomial.
        /// </summary>
        internal static string PolynomialCaption {
            get {
                return ResourceManager.GetString("PolynomialCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Define the feedback polynomial either in a textual or a numeric way. For example x^5 + x^2 + 1 which is equal to 10010..
        /// </summary>
        internal static string PolynomialTooltip {
            get {
                return ResourceManager.GetString("PolynomialTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rounds.
        /// </summary>
        internal static string RoundsCaption {
            get {
                return ResourceManager.GetString("RoundsCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to How many bits shall be generated? Note: This only applies if no external clock is used..
        /// </summary>
        internal static string RoundsTooltip {
            get {
                return ResourceManager.GetString("RoundsTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Save the state of the LFSR.
        /// </summary>
        internal static string SaveCurrentStateCaption {
            get {
                return ResourceManager.GetString("SaveCurrentStateCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Save current state?.
        /// </summary>
        internal static string SaveCurrentStateList1 {
            get {
                return ResourceManager.GetString("SaveCurrentStateList1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Saves the current state when stopping and restarting the plugin or saving the workspace..
        /// </summary>
        internal static string SaveCurrentStateTooltip {
            get {
                return ResourceManager.GetString("SaveCurrentStateTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Seed.
        /// </summary>
        internal static string SeedCaption {
            get {
                return ResourceManager.GetString("SeedCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Define the seed (initial state) of the LFSR. For example 11100..
        /// </summary>
        internal static string SeedTooltip {
            get {
                return ResourceManager.GetString("SeedTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generate add. output bit.
        /// </summary>
        internal static string UseAdditionalOutputBitCaption {
            get {
                return ResourceManager.GetString("UseAdditionalOutputBitCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generate additional output bit?.
        /// </summary>
        internal static string UseAdditionalOutputBitList1 {
            get {
                return ResourceManager.GetString("UseAdditionalOutputBitList1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to With this checkbox enabled, the additional output bit will be generated..
        /// </summary>
        internal static string UseAdditionalOutputBitTooltip {
            get {
                return ResourceManager.GetString("UseAdditionalOutputBitTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use external clock.
        /// </summary>
        internal static string UseBoolClockCaption {
            get {
                return ResourceManager.GetString("UseBoolClockCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use external clock?.
        /// </summary>
        internal static string UseBoolClockList1 {
            get {
                return ResourceManager.GetString("UseBoolClockList1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to With this checkbox enabled, an external clock will be used..
        /// </summary>
        internal static string UseBoolClockTooltip {
            get {
                return ResourceManager.GetString("UseBoolClockTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use external clock.
        /// </summary>
        internal static string UseBoolClockTPCaption {
            get {
                return ResourceManager.GetString("UseBoolClockTPCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to With this checkbox enabled, an external clock will be used (f.e. the CLK-Plugin)..
        /// </summary>
        internal static string UseBoolClockTPTooltip {
            get {
                return ResourceManager.GetString("UseBoolClockTPTooltip", resourceCulture);
            }
        }
    }
}
