<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AmountLabel" xml:space="preserve">
    <value>Gesendete Pakete:</value>
  </data>
  <data name="IPFromHeader" xml:space="preserve">
    <value>Empfänger IP</value>
  </data>
  <data name="MetaLabel" xml:space="preserve">
    <value>Info</value>
  </data>
  <data name="PaylodHeader" xml:space="preserve">
    <value>Gesendete Daten</value>
  </data>
  <data name="PluginCaption" xml:space="preserve">
    <value>Netzwerk-Sender</value>
  </data>
  <data name="PluginToolTip" xml:space="preserve">
    <value>Die Komponente kann über ein Netzwerk Pakete senden.</value>
  </data>
  <data name="Port" xml:space="preserve">
    <value>Port</value>
  </data>
  <data name="PortToolTip" xml:space="preserve">
    <value>Port auf dem die Daten versendet werden</value>
  </data>
  <data name="SendPackagesLabel" xml:space="preserve">
    <value>Gesendete Pakete</value>
  </data>
  <data name="StartLabel" xml:space="preserve">
    <value>Gestartet Um:</value>
  </data>
  <data name="StreamInput" xml:space="preserve">
    <value>zu sendende Daten</value>
  </data>
  <data name="StreamInputTooltip" xml:space="preserve">
    <value>Daten, die über das Netzwerk gesendet werden sollen.</value>
  </data>
  <data name="TOSHeader" xml:space="preserve">
    <value>Gesendet Um</value>
  </data>
  <data name="DeviceIpCaption" xml:space="preserve">
    <value>Netzwerkkarten IP:</value>
  </data>
  <data name="DeviceIpCaptionTooltip" xml:space="preserve">
    <value>Geben Sie die IP des Empfängers an, um an diese zu senden.</value>
  </data>
  <data name="LisPort" xml:space="preserve">
    <value>Port: </value>
  </data>
  <data name="Size" xml:space="preserve">
    <value>Größe</value>
  </data>
  <data name="ByteAsciiSwitchCaption" xml:space="preserve">
    <value>Bytes als ASCII anzeigen</value>
  </data>
  <data name="ByteAsciiSwitchCaptionTooltip" xml:space="preserve">
    <value>Bytes als ASCII anzeigen</value>
  </data>
  <data name="IpInput" xml:space="preserve">
    <value>Ziel IP</value>
  </data>
  <data name="IpInputTooltip" xml:space="preserve">
    <value>Setzen sie die Ziel IP hier oder in den Einstellungen der Komponente.</value>
  </data>
  <data name="Protocol" xml:space="preserve">
    <value>Protokoll</value>
  </data>
  <data name="ProtocolToolTip" xml:space="preserve">
    <value>Ändert den Protokoll Typen</value>
  </data>
  <data name="SpeedrateLabel" xml:space="preserve">
    <value>Übertragungsrate:</value>
  </data>
  <data name="ConnectIntervallCaption" xml:space="preserve">
    <value>Verbindungsaufbau Intervall</value>
  </data>
  <data name="ConnectIntervallCaptionToolTip" xml:space="preserve">
    <value>Bestimmt das Intervall in dem versucht wird die Verbindung zum Server aufzubauen</value>
  </data>
  <data name="TryConnectCaption" xml:space="preserve">
    <value>wiederhole Verbindungsaufbau</value>
  </data>
  <data name="TryConnectCaptionToolTip" xml:space="preserve">
    <value>Versucht in einem gegebenem Intervall eine Verbindung zum Server aufzubauen</value>
    <comment> </comment>
  </data>
</root>