<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ActionCaption" xml:space="preserve">
    <value>Aktion</value>
  </data>
  <data name="ActionList1" xml:space="preserve">
    <value>Bild spiegeln</value>
  </data>
  <data name="ActionList10" xml:space="preserve">
    <value>Bild erzeugen</value>
  </data>
  <data name="ActionList11" xml:space="preserve">
    <value>Bild beschneiden</value>
  </data>
  <data name="ActionList12" xml:space="preserve">
    <value>XOR Grayscale-Bild</value>
  </data>
  <data name="ActionList13" xml:space="preserve">
    <value>Schwarz-Weiß</value>
  </data>
  <data name="ActionList14" xml:space="preserve">
    <value>Bildkontrast</value>
  </data>
  <data name="ActionList2" xml:space="preserve">
    <value>Graustufen</value>
  </data>
  <data name="ActionList3" xml:space="preserve">
    <value>Bild glätten</value>
  </data>
  <data name="ActionList4" xml:space="preserve">
    <value>Bildgröße ändern</value>
  </data>
  <data name="ActionList5" xml:space="preserve">
    <value>Bild rotieren</value>
  </data>
  <data name="ActionList6" xml:space="preserve">
    <value>Bild invrtieren</value>
  </data>
  <data name="ActionList7" xml:space="preserve">
    <value>Bilder UND-verknüpfen</value>
  </data>
  <data name="ActionList8" xml:space="preserve">
    <value>Bilder ODER-verknüpfen</value>
  </data>
  <data name="ActionList9" xml:space="preserve">
    <value>Bilder XOR-verknüpfen</value>
  </data>
  <data name="ActionTooltip" xml:space="preserve">
    <value>Wählen Sie die Aktion, die Sie auf das Bild anwenden wollen.</value>
  </data>
  <data name="ContrastCaption" xml:space="preserve">
    <value>Kontrast</value>
  </data>
  <data name="ContrastTooltip" xml:space="preserve">
    <value>Geben Sie den Wert für den Kontrast ein.</value>
  </data>
  <data name="DegreesCaption" xml:space="preserve">
    <value>Grad</value>
  </data>
  <data name="DegreesTooltip" xml:space="preserve">
    <value>Geben Sie an, um wieviel Grad das Bild gedreht werden soll.</value>
  </data>
  <data name="FlipTypeCaption" xml:space="preserve">
    <value>Spiegeln</value>
  </data>
  <data name="FlipTypeList1" xml:space="preserve">
    <value>Horizontal</value>
  </data>
  <data name="FlipTypeList2" xml:space="preserve">
    <value>Vertikal</value>
  </data>
  <data name="FlipTypeTooltip" xml:space="preserve">
    <value>Spiegeln Sie das Bild horizontal oder vertikal.</value>
  </data>
  <data name="InputImage1Caption" xml:space="preserve">
    <value>Eingabebild 1</value>
  </data>
  <data name="InputImage1Caption2" xml:space="preserve">
    <value>Eingabebild 2</value>
  </data>
  <data name="InputImage1Tooltip" xml:space="preserve">
    <value>Hier wird das für die Bildverarbeitung verwendete Bild eingegeben.</value>
  </data>
  <data name="InputImage1Tooltip2" xml:space="preserve">
    <value>Hier wird das zweite Bild eingegeben, falls die gewählte Aktion eine Verknüpfung zweier Bilder ist.</value>
  </data>
  <data name="OutputFileFormatCaption" xml:space="preserve">
    <value>Ausgabebild-Format</value>
  </data>
  <data name="OutputFileFormatTooltip" xml:space="preserve">
    <value>Wählen sie aus, welches Format das Ausgabebild haben soll.</value>
  </data>
  <data name="OutputImageCaption" xml:space="preserve">
    <value>Ausgabebild</value>
  </data>
  <data name="OutputImageTooltip" xml:space="preserve">
    <value>Hier wird das bearbeitete Bild ausgegeben.</value>
  </data>
  <data name="PluginCaption" xml:space="preserve">
    <value>Bildverarbeitung</value>
  </data>
  <data name="PluginTooltip" xml:space="preserve">
    <value>Process and save an image</value>
  </data>
  <data name="SizeXCaption" xml:space="preserve">
    <value>Größe X</value>
  </data>
  <data name="SizeXTooltip" xml:space="preserve">
    <value>Geben Sie die Anzahl der horizontalen Pixel ein.</value>
  </data>
  <data name="SizeYCaption" xml:space="preserve">
    <value>Größe Y</value>
  </data>
  <data name="SizeYTooltip" xml:space="preserve">
    <value>Geben Sie die Anzahl der vertikalen Pixel ein.</value>
  </data>
  <data name="SliderX1Caption" xml:space="preserve">
    <value>Schieber X1</value>
  </data>
  <data name="SliderX1Tooltip" xml:space="preserve">
    <value>Geben Sie den Wert des linken Randes ein.</value>
  </data>
  <data name="SliderX2Caption" xml:space="preserve">
    <value>Schieber X2</value>
  </data>
  <data name="SliderX2Tooltip" xml:space="preserve">
    <value>Geben Sie den Wert des rechten Randes ein.</value>
  </data>
  <data name="SliderY1Caption" xml:space="preserve">
    <value>Schieber Y1</value>
  </data>
  <data name="SliderY1Tooltip" xml:space="preserve">
    <value>Geben Sie den Wert des oberen Randes ein.</value>
  </data>
  <data name="SliderY2Caption" xml:space="preserve">
    <value>Schieber Y2</value>
  </data>
  <data name="SliderY2Tooltip" xml:space="preserve">
    <value>Geben Sie den Wert des unteren Randes ein.</value>
  </data>
  <data name="SmoothCaption" xml:space="preserve">
    <value>Glätten</value>
  </data>
  <data name="SmoothTooltip" xml:space="preserve">
    <value>Geben Sie den Glättungswert ein.</value>
  </data>
  <data name="ThresholdCaption" xml:space="preserve">
    <value>Schwellenwert</value>
  </data>
  <data name="ThresholdTooltip" xml:space="preserve">
    <value>Geben Sie den Schwellenwert ein.</value>
  </data>
</root>