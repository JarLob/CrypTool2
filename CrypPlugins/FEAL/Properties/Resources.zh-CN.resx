<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="InputIVCaption" xml:space="preserve">
    <value>初始化向量</value>
  </data>
  <data name="InputIVTooltip" xml:space="preserve">
    <value>链接模式中使用的初始化向量（IV）。它必须与块大小相同。</value>
  </data>
  <data name="InputKeyCaption" xml:space="preserve">
    <value>键</value>
  </data>
  <data name="InputKeyTooltip" xml:space="preserve">
    <value>提供的密钥必须为8个字节。太短或太长的键将被扩展或截断。</value>
  </data>
  <data name="InputStreamCaption" xml:space="preserve">
    <value>输入流</value>
  </data>
  <data name="InputStreamTooltip" xml:space="preserve">
    <value>要加密或解密的数据。</value>
  </data>
  <data name="OutputStreamCaption" xml:space="preserve">
    <value>输出流</value>
  </data>
  <data name="OutputStreamTooltip" xml:space="preserve">
    <value>该连接器输出加密或解密的数据。</value>
  </data>
  <data name="PluginCaption" xml:space="preserve">
    <value>FEAL</value>
  </data>
  <data name="PluginTooltip" xml:space="preserve">
    <value>快速数据加密算法</value>
  </data>
  <data name="Round1" xml:space="preserve">
    <value>第1轮</value>
  </data>
  <data name="Round2" xml:space="preserve">
    <value>第二回合</value>
  </data>
  <data name="Round3" xml:space="preserve">
    <value>第三回合</value>
  </data>
  <data name="Round4" xml:space="preserve">
    <value>第四回合</value>
  </data>
  <data name="Round5" xml:space="preserve">
    <value>第五回合</value>
  </data>
  <data name="Round6" xml:space="preserve">
    <value>第六回合</value>
  </data>
  <data name="Round7" xml:space="preserve">
    <value>第七回合</value>
  </data>
  <data name="Round8" xml:space="preserve">
    <value>第八回合</value>
  </data>
  <data name="FEAL_Execute_Key_too_short" xml:space="preserve">
    <value>密钥长度= {0}太短。用零填充以达到密钥长度= 8</value>
  </data>
  <data name="FEAL_Execute_Key_too_long" xml:space="preserve">
    <value>密钥长度= {0}太长。切成关键长度= 8</value>
  </data>
  <data name="FEAL_CheckIV_IV_too_short" xml:space="preserve">
    <value>IV长度= {0}太短。用零填充到IV长度= 8</value>
  </data>
  <data name="FEAL_CheckIV_IV_too_long" xml:space="preserve">
    <value>IV长度= {0}太长。切成IV长度= 8</value>
  </data>
  <data name="ActionCaption" xml:space="preserve">
    <value>行动</value>
  </data>
  <data name="ActionList1" xml:space="preserve">
    <value>加密</value>
  </data>
  <data name="ActionList2" xml:space="preserve">
    <value>解密</value>
  </data>
  <data name="ActionTooltip" xml:space="preserve">
    <value>是否要对输入数据进行加密或解密？</value>
  </data>
  <data name="AlgorithmTypeCaption" xml:space="preserve">
    <value>算法类型</value>
  </data>
  <data name="AlgorithmTypeTooltip" xml:space="preserve">
    <value>设置FEAL算法的类型。</value>
  </data>
  <data name="BlockModeCaption" xml:space="preserve">
    <value>链接模式</value>
  </data>
  <data name="BlockModeList1" xml:space="preserve">
    <value>电子密码书（ECB）</value>
  </data>
  <data name="BlockModeList2" xml:space="preserve">
    <value>密码块链接（CBC）</value>
  </data>
  <data name="BlockModeList3" xml:space="preserve">
    <value>密码反馈（CFB）</value>
  </data>
  <data name="BlockModeList4" xml:space="preserve">
    <value>输出反馈（OFB）</value>
  </data>
  <data name="BlockModeTooltip" xml:space="preserve">
    <value>选择操作的分组密码模式。</value>
  </data>
  <data name="EnableKeyParityBitsCaption" xml:space="preserve">
    <value>启用密钥奇偶校验位</value>
  </data>
  <data name="EnableKeyParityBitsTooltio" xml:space="preserve">
    <value>如果启用了奇偶校验位，则密钥中的每个第8位将设置为零。</value>
  </data>
  <data name="PaddingCaption" xml:space="preserve">
    <value>填充模式</value>
  </data>
  <data name="PaddingList1" xml:space="preserve">
    <value>没有</value>
  </data>
  <data name="PaddingList2" xml:space="preserve">
    <value>零点</value>
  </data>
  <data name="PaddingList3" xml:space="preserve">
    <value>PKCS7</value>
  </data>
  <data name="PaddingList4" xml:space="preserve">
    <value>ANSIX923</value>
  </data>
  <data name="PaddingList5" xml:space="preserve">
    <value>ISO10126</value>
  </data>
  <data name="PaddingList6" xml:space="preserve">
    <value>1-0填充</value>
  </data>
  <data name="PaddingTooltip" xml:space="preserve">
    <value>选择一种模式来填充部分数据块。</value>
  </data>
</root>