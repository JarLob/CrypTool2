//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.18444
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LatticeCrypto.Properties {
    using System;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class HelpLanguages {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal HelpLanguages() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("LatticeCrypto.Properties.HelpLanguages", typeof(HelpLanguages).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Winkel zwischen zwei Vektoren&lt;/h2&gt;
        ///&lt;p&gt;
        ///    Der Winkel &amp;theta; zwischen zwei Vektoren wird angegeben mit:&lt;/p&gt;
        ///&lt;p&gt;
        ///    &lt;img src=&quot;ImgAngleVectors&quot; /&gt;
        ///&lt;/p&gt;
        ///
        ///&lt;p&gt;Vergleichen Sie den Winkel zwischen den nicht-reduzierten und den reduzierten Vektoren. Die reduzierten Vektoren nähern sich dem 90°-Winkel an.&lt;/p&gt;
        ///
        /// ähnelt.
        /// </summary>
        public static string AngleVectors {
            get {
                return ResourceManager.GetString("AngleVectors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Zurück ähnelt.
        /// </summary>
        public static string btnBack {
            get {
                return ResourceManager.GetString("btnBack", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Schließen ähnelt.
        /// </summary>
        public static string btnClose {
            get {
                return ResourceManager.GetString("btnClose", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Vorwärts ähnelt.
        /// </summary>
        public static string btnForward {
            get {
                return ResourceManager.GetString("btnForward", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Wertebereich&lt;/h2&gt;
        ///&lt;p&gt;
        ///    Bitte geben Sie an dieser Stelle einen gültigen Wertebereich ein. Dabei ist zu 
        ///    beachten, dass nur Ganzzahlen erlaubt sind. Außerdem muss der Wert &amp;quot;Von&amp;quot; kleiner sein als der Wert &amp;quot;Bis&amp;quot;. Achten Sie auch darauf, dass der Wertebereich 
        ///    nicht zu eng ist, sonst kann eventuell kein Gitter generiert werden.&lt;/p&gt;
        /// ähnelt.
        /// </summary>
        public static string Codomain {
            get {
                return ResourceManager.GetString("Codomain", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Wertebereich&lt;/h2&gt;
        ///&lt;p&gt;
        ///    Bitte geben Sie an dieser Stelle einen gültigen Wertebereich ein. Dabei ist zu 
        ///    beachten, dass nur Ganzzahlen erlaubt sind. Außerdem muss der Wert &amp;quot;Von&amp;quot; kleiner sein als der Wert &amp;quot;Bis&amp;quot;.&lt;/p&gt;
        /// ähnelt.
        /// </summary>
        public static string CodomainLLL {
            get {
                return ResourceManager.GetString("CodomainLLL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Closest Vector Problem&lt;/h2&gt;
        ///&lt;p&gt;
        ///    Das Closest Vector Problem ist neben dem &lt;a href=&quot;help://SVP&quot;&gt;Shortest Vector 
        ///                                                 Problem&lt;/a&gt; ein interessantes Problem im Zusammenhang mit Gittern. Es wird ein
        ///    &lt;a href=&quot;help://TargetPoint&quot;&gt;Zielpunkt&lt;/a&gt; vorgegeben, der innerhalb des 
        ///    Vektorraums liegt, allerdings nicht selbst notwendigerweise ein Gitterpunkt sein 
        ///    muss. Gesucht wird ein Gitterpunkt, der diesem Zielpunkt am nähesten kommt. Das 
        ///    heißt [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        public static string CVP {
            get {
                return ResourceManager.GetString("CVP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Gitterdeterminante&lt;/h2&gt;
        ///&lt;p&gt;
        ///    Die Vektoren der Basis erzeugen ein Parallelepiped P (ein Parallelogramm im zwei-dimensionalen Raum). Dieses wird Grundmasche 
        ///    genannt und wie folgt definiert:&lt;/p&gt;
        ///    
        ///&lt;img src=&quot;ImgDeterminantLattice&quot; /&gt;
        ///
        ///&lt;p&gt;Die Gitterdeterminante ist das Volumen des Parallelepipeds und kann auch als Absolutbetrag der Determinante der Basismatrix aufgefasst werden:&lt;/p&gt;
        ///&lt;img src=&quot;ImgDeterminantLattice2&quot; /&gt;
        ///
        ///&lt;p&gt;Die Gitterdeterminante ist unabhängig von der Wahl der Basis, dah [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        public static string DeterminantLattice {
            get {
                return ResourceManager.GetString("DeterminantLattice", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Dimension&lt;/h2&gt;
        ///&lt;p&gt;
        ///    Bitte geben Sie an dieser Stelle die Dimension der Matrix an, welche die Basis 
        ///    repräsentiert. Die Matrix ist dabei quadratisch. Sie können die Werte danach 
        ///    entweder zufällig generieren lassen oder eigene Werte eintragen. Beachten Sie 
        ///    bitte, dass die Vektoren der Matrix in Spaltenschreibweise angegeben werden.&lt;/p&gt;
        /// ähnelt.
        /// </summary>
        public static string DimensionLLL {
            get {
                return ResourceManager.GetString("DimensionLLL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Gauß-Algorithmus&lt;/h2&gt;
        ///&lt;p&gt;
        ///    Der Gauß-Algorithmus findet in einem Gitter im zweidimensionalen Raum 
        ///    zuverlässig einen &lt;a href=&quot;help://SVP&quot;&gt;kürzesten Vektor&lt;/a&gt;. Er arbeitet ähnlich dem euklidischen 
        ///    Algorithmus zur Suche des größten gemeinsamen Teilers ggT zweier ganzer Zahlen, 
        ///    denn nach jedem Schritt verbessert sich die Basis um einen kürzeren Vektor. 
        ///    Dabei wird iterativ der längere Vektor b2 mit einem ganzzahligen Vielfachen des 
        ///    kürzeren Vektors b1 subtrahiert (siehe Abb [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        public static string Gauss {
            get {
                return ResourceManager.GetString("Gauss", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;GGH-Kryptosystem&lt;/h2&gt;
        ///&lt;p&gt;
        ///    Todo&lt;/p&gt;
        /// ähnelt.
        /// </summary>
        public static string GGH {
            get {
                return ResourceManager.GetString("GGH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgAngleVectors {
            get {
                object obj = ResourceManager.GetObject("ImgAngleVectors", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgDeterminantLattice {
            get {
                object obj = ResourceManager.GetObject("ImgDeterminantLattice", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgDeterminantLattice2 {
            get {
                object obj = ResourceManager.GetObject("ImgDeterminantLattice2", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgGauss {
            get {
                object obj = ResourceManager.GetObject("ImgGauss", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgHermite {
            get {
                object obj = ResourceManager.GetObject("ImgHermite", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgLengthVector {
            get {
                object obj = ResourceManager.GetObject("ImgLengthVector", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgSuccessiveMinima {
            get {
                object obj = ResourceManager.GetObject("ImgSuccessiveMinima", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap ImgTwoBasis {
            get {
                object obj = ResourceManager.GetObject("ImgTwoBasis", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Länge eines Vektors&lt;/h2&gt;
        ///&lt;p&gt;
        ///    Die Länge eines Vektors v wird angegeben mit:&lt;/p&gt;
        ///    
        ///&lt;img src=&quot;ImgLengthVector&quot; /&gt;
        ///
        ///&lt;p&gt;Vergleichen Sie die Längen der Basisvektoren mit den 
        ///    &lt;a href=&quot;help://SuccessiveMinima&quot;&gt;Sukzessiven Minima&lt;/a&gt; nach der Reduktion.&lt;/p&gt; ähnelt.
        /// </summary>
        public static string LengthVector {
            get {
                return ResourceManager.GetString("LengthVector", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;LLL-Algorithmus&lt;/h2&gt;
        ///&lt;p&gt;
        ///    Im Unterschied zum Gauß-Algorithmus,welcher im 2-dimensionalen Fall arbeitet, 
        ///    liefert der LLL-Algorithmus einen &lt;a href=&quot;help://SVP&quot;&gt;kürzesten Vektor&lt;/a&gt; im n-dimensionalen Raum. 
        ///    Allerdings ist der kürzeste Vektor nicht immer der tatsächlich kürzeste, sondern 
        ///    häufig nur ein sehr kurzer Vektor. Diese Einschränkung hat jedoch den Vorteil, 
        ///    dass der Algorithmus in Polynomialzeit arbeitet, wodurch schnell eine gute 
        ///    Lösung gefunden werden kann.&lt;/p&gt;        /// [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        public static string LLL {
            get {
                return ResourceManager.GetString("LLL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;LWE-Kryptosystem&lt;/h2&gt;
        ///&lt;p&gt;
        ///    Todo&lt;/p&gt;
        /// ähnelt.
        /// </summary>
        public static string LWE {
            get {
                return ResourceManager.GetString("LWE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Merkle-Hellman-Kryptosystem&lt;/h2&gt;
        ///&lt;p&gt;
        ///    Todo&lt;/p&gt;
        /// ähnelt.
        /// </summary>
        public static string MerkleHellman {
            get {
                return ResourceManager.GetString("MerkleHellman", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;RSA-Kryptosystem&lt;/h2&gt;
        ///&lt;p&gt;
        ///    Todo&lt;/p&gt;
        /// ähnelt.
        /// </summary>
        public static string RSA {
            get {
                return ResourceManager.GetString("RSA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot;&gt;
        ///&lt;html&gt;
        ///&lt;head&gt;
        ///    &lt;title&gt;&lt;/title&gt;
        ///    &lt;style type=&quot;text/css&quot;&gt;
        ///        body
        ///        {
        ///            font-family: Arial,Verdana,Georgia;
        ///            font-size: smaller;
        ///        }
        ///    &lt;/style&gt;
        ///&lt;/head&gt;
        ///&lt;body&gt;
        ///    &lt;h2&gt;
        ///        Gitterbasierte Kryptographie&lt;/h2&gt;
        ///    &lt;p align=&quot;justify&quot;&gt;
        ///        In diesem Kryptotutorial lernen Sie Gitter kennen und erfahren über ihren Einsatz in der Kryptographie, 
        ///        insbesondere der Kryptoanalyse. D [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        public static string Start {
            get {
                return ResourceManager.GetString("Start", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Gitterbasierte Kryptographie - Hilfe&lt;/h2&gt;
        ///Willkommen in der Hilfe des Kryptotutoriums &quot;Gitterbasierte 
        ///Kryptographie&amp;quot;.
        ///Hier finden Sie detaillierte Informationen zu Gittern und deren Einsatz in der 
        ///Kryptographie, insbesondere in der Kryptoanalyse.
        ///In die verschiedenen Masken dieses Kryptotutoriums gelangen Sie mit Hilfe der Navigation auf der linken Seite. In den verschiedenen Masken
        ///wiederum finden Sie mehrere Hilfebuttons. Wenn Sie auf diese klicken, bekommen Sie detaillierte Informationen [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        public static string StartControl {
            get {
                return ResourceManager.GetString("StartControl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Sukzessive Minima&lt;/h2&gt;
        ///&lt;p&gt;
        ///    Die Sukzessiven Minima sind die Längen der reduzierten Vektoren. Sie werden mit einem &amp;lambda; bezeichnet und 
        ///    sind geordnet. Das erste Minimum &amp;lambda;1 bezieht sich also auf den 
        ///    &lt;a href=&quot;help://SVP&quot;&gt;kürzesten Vektor&lt;/a&gt; v1. Die Minima lassen 
        ///    sich wie folgt definieren:&lt;/p&gt;
        ///&lt;p&gt;
        ///    &lt;img src=&quot;ImgSuccessiveMinima&quot; /&gt;
        ///&lt;/p&gt;
        ///
        ///&lt;p&gt;Die Definition kann so aufgefasst werden, dass eine Kugel mit dem Radius r konstruiert
        ///    wird, die sich mit jedem neuen sukz [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        public static string SuccessiveMinima {
            get {
                return ResourceManager.GetString("SuccessiveMinima", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Shortest Vector Problem (SVP)&lt;/h2&gt;
        ///&lt;p&gt;
        ///    Das Shortest Vector Problem ist neben dem &lt;a href=&quot;help://CVP&quot;&gt;Closest Vector Problem&lt;/a&gt; 
        ///    ein interessantes Problem im Zusammenhang mit Gittern. Es wird nach einem Vektor 
        ///    gesucht, der zu einem Gittern gehört und minimale Länge besitzt. Das heißt, es 
        ///    darf (außer dem Nullvektor) keinen weiteren Vektor geben, der kürzer ist.&lt;/p&gt;
        ///    
        ///&lt;p&gt;
        ///    
        ///    Um zu diesem kürzesten Vektor zu gelangen, muss die Basis des Gitters ggf. 
        ///    reduziert werd [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        public static string SVP {
            get {
                return ResourceManager.GetString("SVP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;h2&gt;Zielpunkt&lt;/h2&gt;
        ///&lt;p&gt;
        ///    Bitte geben Sie hier einen beliebigen Punkt im Vektorraum ein. Dieser Punkt muss 
        ///    nicht notwendigerweise ein Gitterpunkt sein. Drücken Sie danach auf den Button 
        ///    &amp;quot;Finde closest vector&amp;quot;, um den nächstgelegenen Gitterpunkt zu diesem Punkt zu 
        ///    finden. Das hierbei zu lösende Problem ist als &lt;a href=&quot;help://CVP&quot;&gt;Closest 
        ///    Vector Problem&lt;/a&gt; bekannt.&lt;/p&gt;
        /// ähnelt.
        /// </summary>
        public static string TargetPoint {
            get {
                return ResourceManager.GetString("TargetPoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot;&gt;
        ///&lt;html&gt;
        ///	&lt;head&gt;
        ///	&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
        ///		&lt;title&gt;&lt;/title&gt;
        ///		&lt;style type=&quot;text/css&quot;&gt;
        ///		  body
        ///		  {
        ///		  	font-family:Arial,Verdana,Georgia;
        ///		  	font-size:smaller;
        ///		  }
        ///		&lt;/style&gt;
        ///	&lt;/head&gt;
        ///	&lt;body&gt;
        ///  #content#	
        ///	&lt;br /&gt;
        ///	&lt;br /&gt;
        ///  &lt;a href=&quot;javascript:window.print()&quot;&gt;Dieses Hilfethema ausdrucken.&lt;/a&gt;
        ///	&lt;/body&gt;
        ///&lt;/html&gt; ähnelt.
        /// </summary>
        public static string template {
            get {
                return ResourceManager.GetString("template", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Online-Hilfe Gitterabasierte Kryptographie ähnelt.
        /// </summary>
        public static string title {
            get {
                return ResourceManager.GetString("title", resourceCulture);
            }
        }
    }
}
