//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.269
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Solitaire.Properties {
    using System;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Solitaire.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Action Type ähnelt.
        /// </summary>
        internal static string ActionTypeCaption {
            get {
                return ResourceManager.GetString("ActionTypeCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Encrypt ähnelt.
        /// </summary>
        internal static string ActionTypeList1 {
            get {
                return ResourceManager.GetString("ActionTypeList1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Decrypt ähnelt.
        /// </summary>
        internal static string ActionTypeList2 {
            get {
                return ResourceManager.GetString("ActionTypeList2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Choose whether to encrypt or decrypt ähnelt.
        /// </summary>
        internal static string ActionTypeTooltip {
            get {
                return ResourceManager.GetString("ActionTypeTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Deckstate input ähnelt.
        /// </summary>
        internal static string DeckstateCaption {
            get {
                return ResourceManager.GetString("DeckstateCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Input a deckstate, the sequence represents the deck from top to bottom.
        ///Each card is represented by a number, the highest two being the jokers.
        ///Seperate the cards with a comma, e.g. &apos;1,2,3,4&apos;. Maximum number of cards is 54. ähnelt.
        /// </summary>
        internal static string DeckstateTooltip {
            get {
                return ResourceManager.GetString("DeckstateTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Final Deck ähnelt.
        /// </summary>
        internal static string FinalDeckCaption {
            get {
                return ResourceManager.GetString("FinalDeckCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The deck after generating the last keystream letter. ähnelt.
        /// </summary>
        internal static string FinalDeckTooltip {
            get {
                return ResourceManager.GetString("FinalDeckTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Deck Generation ähnelt.
        /// </summary>
        internal static string GenerationTypeCaption {
            get {
                return ResourceManager.GetString("GenerationTypeCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Ascending ähnelt.
        /// </summary>
        internal static string GenerationTypeList1 {
            get {
                return ResourceManager.GetString("GenerationTypeList1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Descending ähnelt.
        /// </summary>
        internal static string GenerationTypeList2 {
            get {
                return ResourceManager.GetString("GenerationTypeList2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Given State ähnelt.
        /// </summary>
        internal static string GenerationTypeList3 {
            get {
                return ResourceManager.GetString("GenerationTypeList3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Password ähnelt.
        /// </summary>
        internal static string GenerationTypeList4 {
            get {
                return ResourceManager.GetString("GenerationTypeList4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Random ähnelt.
        /// </summary>
        internal static string GenerationTypeList5 {
            get {
                return ResourceManager.GetString("GenerationTypeList5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Choose the method of generation for the initial deck:
        ///- Ascending: sorts the cards in ascending order (starting with the lowest).
        ///- Descending: sorts the cards in descending order (starting with the highest).
        ///- Given state: use a deckstate as entered
        ///- Password: generate the initial deck from password
        ///- Random: randomly generate the initial deck ähnelt.
        /// </summary>
        internal static string GenerationTypeTooltip {
            get {
                return ResourceManager.GetString("GenerationTypeTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Initial Deck ähnelt.
        /// </summary>
        internal static string InitialDeckCaption {
            get {
                return ResourceManager.GetString("InitialDeckCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The initial deck which is used. ähnelt.
        /// </summary>
        internal static string InitialDeckTooltip {
            get {
                return ResourceManager.GetString("InitialDeckTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Text input ähnelt.
        /// </summary>
        internal static string InputStringCaption {
            get {
                return ResourceManager.GetString("InputStringCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Input a string to be processed ähnelt.
        /// </summary>
        internal static string InputStringTooltip {
            get {
                return ResourceManager.GetString("InputStringTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Automatic ähnelt.
        /// </summary>
        internal static string labelAutomatic {
            get {
                return ResourceManager.GetString("labelAutomatic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Cipher Stream ähnelt.
        /// </summary>
        internal static string labelCipherStream {
            get {
                return ResourceManager.GetString("labelCipherStream", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Deck ähnelt.
        /// </summary>
        internal static string labelDeck {
            get {
                return ResourceManager.GetString("labelDeck", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Initialize ähnelt.
        /// </summary>
        internal static string labelInitialize {
            get {
                return ResourceManager.GetString("labelInitialize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Input Text ähnelt.
        /// </summary>
        internal static string labelInputText {
            get {
                return ResourceManager.GetString("labelInputText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Cipher Text ähnelt.
        /// </summary>
        internal static string labelOutputText {
            get {
                return ResourceManager.GetString("labelOutputText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Step 1 ähnelt.
        /// </summary>
        internal static string labelStep1 {
            get {
                return ResourceManager.GetString("labelStep1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Step 2 ähnelt.
        /// </summary>
        internal static string labelStep2 {
            get {
                return ResourceManager.GetString("labelStep2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Step 3 ähnelt.
        /// </summary>
        internal static string labelStep3 {
            get {
                return ResourceManager.GetString("labelStep3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Step 4 ähnelt.
        /// </summary>
        internal static string labelStep4 {
            get {
                return ResourceManager.GetString("labelStep4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Step 5 ähnelt.
        /// </summary>
        internal static string labelStep5 {
            get {
                return ResourceManager.GetString("labelStep5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Cards ähnelt.
        /// </summary>
        internal static string NumberOfCardsCaption {
            get {
                return ResourceManager.GetString("NumberOfCardsCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select the number of cards in your deck. 
        ///The normal setting is 54 cards, the normal 52 playing cards and 2 jokers, which is also the maximum number of cards.
        ///The minimum setting is 3 cards, a single card and 2 jokers. ähnelt.
        /// </summary>
        internal static string NumberOfCardsTooltip {
            get {
                return ResourceManager.GetString("NumberOfCardsTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Stream Output ähnelt.
        /// </summary>
        internal static string OutputStreamCaption {
            get {
                return ResourceManager.GetString("OutputStreamCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The stream used to encrypt or decrypt the text. ähnelt.
        /// </summary>
        internal static string OutputStreamTooltip {
            get {
                return ResourceManager.GetString("OutputStreamTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Text Output ähnelt.
        /// </summary>
        internal static string OutputStringCaption {
            get {
                return ResourceManager.GetString("OutputStringCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The string after processing with the Solitaire cipher ähnelt.
        /// </summary>
        internal static string OutputStringTooltip {
            get {
                return ResourceManager.GetString("OutputStringTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Password input ähnelt.
        /// </summary>
        internal static string PasswordCaption {
            get {
                return ResourceManager.GetString("PasswordCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Input the password with which the initial deck will be generated ähnelt.
        /// </summary>
        internal static string PasswordTooltip {
            get {
                return ResourceManager.GetString("PasswordTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Solitaire ähnelt.
        /// </summary>
        internal static string PluginCaption {
            get {
                return ResourceManager.GetString("PluginCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Try the Solitaire Cipher ähnelt.
        /// </summary>
        internal static string PluginTooltip {
            get {
                return ResourceManager.GetString("PluginTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Stream Generation ähnelt.
        /// </summary>
        internal static string StreamTypeCaption {
            get {
                return ResourceManager.GetString("StreamTypeCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Automatic ähnelt.
        /// </summary>
        internal static string StreamTypeList1 {
            get {
                return ResourceManager.GetString("StreamTypeList1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Manual ähnelt.
        /// </summary>
        internal static string StreamTypeList2 {
            get {
                return ResourceManager.GetString("StreamTypeList2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Choose the stream generation:
        ///- Automatic: the cipherstream is automatically generated and the final result is shown.
        ///- Manual: one can manually go through the five different steps. The cards that change after each step will be printed bold. ähnelt.
        /// </summary>
        internal static string StreamTypeTooltip {
            get {
                return ResourceManager.GetString("StreamTypeTooltip", resourceCulture);
            }
        }
    }
}
