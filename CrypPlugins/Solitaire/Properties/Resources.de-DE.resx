<?xml version="1.0" encoding="utf-8"?>
<root>
	<!-- 
		Microsoft ResX Schema

		Version 1.3

		The primary goals of this format is to allow a simple XML format 
		that is mostly human readable. The generation and parsing of the 
		various data types are done through the TypeConverter classes 
		associated with the data types.

		Example:

		... ado.net/XML headers & schema ...
		<resheader name="resmimetype">text/microsoft-resx</resheader>
		<resheader name="version">1.3</resheader>
		<resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
		<resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
		<data name="Name1">this is my long string</data>
		<data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
		<data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
			[base64 mime encoded serialized .NET Framework object]
		</data>
		<data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
			[base64 mime encoded string representing a byte array form of the .NET Framework object]
		</data>

		There are any number of "resheader" rows that contain simple 
		name/value pairs.

		Each data row contains a name, and value. The row also contains a 
		type or mimetype. Type corresponds to a .NET class that support 
		text/value conversion through the TypeConverter architecture. 
		Classes that don't support this are serialized and stored with the 
		mimetype set.

		The mimetype is used for serialized objects, and tells the 
		ResXResourceReader how to depersist the object. This is currently not 
		extensible. For a given mimetype the value must be set accordingly:

		Note - application/x-microsoft.net.object.binary.base64 is the format 
		that the ResXResourceWriter will generate, however the reader can 
		read any of the formats listed below.

		mimetype: application/x-microsoft.net.object.binary.base64
		value   : The object must be serialized with 
			: System.Serialization.Formatters.Binary.BinaryFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.soap.base64
		value   : The object must be serialized with 
			: System.Runtime.Serialization.Formatters.Soap.SoapFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.bytearray.base64
		value   : The object must be serialized into a byte array 
			: using a System.ComponentModel.TypeConverter
			: and then encoded with base64 encoding.
	-->
	
	<xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
		<xsd:element name="root" msdata:IsDataSet="true">
			<xsd:complexType>
				<xsd:choice maxOccurs="unbounded">
					<xsd:element name="data">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
								<xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
							<xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
							<xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="resheader">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" />
						</xsd:complexType>
					</xsd:element>
				</xsd:choice>
			</xsd:complexType>
		</xsd:element>
	</xsd:schema>
	<resheader name="resmimetype">
		<value>text/microsoft-resx</value>
	</resheader>
	<resheader name="version">
		<value>1.3</value>
	</resheader>
	<resheader name="reader">
		<value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<resheader name="writer">
		<value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	  <data name="PluginCaption" xml:space="preserve">
    <value>Solitaire</value>
  </data>
  <data name="PluginTooltip" xml:space="preserve">
    <value>Try the Solitaire Cipher</value>
  </data>
  <data name="PluginDescriptionURL" xml:space="preserve">
    <value></value>
  </data>
    <data name="InputStringCaption" xml:space="preserve">
    <value>Text input</value>
  </data>
  <data name="InputStringTooltip" xml:space="preserve">
    <value>Input a string to be processed</value>
  </data>
  <data name="PasswordCaption" xml:space="preserve">
    <value>Password input</value>
  </data>
  <data name="PasswordTooltip" xml:space="preserve">
    <value>Input the password with which the deckstate will be generated</value>
  </data>
  <data name="DeckstateCaption" xml:space="preserve">
    <value>Deckstate input</value>
  </data>
  <data name="DeckstateTooltip" xml:space="preserve">
    <value>Input a deckstate, the sequence represents the deck from top to bottom, each card represented by a number, the highest two being the jokers. Seperate the cards with a comma, e.g. '1,2,3,4'. Maximum number of cards is 54.</value>
  </data>
  <data name="OutputStringCaption" xml:space="preserve">
    <value>Text Output</value>
  </data>
  <data name="OutputStringTooltip" xml:space="preserve">
    <value>The string after processing with the Solitaire cipher</value>
  </data>
  <data name="InitialDeckCaption" xml:space="preserve">
    <value>Initial Deck</value>
  </data>
  <data name="InitialDeckTooltip" xml:space="preserve">
    <value>The initial deck which is used.</value>
  </data>
  <data name="FinalDeckCaption" xml:space="preserve">
    <value>Final Deck</value>
  </data>
  <data name="FinalDeckTooltip" xml:space="preserve">
    <value>The deck after generating the last keystream letter.</value>
  </data>
  <data name="OutputStreamCaption" xml:space="preserve">
    <value>Stream Output</value>
  </data>
  <data name="OutputStreamTooltip" xml:space="preserve">
    <value>The stream used to encrypt or decrypt the text.</value>
  </data>
    <data name="ActionTypeCaption" xml:space="preserve">
    <value>Action Type</value>
  </data>
  <data name="ActionTypeTooltip" xml:space="preserve">
    <value>Choose whether to encrypt or decrypt</value>
  </data>
  <data name="GenerationTypeCaption" xml:space="preserve">
    <value>Deck Generation</value>
  </data>
  <data name="GenerationTypeTooltip" xml:space="preserve">
    <value>Choose the method of generation for the initial deck</value>
  </data>
  <data name="NumberOfCardsCaption" xml:space="preserve">
    <value>Cards</value>
  </data>
  <data name="NumberOfCardsTooltip" xml:space="preserve">
    <value>Select the number of cards in your deck</value>
  </data>
  <data name="StreamTypeCaption" xml:space="preserve">
    <value>Stream Generation</value>
  </data>
  <data name="StreamTypeTooltip" xml:space="preserve">
    <value>Choose whether to automatically or manually generate the stream</value>
  </data>
</root>
