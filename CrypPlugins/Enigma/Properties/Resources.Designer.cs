//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.235
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Cryptool.Enigma.Properties {
    using System;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Cryptool.Enigma.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Operation mode ähnelt.
        /// </summary>
        internal static string ActionCaption {
            get {
                return ResourceManager.GetString("ActionCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select the mode of operation for this Enigma simulator. Note that all Enigmas since Enigma D are working with a reflector and therefore there is not difference between encrypting an decrypting. ähnelt.
        /// </summary>
        internal static string ActionTooltip {
            get {
                return ResourceManager.GetString("ActionTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Analysis options ähnelt.
        /// </summary>
        internal static string AnalysisOptionsGroup {
            get {
                return ResourceManager.GetString("AnalysisOptionsGroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Include rotor I ähnelt.
        /// </summary>
        internal static string AnalysisUseRotorICaption {
            get {
                return ResourceManager.GetString("AnalysisUseRotorICaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Include rotor II ähnelt.
        /// </summary>
        internal static string AnalysisUseRotorIICaption {
            get {
                return ResourceManager.GetString("AnalysisUseRotorIICaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Include rotor III ähnelt.
        /// </summary>
        internal static string AnalysisUseRotorIIICaption {
            get {
                return ResourceManager.GetString("AnalysisUseRotorIIICaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Check if rotor III should be included when analyzing rotors. ähnelt.
        /// </summary>
        internal static string AnalysisUseRotorIIITooltip {
            get {
                return ResourceManager.GetString("AnalysisUseRotorIIITooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Check if rotor II should be included when analyzing rotors. ähnelt.
        /// </summary>
        internal static string AnalysisUseRotorIITooltip {
            get {
                return ResourceManager.GetString("AnalysisUseRotorIITooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Check if rotor I should be included when analyzing rotors. ähnelt.
        /// </summary>
        internal static string AnalysisUseRotorITooltip {
            get {
                return ResourceManager.GetString("AnalysisUseRotorITooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Include rotor IV ähnelt.
        /// </summary>
        internal static string AnalysisUseRotorIVCaption {
            get {
                return ResourceManager.GetString("AnalysisUseRotorIVCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Check if rotor IV should be included when analyzing rotors. ähnelt.
        /// </summary>
        internal static string AnalysisUseRotorIVTooltip {
            get {
                return ResourceManager.GetString("AnalysisUseRotorIVTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Include rotor V ähnelt.
        /// </summary>
        internal static string AnalysisUseRotorVCaption {
            get {
                return ResourceManager.GetString("AnalysisUseRotorVCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Include rotor VI ähnelt.
        /// </summary>
        internal static string AnalysisUseRotorVICaption {
            get {
                return ResourceManager.GetString("AnalysisUseRotorVICaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Include rotor VII ähnelt.
        /// </summary>
        internal static string AnalysisUseRotorVIICaption {
            get {
                return ResourceManager.GetString("AnalysisUseRotorVIICaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Include rotor VIII ähnelt.
        /// </summary>
        internal static string AnalysisUseRotorVIIICaption {
            get {
                return ResourceManager.GetString("AnalysisUseRotorVIIICaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Check if rotor VIII should be included when analyzing rotors. ähnelt.
        /// </summary>
        internal static string AnalysisUseRotorVIIITooltip {
            get {
                return ResourceManager.GetString("AnalysisUseRotorVIIITooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Check if rotor VII should be included when analyzing rotors. ähnelt.
        /// </summary>
        internal static string AnalysisUseRotorVIITooltip {
            get {
                return ResourceManager.GetString("AnalysisUseRotorVIITooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Check if rotor VI should be included when analyzing rotors. ähnelt.
        /// </summary>
        internal static string AnalysisUseRotorVITooltip {
            get {
                return ResourceManager.GetString("AnalysisUseRotorVITooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Check if rotor V should be included when analyzing rotors. ähnelt.
        /// </summary>
        internal static string AnalysisUseRotorVTooltip {
            get {
                return ResourceManager.GetString("AnalysisUseRotorVTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Analyze key (initial rotor pos.) ähnelt.
        /// </summary>
        internal static string AnalyzeKeyCaption {
            get {
                return ResourceManager.GetString("AnalyzeKeyCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die If checked, the analysis tries to detect the correct key. If unchecked, the value from &quot;Key&quot; is used. ähnelt.
        /// </summary>
        internal static string AnalyzeKeyTooltip {
            get {
                return ResourceManager.GetString("AnalyzeKeyTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Analyze plugs ähnelt.
        /// </summary>
        internal static string AnalyzePlugsCaption {
            get {
                return ResourceManager.GetString("AnalyzePlugsCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die If checked, the analysis tries to detect the correct plug settings. If unchecked, the values from the plugboard are used. ähnelt.
        /// </summary>
        internal static string AnalyzePlugsTooltip {
            get {
                return ResourceManager.GetString("AnalyzePlugsTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Analyze rings settings ähnelt.
        /// </summary>
        internal static string AnalyzeRingsCaption {
            get {
                return ResourceManager.GetString("AnalyzeRingsCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die If checked, the analysis tries to detect the correct rings settings. If unchecked, the values from the ring settings are used. ähnelt.
        /// </summary>
        internal static string AnalyzeRingsTooltip {
            get {
                return ResourceManager.GetString("AnalyzeRingsTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Analyze used rotors ähnelt.
        /// </summary>
        internal static string AnalyzeRotorsCaption {
            get {
                return ResourceManager.GetString("AnalyzeRotorsCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die If checked, the analysis tries to detect the correct rotors and their positions. If unchecked, the values from the rotor settings are used. ähnelt.
        /// </summary>
        internal static string AnalyzeRotorsTooltip {
            get {
                return ResourceManager.GetString("AnalyzeRotorsTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Case handling ähnelt.
        /// </summary>
        internal static string CaseHandlingCaption {
            get {
                return ResourceManager.GetString("CaseHandlingCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Preserve case ähnelt.
        /// </summary>
        internal static string CaseHandlingList1 {
            get {
                return ResourceManager.GetString("CaseHandlingList1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Convert to upper ähnelt.
        /// </summary>
        internal static string CaseHandlingList2 {
            get {
                return ResourceManager.GetString("CaseHandlingList2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Convert to lower ähnelt.
        /// </summary>
        internal static string CaseHandlingList3 {
            get {
                return ResourceManager.GetString("CaseHandlingList3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die What should be done with upper and lower case letters? ähnelt.
        /// </summary>
        internal static string CaseHandlingTooltip {
            get {
                return ResourceManager.GetString("CaseHandlingTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die n-gram dictionary ähnelt.
        /// </summary>
        internal static string InputGramsCaption {
            get {
                return ResourceManager.GetString("InputGramsCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Dictionary with gram counts (string -&gt; [absolute, percentaged, log2]) ähnelt.
        /// </summary>
        internal static string InputGramsTooltip {
            get {
                return ResourceManager.GetString("InputGramsTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Text input ähnelt.
        /// </summary>
        internal static string InputStringCaption {
            get {
                return ResourceManager.GetString("InputStringCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Input a string to be processed by the Enigma machine ähnelt.
        /// </summary>
        internal static string InputStringTooltip {
            get {
                return ResourceManager.GetString("InputStringTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Involutoric ähnelt.
        /// </summary>
        internal static string InvolutoricCaption {
            get {
                return ResourceManager.GetString("InvolutoricCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The mapping and the inverse mapping are the same, i.e. if A maps to X, the X maps to A. ähnelt.
        /// </summary>
        internal static string InvolutoricTooltip {
            get {
                return ResourceManager.GetString("InvolutoricTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Key (Initial rotor setting) ähnelt.
        /// </summary>
        internal static string KeyCaption {
            get {
                return ResourceManager.GetString("KeyCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Rotor/Ring/Key search method ähnelt.
        /// </summary>
        internal static string KeySearchMethodCaption {
            get {
                return ResourceManager.GetString("KeySearchMethodCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Index of coincidence ähnelt.
        /// </summary>
        internal static string KeySearchMethodList1 {
            get {
                return ResourceManager.GetString("KeySearchMethodList1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die log2-bigram ähnelt.
        /// </summary>
        internal static string KeySearchMethodList2 {
            get {
                return ResourceManager.GetString("KeySearchMethodList2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die log2-trigram ähnelt.
        /// </summary>
        internal static string KeySearchMethodList3 {
            get {
                return ResourceManager.GetString("KeySearchMethodList3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Sinkov unigram ähnelt.
        /// </summary>
        internal static string KeySearchMethodList4 {
            get {
                return ResourceManager.GetString("KeySearchMethodList4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Sinkov bigram ähnelt.
        /// </summary>
        internal static string KeySearchMethodList5 {
            get {
                return ResourceManager.GetString("KeySearchMethodList5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Unigram entropy ähnelt.
        /// </summary>
        internal static string KeySearchMethodList6 {
            get {
                return ResourceManager.GetString("KeySearchMethodList6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Which method should be used to assess the best rotor configuration? ähnelt.
        /// </summary>
        internal static string KeySearchMethodTooltip {
            get {
                return ResourceManager.GetString("KeySearchMethodTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Please provide the initial rotor setting for each rotor, e.g. ABCD. Note that the slowest rotor is on the left and the fastest rotor is on the right. Only the Enigma M4 (&quot;Shark&quot;) uses four rotors. ähnelt.
        /// </summary>
        internal static string KeyTooltip {
            get {
                return ResourceManager.GetString("KeyTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Max. plugs searched ähnelt.
        /// </summary>
        internal static string MaxSearchedPlugsCaption {
            get {
                return ResourceManager.GetString("MaxSearchedPlugsCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select how many plugs should be searched at most. Note that the search algorithm might return less plugs - this number is just an upper limit ähnelt.
        /// </summary>
        internal static string MaxSearchedPlugsTooltip {
            get {
                return ResourceManager.GetString("MaxSearchedPlugsTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Enigma model ähnelt.
        /// </summary>
        internal static string ModelCaption {
            get {
                return ResourceManager.GetString("ModelCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Commercial Enigma A/B - since 1924 ähnelt.
        /// </summary>
        internal static string ModelList1 {
            get {
                return ResourceManager.GetString("ModelList1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Commercial Enigma D ähnelt.
        /// </summary>
        internal static string ModelList2 {
            get {
                return ResourceManager.GetString("ModelList2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Reichsbahn (Rocket) - since 1941 ähnelt.
        /// </summary>
        internal static string ModelList3 {
            get {
                return ResourceManager.GetString("ModelList3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Enigma I / M3 ähnelt.
        /// </summary>
        internal static string ModelList4 {
            get {
                return ResourceManager.GetString("ModelList4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die M4 (Shark) ähnelt.
        /// </summary>
        internal static string ModelList5 {
            get {
                return ResourceManager.GetString("ModelList5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die K-Model ähnelt.
        /// </summary>
        internal static string ModelList6 {
            get {
                return ResourceManager.GetString("ModelList6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die G (Defense model) ähnelt.
        /// </summary>
        internal static string ModelList7 {
            get {
                return ResourceManager.GetString("ModelList7", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Please select which Enigma model you want to use. This settings influences available rotors and their inner cabling. ähnelt.
        /// </summary>
        internal static string ModelTooltip {
            get {
                return ResourceManager.GetString("ModelTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Enigma model ähnelt.
        /// </summary>
        internal static string ModelTPCaption {
            get {
                return ResourceManager.GetString("ModelTPCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Please select which Enigma model you want to use. This settings influences the available rotors and their inner cabling. ähnelt.
        /// </summary>
        internal static string ModelTPTooltip {
            get {
                return ResourceManager.GetString("ModelTPTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Text output ähnelt.
        /// </summary>
        internal static string OutputStringCaption {
            get {
                return ResourceManager.GetString("OutputStringCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The string after processing with the Enigma machine ähnelt.
        /// </summary>
        internal static string OutputStringTooltip {
            get {
                return ResourceManager.GetString("OutputStringTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die A= ähnelt.
        /// </summary>
        internal static string PlugBoardACaption {
            get {
                return ResourceManager.GetString("PlugBoardACaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select the letter for connecting this plug. ähnelt.
        /// </summary>
        internal static string PlugBoardATooltip {
            get {
                return ResourceManager.GetString("PlugBoardATooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die B= ähnelt.
        /// </summary>
        internal static string PlugBoardBCaption {
            get {
                return ResourceManager.GetString("PlugBoardBCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select the letter for connecting this plug. ähnelt.
        /// </summary>
        internal static string PlugBoardBTooltip {
            get {
                return ResourceManager.GetString("PlugBoardBTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Plugboard substitution ähnelt.
        /// </summary>
        internal static string PlugBoardCaption {
            get {
                return ResourceManager.GetString("PlugBoardCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die C= ähnelt.
        /// </summary>
        internal static string PlugBoardCCaption {
            get {
                return ResourceManager.GetString("PlugBoardCCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select the letter for connecting this plug. ähnelt.
        /// </summary>
        internal static string PlugBoardCTooltip {
            get {
                return ResourceManager.GetString("PlugBoardCTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die D= ähnelt.
        /// </summary>
        internal static string PlugBoardDCaption {
            get {
                return ResourceManager.GetString("PlugBoardDCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select the letter for connecting this plug. ähnelt.
        /// </summary>
        internal static string PlugBoardDTooltip {
            get {
                return ResourceManager.GetString("PlugBoardDTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die E= ähnelt.
        /// </summary>
        internal static string PlugBoardECaption {
            get {
                return ResourceManager.GetString("PlugBoardECaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select the letter for connecting this plug. ähnelt.
        /// </summary>
        internal static string PlugBoardETooltip {
            get {
                return ResourceManager.GetString("PlugBoardETooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die F= ähnelt.
        /// </summary>
        internal static string PlugBoardFCaption {
            get {
                return ResourceManager.GetString("PlugBoardFCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select the letter for connecting this plug. ähnelt.
        /// </summary>
        internal static string PlugBoardFTooltip {
            get {
                return ResourceManager.GetString("PlugBoardFTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die G= ähnelt.
        /// </summary>
        internal static string PlugBoardGCaption {
            get {
                return ResourceManager.GetString("PlugBoardGCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Plugboard ähnelt.
        /// </summary>
        internal static string PlugboardGroup {
            get {
                return ResourceManager.GetString("PlugboardGroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select the letter for connecting this plug. ähnelt.
        /// </summary>
        internal static string PlugBoardGTooltip {
            get {
                return ResourceManager.GetString("PlugBoardGTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die H= ähnelt.
        /// </summary>
        internal static string PlugBoardHCaption {
            get {
                return ResourceManager.GetString("PlugBoardHCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select the letter for connecting this plug. ähnelt.
        /// </summary>
        internal static string PlugBoardHTooltip {
            get {
                return ResourceManager.GetString("PlugBoardHTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die I= ähnelt.
        /// </summary>
        internal static string PlugBoardICaption {
            get {
                return ResourceManager.GetString("PlugBoardICaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select the letter for connecting this plug. ähnelt.
        /// </summary>
        internal static string PlugBoardITooltip {
            get {
                return ResourceManager.GetString("PlugBoardITooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die J= ähnelt.
        /// </summary>
        internal static string PlugBoardJCaption {
            get {
                return ResourceManager.GetString("PlugBoardJCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select the letter for connecting this plug. ähnelt.
        /// </summary>
        internal static string PlugBoardJTooltip {
            get {
                return ResourceManager.GetString("PlugBoardJTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die K= ähnelt.
        /// </summary>
        internal static string PlugBoardKCaption {
            get {
                return ResourceManager.GetString("PlugBoardKCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select the letter for connecting this plug. ähnelt.
        /// </summary>
        internal static string PlugBoardKTooltip {
            get {
                return ResourceManager.GetString("PlugBoardKTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die L= ähnelt.
        /// </summary>
        internal static string PlugBoardLCaption {
            get {
                return ResourceManager.GetString("PlugBoardLCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select the letter for connecting this plug. ähnelt.
        /// </summary>
        internal static string PlugBoardLTooltip {
            get {
                return ResourceManager.GetString("PlugBoardLTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die M= ähnelt.
        /// </summary>
        internal static string PlugBoardMCaption {
            get {
                return ResourceManager.GetString("PlugBoardMCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select the letter for connecting this plug. ähnelt.
        /// </summary>
        internal static string PlugBoardMTooltip {
            get {
                return ResourceManager.GetString("PlugBoardMTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die N= ähnelt.
        /// </summary>
        internal static string PlugBoardNCaption {
            get {
                return ResourceManager.GetString("PlugBoardNCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select the letter for connecting this plug. ähnelt.
        /// </summary>
        internal static string PlugBoardNTooltip {
            get {
                return ResourceManager.GetString("PlugBoardNTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die O= ähnelt.
        /// </summary>
        internal static string PlugBoardOCaption {
            get {
                return ResourceManager.GetString("PlugBoardOCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select the letter for connecting this plug. ähnelt.
        /// </summary>
        internal static string PlugBoardOTooltip {
            get {
                return ResourceManager.GetString("PlugBoardOTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die P= ähnelt.
        /// </summary>
        internal static string PlugBoardPCaption {
            get {
                return ResourceManager.GetString("PlugBoardPCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select the letter for connecting this plug. ähnelt.
        /// </summary>
        internal static string PlugBoardPTooltip {
            get {
                return ResourceManager.GetString("PlugBoardPTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Q= ähnelt.
        /// </summary>
        internal static string PlugBoardQCaption {
            get {
                return ResourceManager.GetString("PlugBoardQCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select the letter for connecting this plug. ähnelt.
        /// </summary>
        internal static string PlugBoardQTooltip {
            get {
                return ResourceManager.GetString("PlugBoardQTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die R= ähnelt.
        /// </summary>
        internal static string PlugBoardRCaption {
            get {
                return ResourceManager.GetString("PlugBoardRCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select the letter for connecting this plug. ähnelt.
        /// </summary>
        internal static string PlugBoardRTooltip {
            get {
                return ResourceManager.GetString("PlugBoardRTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die S= ähnelt.
        /// </summary>
        internal static string PlugBoardSCaption {
            get {
                return ResourceManager.GetString("PlugBoardSCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select the letter for connecting this plug. ähnelt.
        /// </summary>
        internal static string PlugBoardSTooltip {
            get {
                return ResourceManager.GetString("PlugBoardSTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die T= ähnelt.
        /// </summary>
        internal static string PlugBoardTCaption {
            get {
                return ResourceManager.GetString("PlugBoardTCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Displays the current substitution ähnelt.
        /// </summary>
        internal static string PlugBoardTooltip {
            get {
                return ResourceManager.GetString("PlugBoardTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select the letter for connecting this plug. ähnelt.
        /// </summary>
        internal static string PlugBoardTTooltip {
            get {
                return ResourceManager.GetString("PlugBoardTTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die U= ähnelt.
        /// </summary>
        internal static string PlugBoardUCaption {
            get {
                return ResourceManager.GetString("PlugBoardUCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select the letter for connecting this plug. ähnelt.
        /// </summary>
        internal static string PlugBoardUTooltip {
            get {
                return ResourceManager.GetString("PlugBoardUTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die V= ähnelt.
        /// </summary>
        internal static string PlugBoardVCaption {
            get {
                return ResourceManager.GetString("PlugBoardVCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select the letter for connecting this plug. ähnelt.
        /// </summary>
        internal static string PlugBoardVTooltip {
            get {
                return ResourceManager.GetString("PlugBoardVTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die W= ähnelt.
        /// </summary>
        internal static string PlugBoardWCaption {
            get {
                return ResourceManager.GetString("PlugBoardWCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select the letter for connecting this plug. ähnelt.
        /// </summary>
        internal static string PlugBoardWTooltip {
            get {
                return ResourceManager.GetString("PlugBoardWTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die X= ähnelt.
        /// </summary>
        internal static string PlugBoardXCaption {
            get {
                return ResourceManager.GetString("PlugBoardXCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select the letter for connecting this plug. ähnelt.
        /// </summary>
        internal static string PlugBoardXTooltip {
            get {
                return ResourceManager.GetString("PlugBoardXTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Y= ähnelt.
        /// </summary>
        internal static string PlugBoardYCaption {
            get {
                return ResourceManager.GetString("PlugBoardYCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select the letter for connecting this plug. ähnelt.
        /// </summary>
        internal static string PlugBoardYTooltip {
            get {
                return ResourceManager.GetString("PlugBoardYTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Z= ähnelt.
        /// </summary>
        internal static string PlugBoardZCaption {
            get {
                return ResourceManager.GetString("PlugBoardZCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select the letter for connecting this plug. ähnelt.
        /// </summary>
        internal static string PlugBoardZTooltip {
            get {
                return ResourceManager.GetString("PlugBoardZTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Enigma ähnelt.
        /// </summary>
        internal static string PluginCaption {
            get {
                return ResourceManager.GetString("PluginCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  ähnelt.
        /// </summary>
        internal static string PluginDescriptionURL {
            get {
                return ResourceManager.GetString("PluginDescriptionURL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Polyalphabetic rotor-cipher machine ähnelt.
        /// </summary>
        internal static string PluginTooltip {
            get {
                return ResourceManager.GetString("PluginTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Plug search method ähnelt.
        /// </summary>
        internal static string PlugSearchMethodCaption {
            get {
                return ResourceManager.GetString("PlugSearchMethodCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Which method should be used to assess the best plugboard configuration? ähnelt.
        /// </summary>
        internal static string PlugSearchMethodTooltip {
            get {
                return ResourceManager.GetString("PlugSearchMethodTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Presentation ähnelt.
        /// </summary>
        internal static string PresentationGroup {
            get {
                return ResourceManager.GetString("PresentationGroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Presentation Speed ähnelt.
        /// </summary>
        internal static string PresentationSpeedCaption {
            get {
                return ResourceManager.GetString("PresentationSpeedCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Change the pace of the presentation ähnelt.
        /// </summary>
        internal static string PresentationSpeedTooltip {
            get {
                return ResourceManager.GetString("PresentationSpeedTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Reflector ähnelt.
        /// </summary>
        internal static string ReflectorCaption {
            get {
                return ResourceManager.GetString("ReflectorCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select the used reflector. If you don&apos;t want to use a reflector, select none here. ähnelt.
        /// </summary>
        internal static string ReflectorTooltip {
            get {
                return ResourceManager.GetString("ReflectorTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Remove all plugs ähnelt.
        /// </summary>
        internal static string ResetPlugboardCaption {
            get {
                return ResourceManager.GetString("ResetPlugboardCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die By pressing this button the plugboard is reset to its empty state, i.e. all plugs are removed ähnelt.
        /// </summary>
        internal static string ResetPlugboardTooltip {
            get {
                return ResourceManager.GetString("ResetPlugboardTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Ring 1 (right) ähnelt.
        /// </summary>
        internal static string Ring1Caption {
            get {
                return ResourceManager.GetString("Ring1Caption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select the the offset for ring 1 ähnelt.
        /// </summary>
        internal static string Ring1Tooltip {
            get {
                return ResourceManager.GetString("Ring1Tooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Ring 2 ähnelt.
        /// </summary>
        internal static string Ring2Caption {
            get {
                return ResourceManager.GetString("Ring2Caption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select the the offset for ring 2 ähnelt.
        /// </summary>
        internal static string Ring2Tooltip {
            get {
                return ResourceManager.GetString("Ring2Tooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Ring 3 ähnelt.
        /// </summary>
        internal static string Ring3Caption {
            get {
                return ResourceManager.GetString("Ring3Caption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select the the offset for ring 3 ähnelt.
        /// </summary>
        internal static string Ring3Tooltip {
            get {
                return ResourceManager.GetString("Ring3Tooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Ring 4 (left) ähnelt.
        /// </summary>
        internal static string Ring4Caption {
            get {
                return ResourceManager.GetString("Ring4Caption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select the the offset for ring 4 ähnelt.
        /// </summary>
        internal static string Ring4Tooltip {
            get {
                return ResourceManager.GetString("Ring4Tooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Ring settings ähnelt.
        /// </summary>
        internal static string RingSettingsGroup {
            get {
                return ResourceManager.GetString("RingSettingsGroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Rotor 1 (fastest/right) ähnelt.
        /// </summary>
        internal static string Rotor1Caption {
            get {
                return ResourceManager.GetString("Rotor1Caption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select the used rotor on the right (fastest) position. ähnelt.
        /// </summary>
        internal static string Rotor1Tooltip {
            get {
                return ResourceManager.GetString("Rotor1Tooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Rotor 2 ähnelt.
        /// </summary>
        internal static string Rotor2Caption {
            get {
                return ResourceManager.GetString("Rotor2Caption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select the used rotor on the second position. ähnelt.
        /// </summary>
        internal static string Rotor2Tooltip {
            get {
                return ResourceManager.GetString("Rotor2Tooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Rotor 3 ähnelt.
        /// </summary>
        internal static string Rotor3Caption {
            get {
                return ResourceManager.GetString("Rotor3Caption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select the used rotor on the third position. ähnelt.
        /// </summary>
        internal static string Rotor3Tooltip {
            get {
                return ResourceManager.GetString("Rotor3Tooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Rotor 4 (slowest/left) ähnelt.
        /// </summary>
        internal static string Rotor4Caption {
            get {
                return ResourceManager.GetString("Rotor4Caption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select the used rotor on the forth position. If you want to use only three rotors, select none here. ähnelt.
        /// </summary>
        internal static string Rotor4Tooltip {
            get {
                return ResourceManager.GetString("Rotor4Tooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Text options ähnelt.
        /// </summary>
        internal static string TextOptionsGroup {
            get {
                return ResourceManager.GetString("TextOptionsGroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Unknown symbol handling ähnelt.
        /// </summary>
        internal static string UnknownSymbolHandlingCaption {
            get {
                return ResourceManager.GetString("UnknownSymbolHandlingCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Ignore (leave unmodified) ähnelt.
        /// </summary>
        internal static string UnknownSymbolHandlingList1 {
            get {
                return ResourceManager.GetString("UnknownSymbolHandlingList1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Remove ähnelt.
        /// </summary>
        internal static string UnknownSymbolHandlingList2 {
            get {
                return ResourceManager.GetString("UnknownSymbolHandlingList2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Replace with \&apos;X\&apos; ähnelt.
        /// </summary>
        internal static string UnknownSymbolHandlingList3 {
            get {
                return ResourceManager.GetString("UnknownSymbolHandlingList3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die What should be done with encountered characters at the input which are not in the alphabet? ähnelt.
        /// </summary>
        internal static string UnknownSymbolHandlingTooltip {
            get {
                return ResourceManager.GetString("UnknownSymbolHandlingTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Used rotors ähnelt.
        /// </summary>
        internal static string UsedRotorsGroup {
            get {
                return ResourceManager.GetString("UsedRotorsGroup", resourceCulture);
            }
        }
    }
}
