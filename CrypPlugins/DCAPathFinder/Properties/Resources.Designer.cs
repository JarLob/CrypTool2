//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DCAPathFinder.Properties {
    using System;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("DCAPathFinder.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Global maximum ähnelt.
        /// </summary>
        public static string AbortingPolicy1 {
            get {
                return ResourceManager.GetString("AbortingPolicy1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Global threshold ähnelt.
        /// </summary>
        public static string AbortingPolicy2 {
            get {
                return ResourceManager.GetString("AbortingPolicy2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Threshold value for abort (best characteristic) ähnelt.
        /// </summary>
        public static string AbortingThresholdBestCharacteristicSearch {
            get {
                return ResourceManager.GetString("AbortingThresholdBestCharacteristicSearch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Determines the probability at which the search for the best characteristic will be aborted. ähnelt.
        /// </summary>
        public static string AbortingThresholdBestCharacteristicSearchToolTip {
            get {
                return ResourceManager.GetString("AbortingThresholdBestCharacteristicSearchToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Threshold value for abort (differential) ähnelt.
        /// </summary>
        public static string AbortingThresholdDifferentialSearch {
            get {
                return ResourceManager.GetString("AbortingThresholdDifferentialSearch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Determines the probability at which the search for characteristics for differential formation is aborted. ähnelt.
        /// </summary>
        public static string AbortingThresholdDifferentialSearchToolTip {
            get {
                return ResourceManager.GetString("AbortingThresholdDifferentialSearchToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Automatic mode ähnelt.
        /// </summary>
        public static string AutomaticMode {
            get {
                return ResourceManager.GetString("AutomaticMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die DCA PfadFinder works in automatic mode. ähnelt.
        /// </summary>
        public static string AutomaticModeHeader {
            get {
                return ResourceManager.GetString("AutomaticModeHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die No user input required in automatic mode ähnelt.
        /// </summary>
        public static string AutomaticModeToolTip {
            get {
                return ResourceManager.GetString("AutomaticModeToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Chapter back ähnelt.
        /// </summary>
        public static string BtnPrevChapter {
            get {
                return ResourceManager.GetString("BtnPrevChapter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Skip chapter ähnelt.
        /// </summary>
        public static string BtnSkipChapter {
            get {
                return ResourceManager.GetString("BtnSkipChapter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die #Characteristics:  ähnelt.
        /// </summary>
        public static string CharacteristicCount {
            get {
                return ResourceManager.GetString("CharacteristicCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Aborting policy ähnelt.
        /// </summary>
        public static string ChoiceAbortingPolicyPolicy {
            get {
                return ResourceManager.GetString("ChoiceAbortingPolicyPolicy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die search options ähnelt.
        /// </summary>
        public static string ChoiceOfAbortingPolicyGroup {
            get {
                return ResourceManager.GetString("ChoiceOfAbortingPolicyGroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die By selecting the aborting policy, the behavior of the search for the best differential is controlled. ähnelt.
        /// </summary>
        public static string ChoiceOfAbortingPolicyToolTop {
            get {
                return ResourceManager.GetString("ChoiceOfAbortingPolicyToolTop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Choice of the cipher ähnelt.
        /// </summary>
        public static string ChoiceOfAlgorithm {
            get {
                return ResourceManager.GetString("ChoiceOfAlgorithm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Tutorial options ähnelt.
        /// </summary>
        public static string ChoiceOfAlgorithmGroup {
            get {
                return ResourceManager.GetString("ChoiceOfAlgorithmGroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die At this point, you can select one of the ciphers contained in the list. This can be examined by differential cryptanalysis. ähnelt.
        /// </summary>
        public static string ChoiceOfAlgorithmToolTop {
            get {
                return ResourceManager.GetString("ChoiceOfAlgorithmToolTop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Search policy ähnelt.
        /// </summary>
        public static string ChoiceOfSearchPolicy {
            get {
                return ResourceManager.GetString("ChoiceOfSearchPolicy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Search options ähnelt.
        /// </summary>
        public static string ChoiceOfSearchPolicyGroup {
            get {
                return ResourceManager.GetString("ChoiceOfSearchPolicyGroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die By selecting a search policy, the behavior of the search for the best differential is controlled. ähnelt.
        /// </summary>
        public static string ChoiceOfSearchPolicyToolTop {
            get {
                return ResourceManager.GetString("ChoiceOfSearchPolicyToolTop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Number of message pairs ähnelt.
        /// </summary>
        public static string ChosenMessagePairsCount {
            get {
                return ResourceManager.GetString("ChosenMessagePairsCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Determines the number of message pairs to be generated. ähnelt.
        /// </summary>
        public static string ChosenMessagePairsCountToolTip {
            get {
                return ResourceManager.GetString("ChosenMessagePairsCountToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Tutorial 1: Cipher 1 (16 bit block size, 2 round keys, 32 bit key length) ähnelt.
        /// </summary>
        public static string Cipher1 {
            get {
                return ResourceManager.GetString("Cipher1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Tutorial 2: Cipher 2 (16 bit block size, 4 round keys, 64 bit key length) ähnelt.
        /// </summary>
        public static string Cipher2 {
            get {
                return ResourceManager.GetString("Cipher2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Tutorial 3: Cipher 3 (16 bit block size, 6 round keys, 96 bit key length) ähnelt.
        /// </summary>
        public static string Cipher3 {
            get {
                return ResourceManager.GetString("Cipher3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Tutorial 4: Cipher 4 (4 bit block size , 4 round keys, 16 bit key length) ähnelt.
        /// </summary>
        public static string Cipher4 {
            get {
                return ResourceManager.GetString("Cipher4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Differential cryptanalysis Options ähnelt.
        /// </summary>
        public static string DCAOptions {
            get {
                return ResourceManager.GetString("DCAOptions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Tutorial 1 uses cipher 1 of the DCA ToyCipher component. This cipher works on 16 bit blocks and uses two 16 bit round keys. One encryption round is executed. In this tutorial both unknown round keys are restored. ähnelt.
        /// </summary>
        public static string DescriptionContent2 {
            get {
                return ResourceManager.GetString("DescriptionContent2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Tutorial 2 uses cipher 2 of the DCA ToyCipher component. This cipher works on 16 bit blocks and uses four 16 bit round keys. Three encryption rounds are executed. In this tutorial all unknown round keys are restored. ähnelt.
        /// </summary>
        public static string DescriptionContent3 {
            get {
                return ResourceManager.GetString("DescriptionContent3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Tutorial 3 uses cipher 3 of the DKA ToyCipher component. This cipher works on 16 bit blocks and uses six 16 bit round keys. Five encryption rounds are executed. In this tutorial all unknown round keys are restored. ähnelt.
        /// </summary>
        public static string DescriptionContent4 {
            get {
                return ResourceManager.GetString("DescriptionContent4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Description of the tutorials ähnelt.
        /// </summary>
        public static string DescriptionHeader {
            get {
                return ResourceManager.GetString("DescriptionHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Tutorial 1 ähnelt.
        /// </summary>
        public static string DescriptionSubHeader1 {
            get {
                return ResourceManager.GetString("DescriptionSubHeader1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Tutorial 2 ähnelt.
        /// </summary>
        public static string DescriptionSubHeader2 {
            get {
                return ResourceManager.GetString("DescriptionSubHeader2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Tutorial 3 ähnelt.
        /// </summary>
        public static string DescriptionSubHeader3 {
            get {
                return ResourceManager.GetString("DescriptionSubHeader3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die display options ähnelt.
        /// </summary>
        public static string DisplayOptions {
            get {
                return ResourceManager.GetString("DisplayOptions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die End: ähnelt.
        /// </summary>
        public static string EndTime {
            get {
                return ResourceManager.GetString("EndTime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Expected difference ähnelt.
        /// </summary>
        public static string ExpectedDifferential {
            get {
                return ResourceManager.GetString("ExpectedDifferential", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Output for the expected difference ähnelt.
        /// </summary>
        public static string ExpectedDifferentialToolTip {
            get {
                return ResourceManager.GetString("ExpectedDifferentialToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Input difference ähnelt.
        /// </summary>
        public static string InputDiffHeader1 {
            get {
                return ResourceManager.GetString("InputDiffHeader1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die u ähnelt.
        /// </summary>
        public static string InputDiffR1Header1Run1 {
            get {
                return ResourceManager.GetString("InputDiffR1Header1Run1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 1 ähnelt.
        /// </summary>
        public static string InputDiffR1Header1Run2 {
            get {
                return ResourceManager.GetString("InputDiffR1Header1Run2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die u ähnelt.
        /// </summary>
        public static string InputDiffR2Header1Run1 {
            get {
                return ResourceManager.GetString("InputDiffR2Header1Run1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 2 ähnelt.
        /// </summary>
        public static string InputDiffR2Header1Run2 {
            get {
                return ResourceManager.GetString("InputDiffR2Header1Run2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die u ähnelt.
        /// </summary>
        public static string InputDiffR3Header1Run1 {
            get {
                return ResourceManager.GetString("InputDiffR3Header1Run1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 3 ähnelt.
        /// </summary>
        public static string InputDiffR3Header1Run2 {
            get {
                return ResourceManager.GetString("InputDiffR3Header1Run2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die u ähnelt.
        /// </summary>
        public static string InputDiffR4Header1Run1 {
            get {
                return ResourceManager.GetString("InputDiffR4Header1Run1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 4 ähnelt.
        /// </summary>
        public static string InputDiffR4Header1Run2 {
            get {
                return ResourceManager.GetString("InputDiffR4Header1Run2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die u ähnelt.
        /// </summary>
        public static string InputDiffR5Header1Run1 {
            get {
                return ResourceManager.GetString("InputDiffR5Header1Run1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 5 ähnelt.
        /// </summary>
        public static string InputDiffR5Header1Run2 {
            get {
                return ResourceManager.GetString("InputDiffR5Header1Run2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die message pair count ähnelt.
        /// </summary>
        public static string MessageCount {
            get {
                return ResourceManager.GetString("MessageCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Output for the message pair count ähnelt.
        /// </summary>
        public static string MessageCountToolTip {
            get {
                return ResourceManager.GetString("MessageCountToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die No characteristics found. Please check the settings for the search and abort policy ähnelt.
        /// </summary>
        public static string NoCharacteristicFoundError {
            get {
                return ResourceManager.GetString("NoCharacteristicFoundError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die v ähnelt.
        /// </summary>
        public static string OutputDiffR1Header1Run1 {
            get {
                return ResourceManager.GetString("OutputDiffR1Header1Run1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 1 ähnelt.
        /// </summary>
        public static string OutputDiffR1Header1Run2 {
            get {
                return ResourceManager.GetString("OutputDiffR1Header1Run2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die v ähnelt.
        /// </summary>
        public static string OutputDiffR2Header1Run1 {
            get {
                return ResourceManager.GetString("OutputDiffR2Header1Run1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 2 ähnelt.
        /// </summary>
        public static string OutputDiffR2Header1Run2 {
            get {
                return ResourceManager.GetString("OutputDiffR2Header1Run2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die v ähnelt.
        /// </summary>
        public static string OutputDiffR3Header1Run1 {
            get {
                return ResourceManager.GetString("OutputDiffR3Header1Run1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 3 ähnelt.
        /// </summary>
        public static string OutputDiffR3Header1Run2 {
            get {
                return ResourceManager.GetString("OutputDiffR3Header1Run2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die v ähnelt.
        /// </summary>
        public static string OutputDiffR4Header1Run1 {
            get {
                return ResourceManager.GetString("OutputDiffR4Header1Run1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 4 ähnelt.
        /// </summary>
        public static string OutputDiffR4Header1Run2 {
            get {
                return ResourceManager.GetString("OutputDiffR4Header1Run2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Welcome to the differential cryptanalysis (DCA) tutorial. This method for the analysis of round-based symmetric block ciphers aims at recovering single bits up to complete round keys. This procedure was published in 1991 by the two Israeli researchers Eli Biham and Adi Shamir. ähnelt.
        /// </summary>
        public static string OverviewContent1 {
            get {
                return ResourceManager.GetString("OverviewContent1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die This tutorial covers the DCA in three parts. Part 1 conveys the basic idea of the DCA by means of a cipher with an encryption round. Part 2 deepens this idea using a cipher with three encryption rounds. Part 3 deepens the knowledge by increasing the complexity of the cipher to five encryption rounds. ähnelt.
        /// </summary>
        public static string OverviewContent2 {
            get {
                return ResourceManager.GetString("OverviewContent2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die In the configuration of this component the number of the tutorial and the tutorial mode can be selected. ähnelt.
        /// </summary>
        public static string OverviewContent3 {
            get {
                return ResourceManager.GetString("OverviewContent3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Have fun trying out and breaking the ciphers! ähnelt.
        /// </summary>
        public static string OverviewContent4 {
            get {
                return ResourceManager.GetString("OverviewContent4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die (This introduction can be skipped by starting the workspace) ähnelt.
        /// </summary>
        public static string OverviewContent5 {
            get {
                return ResourceManager.GetString("OverviewContent5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Differential Cryptanalysis Tutorial ähnelt.
        /// </summary>
        public static string OverviewHeader {
            get {
                return ResourceManager.GetString("OverviewHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Preamble ähnelt.
        /// </summary>
        public static string OverviewPreambleHeader {
            get {
                return ResourceManager.GetString("OverviewPreambleHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Differential ähnelt.
        /// </summary>
        public static string Path {
            get {
                return ResourceManager.GetString("Path", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Describes the flow of differences through a cipher ähnelt.
        /// </summary>
        public static string PathToolTip {
            get {
                return ResourceManager.GetString("PathToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Speed options ähnelt.
        /// </summary>
        public static string PerformanceSettingsGroup {
            get {
                return ResourceManager.GetString("PerformanceSettingsGroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die DCA PathFinder ähnelt.
        /// </summary>
        public static string PluginCaption {
            get {
                return ResourceManager.GetString("PluginCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die This component searches for differentials in a symmetric block cipher depending on parameters specified by the user. ähnelt.
        /// </summary>
        public static string PluginTooltip {
            get {
                return ResourceManager.GetString("PluginTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Tutorial mode ähnelt.
        /// </summary>
        public static string PresentationMode {
            get {
                return ResourceManager.GetString("PresentationMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die If tutorial mode is activated, a presentation with information on differential cryptanalysis is displayed for each tutorial. ähnelt.
        /// </summary>
        public static string PresentationModeToolTip {
            get {
                return ResourceManager.GetString("PresentationModeToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Probability ähnelt.
        /// </summary>
        public static string ProbabilityHeader {
            get {
                return ResourceManager.GetString("ProbabilityHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Round 1 ähnelt.
        /// </summary>
        public static string R1 {
            get {
                return ResourceManager.GetString("R1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Round 2 ähnelt.
        /// </summary>
        public static string R2 {
            get {
                return ResourceManager.GetString("R2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Round 3 ähnelt.
        /// </summary>
        public static string R3 {
            get {
                return ResourceManager.GetString("R3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Round 4 ähnelt.
        /// </summary>
        public static string R4 {
            get {
                return ResourceManager.GetString("R4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Round 5 ähnelt.
        /// </summary>
        public static string R5 {
            get {
                return ResourceManager.GetString("R5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Trigger ähnelt.
        /// </summary>
        public static string ReadyInput {
            get {
                return ResourceManager.GetString("ReadyInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The trigger input signals to the DCA PathFinder component that the DCA KeyRecovery component has completed its calculation. ähnelt.
        /// </summary>
        public static string ReadyInputToolTip {
            get {
                return ResourceManager.GetString("ReadyInputToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Attacked encryption round: ähnelt.
        /// </summary>
        public static string Round {
            get {
                return ResourceManager.GetString("Round", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Attacked S-boxes: ähnelt.
        /// </summary>
        public static string SBoxes {
            get {
                return ResourceManager.GetString("SBoxes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die At least one S-box must be marked to continue the attack. ähnelt.
        /// </summary>
        public static string SBoxWarning {
            get {
                return ResourceManager.GetString("SBoxWarning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Configuration ähnelt.
        /// </summary>
        public static string SearchConfiguration {
            get {
                return ResourceManager.GetString("SearchConfiguration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Search policy: ähnelt.
        /// </summary>
        public static string SearchPolicy {
            get {
                return ResourceManager.GetString("SearchPolicy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Best characteristic (heuristic), then differential search ähnelt.
        /// </summary>
        public static string SearchPolicy1 {
            get {
                return ResourceManager.GetString("SearchPolicy1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Best characteristic (depth search), then differential search ähnelt.
        /// </summary>
        public static string SearchPolicy2 {
            get {
                return ResourceManager.GetString("SearchPolicy2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die All characteristics by depth search ähnelt.
        /// </summary>
        public static string SearchPolicy3 {
            get {
                return ResourceManager.GetString("SearchPolicy3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Result ähnelt.
        /// </summary>
        public static string SearchResults {
            get {
                return ResourceManager.GetString("SearchResults", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The tutorial beginns when you start the workspace. ähnelt.
        /// </summary>
        public static string StartMaskContent1 {
            get {
                return ResourceManager.GetString("StartMaskContent1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die In this template, the  ähnelt.
        /// </summary>
        public static string StartMaskContent2Run1 {
            get {
                return ResourceManager.GetString("StartMaskContent2Run1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Tutorial {0} ähnelt.
        /// </summary>
        public static string StartMaskContent2Run2 {
            get {
                return ResourceManager.GetString("StartMaskContent2Run2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  is selected. ähnelt.
        /// </summary>
        public static string StartMaskContent2Run3 {
            get {
                return ResourceManager.GetString("StartMaskContent2Run3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Ready for execution ähnelt.
        /// </summary>
        public static string StartMaskHeader {
            get {
                return ResourceManager.GetString("StartMaskHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Start: ähnelt.
        /// </summary>
        public static string StartTime {
            get {
                return ResourceManager.GetString("StartTime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Threads to be used ähnelt.
        /// </summary>
        public static string ThreadCount {
            get {
                return ResourceManager.GetString("ThreadCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Specifies the number of threads to use for the calculation. ähnelt.
        /// </summary>
        public static string ThreadCountToolTip {
            get {
                return ResourceManager.GetString("ThreadCountToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The maximum number of threads for your system is {0} threads. This number is limited by your processor. ähnelt.
        /// </summary>
        public static string ThreadSettingError {
            get {
                return ResourceManager.GetString("ThreadSettingError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 2. Differential cryptanalysis of cipher 1 ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisHeader {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The value of ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide10Content1 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide10Content1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die is already known. As indicated on the previous page, the values of k ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide10Content2Run1 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide10Content2Run1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 1 ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide10Content2Run2 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide10Content2Run2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  guessed. Here is explained how to limit the set of possible correct values: The cryptanalyst tries all values t of k ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide10Content2Run3 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide10Content2Run3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 1 ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide10Content2Run4 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide10Content2Run4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  through and if ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide10Content2Run5 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide10Content2Run5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die holds true, t is considered a candidate for k ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide10Content3Run1 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide10Content3Run1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 1 ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide10Content3Run2 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide10Content3Run2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die . If more than one candidate remains at the end, the attack is repeated with new pairs of plaintext and ciphertext. ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide10Content3Run3 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide10Content3Run3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die By clicking the &quot;Next&quot; button again, differential cryptanalysis can be performed on cipher 1 in the &quot;DCA KeyRecovery&quot; component. ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide10Content4 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide10Content4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die After successful recovery of k ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide10Content4Run1 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide10Content4Run1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 1 ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide10Content4Run2 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide10Content4Run2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  can k ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide10Content4Run3 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide10Content4Run3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 0 ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide10Content4Run4 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide10Content4Run4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  be calculated immediately. This can be done by calculating the equation ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide10Content4Run5 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide10Content4Run5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die be determined. ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide10Content5Run1 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide10Content5Run1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Differential cryptanalysis of cipher 1 ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide10Header {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide10Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Here we apply the idea of the DCA to Chiffre 1. The structure of a cipher is usually public, so that all components and their functionality are known. The security of a cipher should never be based on the secrecy of the construction, but on the secrecy of the key. This requirement is also called Kerckhoff&apos;s principle. ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide1Content1 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide1Content1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Cipher 1 ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide1Content2Run1 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide1Content2Run1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  consists of key addition and substitution. The structure can be viewed in the DCA ToyCipher component. We now try to find the two unknown round keys k ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide1Content2Run2 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide1Content2Run2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 0 ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide1Content2Run3 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide1Content2Run3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die and k ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide1Content2Run4 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide1Content2Run4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 1 ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide1Content2Run5 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide1Content2Run5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  to recover. To do this, we look at the individual steps of encryption. First the key k ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide1Content2Run6 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide1Content2Run6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 0 ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide1Content2Run7 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide1Content2Run7", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  is added to the input block m: ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide1Content2Run8 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide1Content2Run8", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The intermediate result u is then substituted by the S-boxes: ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide1Content3 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide1Content3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Differential cryptanalysis of cipher 1 ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide1Header {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide1Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Finally, a key addition takes place again (intermediate result v is indicated with k ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide2Content1Run1 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide2Content1Run1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 1 ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide2Content1Run2 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide2Content1Run2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  added): ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide2Content1Run3 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide2Content1Run3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The internal variables u and v of the cipher are of great importance in the following, because we use these intermediate results to recover the unknown keys k ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide2Content2Run1 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide2Content2Run1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 1 ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide2Content2Run2 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide2Content2Run2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  and k ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide2Content2Run3 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide2Content2Run3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 0 ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide2Content2Run4 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide2Content2Run4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die . ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide2Content2Run5 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide2Content2Run5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Differential cryptanalysis of cipher 1 ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide2Header {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide2Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The following figure summarizes the encryption process outlined above on slides 11 to 16. ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide3Content1 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide3Content1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Differential cryptanalysis of cipher 1 ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide3Header {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide3Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The following figure summarizes the encryption process outlined above on slides 11 to 16. ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide4Content1 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide4Content1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Differential cryptanalysis of cipher 1 ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide4Header {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide4Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die However, these values cannot be directly compared with the internal values u ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide9bContent6Run1 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide9bContent6Run1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 1 ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide9bContent6Run2 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide9bContent6Run2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  and u ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide9bContent6Run3 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide9bContent6Run3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 2 ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide9bContent6Run4 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide9bContent6Run4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  as these are unknown. ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide9bContent6Run5 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide9bContent6Run5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die From equation (1) it follows that if the round key is correctly guessed k ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide9bContent7Run1 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide9bContent7Run1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 1 ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide9bContent7Run2 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide9bContent7Run2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  the following applies: ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide9bContent7Run3 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide9bContent7Run3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The cryptanalyst knows the parameters m and c, but not the internal intermediate values u and v, since k ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide9Content1Run1 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide9Content1Run1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 0 ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide9Content1Run2 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide9Content1Run2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  and k ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide9Content1Run3 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide9Content1Run3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 1 ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide9Content1Run4 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide9Content1Run4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  are unknown. However, the cryptanalyst can calculate the difference between the two internal u intermediate values from the difference between the two plaintexts. In the following we consider two messages m ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide9Content1Run5 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide9Content1Run5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 1 ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide9Content1Run6 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide9Content1Run6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  and m ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide9Content1Run7 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide9Content1Run7", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 2 ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide9Content1Run8 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide9Content1Run8", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  and build their difference: ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide9Content1Run9 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide9Content1Run9", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die This knowledge can be used to calculate k ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide9Content2Run1 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide9Content2Run1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 2 ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide9Content2Run10 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide9Content2Run10", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die ). According to equation (1), the difference of the u-values is equal to the difference of m ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide9Content2Run11 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide9Content2Run11", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 1 ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide9Content2Run12 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide9Content2Run12", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  and m ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide9Content2Run13 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide9Content2Run13", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 2 ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide9Content2Run14 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide9Content2Run14", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die . Next, k ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide9Content2Run15 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide9Content2Run15", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 1 ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide9Content2Run16 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide9Content2Run16", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  is &quot;advised&quot; so that from ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide9Content2Run17 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide9Content2Run17", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 1 ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide9Content2Run2 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide9Content2Run2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die . For this we will consider two pairs of plaintext and ciphertext (m ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide9Content2Run3 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide9Content2Run3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 1 ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide9Content2Run4 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide9Content2Run4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die , c ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide9Content2Run5 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide9Content2Run5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 1 ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide9Content2Run6 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide9Content2Run6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die ) and (m ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide9Content2Run7 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide9Content2Run7", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 2 ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide9Content2Run8 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide9Content2Run8", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die , c ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide9Content2Run9 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide9Content2Run9", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die the values of v ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide9Content3Run1 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide9Content3Run1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 1 ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide9Content3Run2 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide9Content3Run2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  and v ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide9Content3Run3 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide9Content3Run3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 2 ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide9Content3Run4 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide9Content3Run4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  can be calculated. ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide9Content3Run5 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide9Content3Run5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Because the functionality of the S-Box is public and therefore also invertible, the cryptoanalyst can calculate with ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide9Content4Run1 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide9Content4Run1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die the values of ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide9Content5Run1 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide9Content5Run1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die   ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide9Content6Run1 {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide9Content6Run1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Differential cryptanalysis of cipher 1 ähnelt.
        /// </summary>
        public static string Tutorial1DifferentialCryptanalysisSlide9Header {
            get {
                return ResourceManager.GetString("Tutorial1DifferentialCryptanalysisSlide9Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 1. Introduction ähnelt.
        /// </summary>
        public static string Tutorial1IntroductionHeader {
            get {
                return ResourceManager.GetString("Tutorial1IntroductionHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die In this section we consider the basic idea of differential cryptanalysis. ähnelt.
        /// </summary>
        public static string Tutorial1IntroductionSlide1Content1Run1 {
            get {
                return ResourceManager.GetString("Tutorial1IntroductionSlide1Content1Run1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Most modern round-based block ciphers consist of three basic operations: key addition, substitution, and permutation. Cipher 1 consists of key addition and substitution. Ciphers 2 and 3 also contain a permutation. ähnelt.
        /// </summary>
        public static string Tutorial1IntroductionSlide1Content1Run2 {
            get {
                return ResourceManager.GetString("Tutorial1IntroductionSlide1Content1Run2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The XOR operation (exclusive OR) is usually used for key addition. The XOR operation is a two-digit operator that can be described by the following value table: ähnelt.
        /// </summary>
        public static string Tutorial1IntroductionSlide1Content2 {
            get {
                return ResourceManager.GetString("Tutorial1IntroductionSlide1Content2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Input bit A ähnelt.
        /// </summary>
        public static string Tutorial1IntroductionSlide1DataColHeader1 {
            get {
                return ResourceManager.GetString("Tutorial1IntroductionSlide1DataColHeader1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Input bit B ähnelt.
        /// </summary>
        public static string Tutorial1IntroductionSlide1DataColHeader2 {
            get {
                return ResourceManager.GetString("Tutorial1IntroductionSlide1DataColHeader2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die result bit ähnelt.
        /// </summary>
        public static string Tutorial1IntroductionSlide1DataColHeader3 {
            get {
                return ResourceManager.GetString("Tutorial1IntroductionSlide1DataColHeader3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Introduction ähnelt.
        /// </summary>
        public static string Tutorial1IntroductionSlide1Header {
            get {
                return ResourceManager.GetString("Tutorial1IntroductionSlide1Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die If the XOR operation is used to encrypt a message m with key k, the ciphertext c is obtained as follows: ähnelt.
        /// </summary>
        public static string Tutorial1IntroductionSlide2Content1 {
            get {
                return ResourceManager.GetString("Tutorial1IntroductionSlide2Content1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The basic idea of differential cryptanalysis is to use the effect of a property of the XOR operation by using the key k twice. If the key addition is performed twice, the following applies: ähnelt.
        /// </summary>
        public static string Tutorial1IntroductionSlide2Content2 {
            get {
                return ResourceManager.GetString("Tutorial1IntroductionSlide2Content2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die We get back the original message m. ähnelt.
        /// </summary>
        public static string Tutorial1IntroductionSlide2Content3Run1 {
            get {
                return ResourceManager.GetString("Tutorial1IntroductionSlide2Content3Run1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The XOR operator is often referred to as the difference operator. This name is also used in this tutorial. ähnelt.
        /// </summary>
        public static string Tutorial1IntroductionSlide2Content3Run2 {
            get {
                return ResourceManager.GetString("Tutorial1IntroductionSlide2Content3Run2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Differential cryptanalysis is a so-called &quot;chosen plaintext attack&quot;, which means that the cryptanalyst can select plaintext messages and encrypt them to have matching plaintext/ciphertext pairs. ähnelt.
        /// </summary>
        public static string Tutorial1IntroductionSlide2Content4 {
            get {
                return ResourceManager.GetString("Tutorial1IntroductionSlide2Content4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Introduction ähnelt.
        /// </summary>
        public static string Tutorial1IntroductionSlide2Header {
            get {
                return ResourceManager.GetString("Tutorial1IntroductionSlide2Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die We take advantage of the idea of using the key twice by using pairs of messages m ähnelt.
        /// </summary>
        public static string Tutorial1IntroductionSlide3Content1Run1 {
            get {
                return ResourceManager.GetString("Tutorial1IntroductionSlide3Content1Run1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 1 ähnelt.
        /// </summary>
        public static string Tutorial1IntroductionSlide3Content1Run2 {
            get {
                return ResourceManager.GetString("Tutorial1IntroductionSlide3Content1Run2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  and m ähnelt.
        /// </summary>
        public static string Tutorial1IntroductionSlide3Content1Run3 {
            get {
                return ResourceManager.GetString("Tutorial1IntroductionSlide3Content1Run3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 2 ähnelt.
        /// </summary>
        public static string Tutorial1IntroductionSlide3Content1Run4 {
            get {
                return ResourceManager.GetString("Tutorial1IntroductionSlide3Content1Run4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die . If the difference between the ciphertexts is now formed, the following holds true: ähnelt.
        /// </summary>
        public static string Tutorial1IntroductionSlide3Content1Run5 {
            get {
                return ResourceManager.GetString("Tutorial1IntroductionSlide3Content1Run5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die It follows: ähnelt.
        /// </summary>
        public static string Tutorial1IntroductionSlide3Content2 {
            get {
                return ResourceManager.GetString("Tutorial1IntroductionSlide3Content2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die We obtain the difference of the plaintexts by calculating the difference of the ciphertexts. This can be used to obtain information about the round keys at DCA. ähnelt.
        /// </summary>
        public static string Tutorial1IntroductionSlide3Content3 {
            get {
                return ResourceManager.GetString("Tutorial1IntroductionSlide3Content3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Introduction ähnelt.
        /// </summary>
        public static string Tutorial1IntroductionSlide3Header {
            get {
                return ResourceManager.GetString("Tutorial1IntroductionSlide3Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The DCA is now continued in the DCA KeyRecovery component. ähnelt.
        /// </summary>
        public static string Tutorial1LastSlideContent1 {
            get {
                return ResourceManager.GetString("Tutorial1LastSlideContent1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die In the DCA KeyRecovery component, you can now recover the round keys k ähnelt.
        /// </summary>
        public static string Tutorial1LastSlideContent2Run1 {
            get {
                return ResourceManager.GetString("Tutorial1LastSlideContent2Run1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 1 ähnelt.
        /// </summary>
        public static string Tutorial1LastSlideContent2Run2 {
            get {
                return ResourceManager.GetString("Tutorial1LastSlideContent2Run2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  and k ähnelt.
        /// </summary>
        public static string Tutorial1LastSlideContent2Run3 {
            get {
                return ResourceManager.GetString("Tutorial1LastSlideContent2Run3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 0 ähnelt.
        /// </summary>
        public static string Tutorial1LastSlideContent2Run4 {
            get {
                return ResourceManager.GetString("Tutorial1LastSlideContent2Run4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die . ähnelt.
        /// </summary>
        public static string Tutorial1LastSlideContent2Run5 {
            get {
                return ResourceManager.GetString("Tutorial1LastSlideContent2Run5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die To do this, you must click on the ähnelt.
        /// </summary>
        public static string Tutorial1LastSlideContent3Run1 {
            get {
                return ResourceManager.GetString("Tutorial1LastSlideContent3Run1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Start-Button ähnelt.
        /// </summary>
        public static string Tutorial1LastSlideContent3Run2 {
            get {
                return ResourceManager.GetString("Tutorial1LastSlideContent3Run2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die in the DCA KeyRecovery component. ähnelt.
        /// </summary>
        public static string Tutorial1LastSlideContent3Run3 {
            get {
                return ResourceManager.GetString("Tutorial1LastSlideContent3Run3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Tutorial 1 finished ähnelt.
        /// </summary>
        public static string Tutorial1LastSlideHeader {
            get {
                return ResourceManager.GetString("Tutorial1LastSlideHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 3. Performing differential cryptanalysis ähnelt.
        /// </summary>
        public static string Tutorial1PracticalDifferentialCryptanalysisHeader {
            get {
                return ResourceManager.GetString("Tutorial1PracticalDifferentialCryptanalysisHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die In the DCA against cipher 1, the round keys k ähnelt.
        /// </summary>
        public static string Tutorial1PracticalDifferentialCryptanalysisSlide1Content1Run1 {
            get {
                return ResourceManager.GetString("Tutorial1PracticalDifferentialCryptanalysisSlide1Content1Run1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 1 ähnelt.
        /// </summary>
        public static string Tutorial1PracticalDifferentialCryptanalysisSlide1Content1Run2 {
            get {
                return ResourceManager.GetString("Tutorial1PracticalDifferentialCryptanalysisSlide1Content1Run2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  and k ähnelt.
        /// </summary>
        public static string Tutorial1PracticalDifferentialCryptanalysisSlide1Content1Run3 {
            get {
                return ResourceManager.GetString("Tutorial1PracticalDifferentialCryptanalysisSlide1Content1Run3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 0 ähnelt.
        /// </summary>
        public static string Tutorial1PracticalDifferentialCryptanalysisSlide1Content1Run4 {
            get {
                return ResourceManager.GetString("Tutorial1PracticalDifferentialCryptanalysisSlide1Content1Run4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  will be attacked. The attack proceeds as described in this tutorial. ähnelt.
        /// </summary>
        public static string Tutorial1PracticalDifferentialCryptanalysisSlide1Content1Run5 {
            get {
                return ResourceManager.GetString("Tutorial1PracticalDifferentialCryptanalysisSlide1Content1Run5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Click on &quot;Next&quot; (right arrow below) to start the attack. The control is passed on to the DCA KeyRecovery component. ähnelt.
        /// </summary>
        public static string Tutorial1PracticalDifferentialCryptanalysisSlide1Content2 {
            get {
                return ResourceManager.GetString("Tutorial1PracticalDifferentialCryptanalysisSlide1Content2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Performing differential cryptanalysis ähnelt.
        /// </summary>
        public static string Tutorial1PracticalDifferentialCryptanalysisSlide1Header {
            get {
                return ResourceManager.GetString("Tutorial1PracticalDifferentialCryptanalysisSlide1Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Tutorial ähnelt.
        /// </summary>
        public static string Tutorial1TitleHeaderRun1 {
            get {
                return ResourceManager.GetString("Tutorial1TitleHeaderRun1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Differential cryptanalysis of symmetric block ciphers ähnelt.
        /// </summary>
        public static string Tutorial1TitleHeaderRun2 {
            get {
                return ResourceManager.GetString("Tutorial1TitleHeaderRun2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 2. Analysis of cipher 2 ähnelt.
        /// </summary>
        public static string Tutorial2AnalysisHeader {
            get {
                return ResourceManager.GetString("Tutorial2AnalysisHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 3. Analysis of the S-boxes ähnelt.
        /// </summary>
        public static string Tutorial2AnalysisOfSBoxHeader {
            get {
                return ResourceManager.GetString("Tutorial2AnalysisOfSBoxHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Due to the key addition, the S-box behaves non-linear. A guess attempt for k3 cannot be checked directly. ähnelt.
        /// </summary>
        public static string Tutorial2AnalysisOfSBoxSlide1Content1 {
            get {
                return ResourceManager.GetString("Tutorial2AnalysisOfSBoxSlide1Content1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die All S-boxes of cipher 2 behave identically. For this reason it is sufficient to analyze the functionality of a single S-box. Basically it is possible to consider 4 parallel S-boxes as one big S-box, but this would increase the analysis effort. The S-box receives 4 bits as input and also outputs 4 bits as output. The 4 input bits are replaced by 4 other output bits. ähnelt.
        /// </summary>
        public static string Tutorial2AnalysisOfSBoxSlide1Content2 {
            get {
                return ResourceManager.GetString("Tutorial2AnalysisOfSBoxSlide1Content2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Remember: Differential cryptanalysis works with differences of messages. In order to examine the S-box, all combinations of input plaintext are considered and their differences are formed. For each pair, the plaintexts are entered individually into the S-box and then the difference of the substituted outputs is calculated. The transitions from input to output difference are noted. ähnelt.
        /// </summary>
        public static string Tutorial2AnalysisOfSBoxSlide1Content3 {
            get {
                return ResourceManager.GetString("Tutorial2AnalysisOfSBoxSlide1Content3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The table on the next page visualizes this procedure. There is one line for each possible input difference. There is one column for each possible output difference. The number of occurrences of a particular difference is described by the entries in the table. ähnelt.
        /// </summary>
        public static string Tutorial2AnalysisOfSBoxSlide1Content4 {
            get {
                return ResourceManager.GetString("Tutorial2AnalysisOfSBoxSlide1Content4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die To calculate the probability of a difference occurring, the number must be divided by 16. ähnelt.
        /// </summary>
        public static string Tutorial2AnalysisOfSBoxSlide1Content5 {
            get {
                return ResourceManager.GetString("Tutorial2AnalysisOfSBoxSlide1Content5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Analysis of the S-boxes ähnelt.
        /// </summary>
        public static string Tutorial2AnalysisOfSBoxSlide1Header {
            get {
                return ResourceManager.GetString("Tutorial2AnalysisOfSBoxSlide1Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The difference distribution table is shown below: ähnelt.
        /// </summary>
        public static string Tutorial2AnalysisOfSBoxSlide2Content1 {
            get {
                return ResourceManager.GetString("Tutorial2AnalysisOfSBoxSlide2Content1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Analysis of the S-boxes ähnelt.
        /// </summary>
        public static string Tutorial2AnalysisOfSBoxSlide2Header {
            get {
                return ResourceManager.GetString("Tutorial2AnalysisOfSBoxSlide2Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Input difference ähnelt.
        /// </summary>
        public static string Tutorial2AnalysisOfSBoxSlide2InputDifference {
            get {
                return ResourceManager.GetString("Tutorial2AnalysisOfSBoxSlide2InputDifference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Output difference ähnelt.
        /// </summary>
        public static string Tutorial2AnalysisOfSBoxSlide2OutputDifference {
            get {
                return ResourceManager.GetString("Tutorial2AnalysisOfSBoxSlide2OutputDifference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The input and output differences and the entries of the difference distribution table are displayed in hexadecimal format. ähnelt.
        /// </summary>
        public static string Tutorial2AnalysisOfSBoxSlide3Content1 {
            get {
                return ResourceManager.GetString("Tutorial2AnalysisOfSBoxSlide3Content1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die A 4 bit S-box has 16 different inputs and 16 different outputs. If 2 messages are combined to a message pair with disjoint differences, 256 different transitions of differences can be observed. ähnelt.
        /// </summary>
        public static string Tutorial2AnalysisOfSBoxSlide3Content2 {
            get {
                return ResourceManager.GetString("Tutorial2AnalysisOfSBoxSlide3Content2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die An important observation is that there are differences that occur more frequently than others. There are also differences that do not occur at all. For example, the input difference 8 is mapped to the output difference D 8 times. ähnelt.
        /// </summary>
        public static string Tutorial2AnalysisOfSBoxSlide3Content3 {
            get {
                return ResourceManager.GetString("Tutorial2AnalysisOfSBoxSlide3Content3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The distribution of differences is obviously not equally distributed. In practice, S-boxes are not perfect. The cryptanalyst makes use of this fact. Particularly high probabilities help with differential cryptanalysis. ähnelt.
        /// </summary>
        public static string Tutorial2AnalysisOfSBoxSlide3Content4 {
            get {
                return ResourceManager.GetString("Tutorial2AnalysisOfSBoxSlide3Content4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Analysis of the S-boxes ähnelt.
        /// </summary>
        public static string Tutorial2AnalysisOfSBoxSlide3Header {
            get {
                return ResourceManager.GetString("Tutorial2AnalysisOfSBoxSlide3Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Cipher 2 consists of three encryption rounds with four round keys. Each round consists of key addition, substitution and permutation. In the last round an additional key addition is performed. ähnelt.
        /// </summary>
        public static string Tutorial2AnalysisSlide1Content1 {
            get {
                return ResourceManager.GetString("Tutorial2AnalysisSlide1Content1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die In the following, the encryption of a plain text block is shown schematically. As in Tutorial 1, the internal states during the encryption process are described with variables u and v. The following table shows the encryption of a plaintext block. ähnelt.
        /// </summary>
        public static string Tutorial2AnalysisSlide1Content2 {
            get {
                return ResourceManager.GetString("Tutorial2AnalysisSlide1Content2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die In addition, a permutation P() is used in this cipher. This permutation exchanges the bit positions of a block. In addition to the internal states u and v, w is introduced. This state w represents the value after a permutation. ähnelt.
        /// </summary>
        public static string Tutorial2AnalysisSlide1Content3 {
            get {
                return ResourceManager.GetString("Tutorial2AnalysisSlide1Content3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Analysis of cipher 2 ähnelt.
        /// </summary>
        public static string Tutorial2AnalysisSlide1Header {
            get {
                return ResourceManager.GetString("Tutorial2AnalysisSlide1Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Analysis of cipher 2 ähnelt.
        /// </summary>
        public static string Tutorial2AnalysisSlide2Header {
            get {
                return ResourceManager.GetString("Tutorial2AnalysisSlide2Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die You could now try to get the key k ähnelt.
        /// </summary>
        public static string Tutorial2AnalysisSlide3Content1Run1 {
            get {
                return ResourceManager.GetString("Tutorial2AnalysisSlide3Content1Run1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 3 ähnelt.
        /// </summary>
        public static string Tutorial2AnalysisSlide3Content1Run10 {
            get {
                return ResourceManager.GetString("Tutorial2AnalysisSlide3Content1Run10", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die . With the plaintexts you are still able to calculate the difference of the u ähnelt.
        /// </summary>
        public static string Tutorial2AnalysisSlide3Content1Run11 {
            get {
                return ResourceManager.GetString("Tutorial2AnalysisSlide3Content1Run11", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 0 ähnelt.
        /// </summary>
        public static string Tutorial2AnalysisSlide3Content1Run12 {
            get {
                return ResourceManager.GetString("Tutorial2AnalysisSlide3Content1Run12", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die . ähnelt.
        /// </summary>
        public static string Tutorial2AnalysisSlide3Content1Run13 {
            get {
                return ResourceManager.GetString("Tutorial2AnalysisSlide3Content1Run13", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 3 ähnelt.
        /// </summary>
        public static string Tutorial2AnalysisSlide3Content1Run2 {
            get {
                return ResourceManager.GetString("Tutorial2AnalysisSlide3Content1Run2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  in a similar way to cipher 1. To do so, you would use a pair of plaintext and their corresponding ciphertexts. Then you would guess a possible round key t to calculate the internal variables v ähnelt.
        /// </summary>
        public static string Tutorial2AnalysisSlide3Content1Run3 {
            get {
                return ResourceManager.GetString("Tutorial2AnalysisSlide3Content1Run3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 3 ähnelt.
        /// </summary>
        public static string Tutorial2AnalysisSlide3Content1Run4 {
            get {
                return ResourceManager.GetString("Tutorial2AnalysisSlide3Content1Run4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die . This would allow u ähnelt.
        /// </summary>
        public static string Tutorial2AnalysisSlide3Content1Run5 {
            get {
                return ResourceManager.GetString("Tutorial2AnalysisSlide3Content1Run5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 3 ähnelt.
        /// </summary>
        public static string Tutorial2AnalysisSlide3Content1Run6 {
            get {
                return ResourceManager.GetString("Tutorial2AnalysisSlide3Content1Run6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  to be calculated. Since the round key k ähnelt.
        /// </summary>
        public static string Tutorial2AnalysisSlide3Content1Run7 {
            get {
                return ResourceManager.GetString("Tutorial2AnalysisSlide3Content1Run7", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 2 ähnelt.
        /// </summary>
        public static string Tutorial2AnalysisSlide3Content1Run8 {
            get {
                return ResourceManager.GetString("Tutorial2AnalysisSlide3Content1Run8", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  is also unknown, you could now calculate the difference of u ähnelt.
        /// </summary>
        public static string Tutorial2AnalysisSlide3Content1Run9 {
            get {
                return ResourceManager.GetString("Tutorial2AnalysisSlide3Content1Run9", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Due to the Exclusive-Or, the S-box behaves non-linear, so that the difference of the v ähnelt.
        /// </summary>
        public static string Tutorial2AnalysisSlide3Content2Run1 {
            get {
                return ResourceManager.GetString("Tutorial2AnalysisSlide3Content2Run1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 0 ähnelt.
        /// </summary>
        public static string Tutorial2AnalysisSlide3Content2Run2 {
            get {
                return ResourceManager.GetString("Tutorial2AnalysisSlide3Content2Run2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  cannot be determined. Therefore, it is not possible to check a guess attempt of k ähnelt.
        /// </summary>
        public static string Tutorial2AnalysisSlide3Content2Run3 {
            get {
                return ResourceManager.GetString("Tutorial2AnalysisSlide3Content2Run3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 3 ähnelt.
        /// </summary>
        public static string Tutorial2AnalysisSlide3Content2Run4 {
            get {
                return ResourceManager.GetString("Tutorial2AnalysisSlide3Content2Run4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  by using differences. ähnelt.
        /// </summary>
        public static string Tutorial2AnalysisSlide3Content2Run5 {
            get {
                return ResourceManager.GetString("Tutorial2AnalysisSlide3Content2Run5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die To solve this problem, lets take a closer look at how the S-boxes work. ähnelt.
        /// </summary>
        public static string Tutorial2AnalysisSlide3Content3 {
            get {
                return ResourceManager.GetString("Tutorial2AnalysisSlide3Content3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Analysis of cipher 2 ähnelt.
        /// </summary>
        public static string Tutorial2AnalysisSlide3Header {
            get {
                return ResourceManager.GetString("Tutorial2AnalysisSlide3Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Tutorial 2 on differential cryptanalysis in the DCA PathFinder component is finished. ähnelt.
        /// </summary>
        public static string Tutorial2AttackFinishedContent1 {
            get {
                return ResourceManager.GetString("Tutorial2AttackFinishedContent1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die A last click on &quot;Start&quot; in the DCA KeyRecovery component attempts to recover the last two round keys k ähnelt.
        /// </summary>
        public static string Tutorial2AttackFinishedContent2Run1 {
            get {
                return ResourceManager.GetString("Tutorial2AttackFinishedContent2Run1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 1 ähnelt.
        /// </summary>
        public static string Tutorial2AttackFinishedContent2Run2 {
            get {
                return ResourceManager.GetString("Tutorial2AttackFinishedContent2Run2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  and k ähnelt.
        /// </summary>
        public static string Tutorial2AttackFinishedContent2Run3 {
            get {
                return ResourceManager.GetString("Tutorial2AttackFinishedContent2Run3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 0 ähnelt.
        /// </summary>
        public static string Tutorial2AttackFinishedContent2Run4 {
            get {
                return ResourceManager.GetString("Tutorial2AttackFinishedContent2Run4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die . ähnelt.
        /// </summary>
        public static string Tutorial2AttackFinishedContent2Run5 {
            get {
                return ResourceManager.GetString("Tutorial2AttackFinishedContent2Run5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Tutorial 2 finished ähnelt.
        /// </summary>
        public static string Tutorial2AttackFinishedHeader {
            get {
                return ResourceManager.GetString("Tutorial2AttackFinishedHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die In the last step, the last two round keys k ähnelt.
        /// </summary>
        public static string Tutorial2AttackFirstRoundContent1Run1 {
            get {
                return ResourceManager.GetString("Tutorial2AttackFirstRoundContent1Run1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 1 ähnelt.
        /// </summary>
        public static string Tutorial2AttackFirstRoundContent1Run2 {
            get {
                return ResourceManager.GetString("Tutorial2AttackFirstRoundContent1Run2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  and k ähnelt.
        /// </summary>
        public static string Tutorial2AttackFirstRoundContent1Run3 {
            get {
                return ResourceManager.GetString("Tutorial2AttackFirstRoundContent1Run3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 0 ähnelt.
        /// </summary>
        public static string Tutorial2AttackFirstRoundContent1Run4 {
            get {
                return ResourceManager.GetString("Tutorial2AttackFirstRoundContent1Run4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  are attacked. This attack is similar to the procedure described in Tutorial 1 ähnelt.
        /// </summary>
        public static string Tutorial2AttackFirstRoundContent1Run5 {
            get {
                return ResourceManager.GetString("Tutorial2AttackFirstRoundContent1Run5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die By clicking on &quot;Continue&quot;, the first two round keys k ähnelt.
        /// </summary>
        public static string Tutorial2AttackFirstRoundContent2Run1 {
            get {
                return ResourceManager.GetString("Tutorial2AttackFirstRoundContent2Run1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 1 ähnelt.
        /// </summary>
        public static string Tutorial2AttackFirstRoundContent2Run2 {
            get {
                return ResourceManager.GetString("Tutorial2AttackFirstRoundContent2Run2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  and k ähnelt.
        /// </summary>
        public static string Tutorial2AttackFirstRoundContent2Run3 {
            get {
                return ResourceManager.GetString("Tutorial2AttackFirstRoundContent2Run3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 0 ähnelt.
        /// </summary>
        public static string Tutorial2AttackFirstRoundContent2Run4 {
            get {
                return ResourceManager.GetString("Tutorial2AttackFirstRoundContent2Run4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  are attacked. ähnelt.
        /// </summary>
        public static string Tutorial2AttackFirstRoundContent2Run5 {
            get {
                return ResourceManager.GetString("Tutorial2AttackFirstRoundContent2Run5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Calculation of round keys k ähnelt.
        /// </summary>
        public static string Tutorial2AttackFirstRoundHeaderRun1 {
            get {
                return ResourceManager.GetString("Tutorial2AttackFirstRoundHeaderRun1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 1 ähnelt.
        /// </summary>
        public static string Tutorial2AttackFirstRoundHeaderRun2 {
            get {
                return ResourceManager.GetString("Tutorial2AttackFirstRoundHeaderRun2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  and k ähnelt.
        /// </summary>
        public static string Tutorial2AttackFirstRoundHeaderRun3 {
            get {
                return ResourceManager.GetString("Tutorial2AttackFirstRoundHeaderRun3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 0 ähnelt.
        /// </summary>
        public static string Tutorial2AttackFirstRoundHeaderRun4 {
            get {
                return ResourceManager.GetString("Tutorial2AttackFirstRoundHeaderRun4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 7. Differential cryptanalysis of cipher 2 ähnelt.
        /// </summary>
        public static string Tutorial2AttackHeader {
            get {
                return ResourceManager.GetString("Tutorial2AttackHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die At this point, the second round key k ähnelt.
        /// </summary>
        public static string Tutorial2AttackKeyRound2Content1Run1 {
            get {
                return ResourceManager.GetString("Tutorial2AttackKeyRound2Content1Run1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 2 ähnelt.
        /// </summary>
        public static string Tutorial2AttackKeyRound2Content1Run2 {
            get {
                return ResourceManager.GetString("Tutorial2AttackKeyRound2Content1Run2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  is to be attacked. S-boxes can be selected for this in the second encryption round.  By selecting an S-box, the respective 4 bits of the round key are attacked and an attempt is made to restore them. ähnelt.
        /// </summary>
        public static string Tutorial2AttackKeyRound2Content1Run3 {
            get {
                return ResourceManager.GetString("Tutorial2AttackKeyRound2Content1Run3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The attack is almost analogous to the attack on the round key k ähnelt.
        /// </summary>
        public static string Tutorial2AttackKeyRound2Content1Run4 {
            get {
                return ResourceManager.GetString("Tutorial2AttackKeyRound2Content1Run4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 3 ähnelt.
        /// </summary>
        public static string Tutorial2AttackKeyRound2Content1Run5 {
            get {
                return ResourceManager.GetString("Tutorial2AttackKeyRound2Content1Run5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die . However, when searching for differentials, the cipher does not have to be searched so deeply any more, since an encryption round has already been completely attacked. ähnelt.
        /// </summary>
        public static string Tutorial2AttackKeyRound2Content1Run6 {
            get {
                return ResourceManager.GetString("Tutorial2AttackKeyRound2Content1Run6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die At this point, the first round key k ähnelt.
        /// </summary>
        public static string Tutorial2AttackKeyRound3Content1Run1 {
            get {
                return ResourceManager.GetString("Tutorial2AttackKeyRound3Content1Run1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 3 ähnelt.
        /// </summary>
        public static string Tutorial2AttackKeyRound3Content1Run2 {
            get {
                return ResourceManager.GetString("Tutorial2AttackKeyRound3Content1Run2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  of the cipher will be attacked. S-boxes can be selected for this in the third encryption round. By selecting an S-box the respective 4 bits of the round key are attacked and an attempt is made to restore them. ähnelt.
        /// </summary>
        public static string Tutorial2AttackKeyRound3Content1Run3 {
            get {
                return ResourceManager.GetString("Tutorial2AttackKeyRound3Content1Run3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die In differential cryptanalysis, the change of differences at the S-boxes is considered. S-boxes should therefore be selected at this point. ähnelt.
        /// </summary>
        public static string Tutorial2AttackKeyRound3Content1Run4 {
            get {
                return ResourceManager.GetString("Tutorial2AttackKeyRound3Content1Run4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The more key bits that are selected, the more complicated the search for a differential. However, it can make sense to attack several S-boxes at the same time. Depending on the nature of the cipher, better or worse differentials can be found. ähnelt.
        /// </summary>
        public static string Tutorial2AttackKeyRound3Content1Run5 {
            get {
                return ResourceManager.GetString("Tutorial2AttackKeyRound3Content1Run5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select S-boxes from round 2 to get key bits from k ähnelt.
        /// </summary>
        public static string Tutorial2AttackRound2HeaderRun1 {
            get {
                return ResourceManager.GetString("Tutorial2AttackRound2HeaderRun1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 2 ähnelt.
        /// </summary>
        public static string Tutorial2AttackRound2HeaderRun2 {
            get {
                return ResourceManager.GetString("Tutorial2AttackRound2HeaderRun2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  ähnelt.
        /// </summary>
        public static string Tutorial2AttackRound2HeaderRun3 {
            get {
                return ResourceManager.GetString("Tutorial2AttackRound2HeaderRun3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Select S-boxes from round 3 to get key bits from k ähnelt.
        /// </summary>
        public static string Tutorial2AttackRound3HeaderRun1 {
            get {
                return ResourceManager.GetString("Tutorial2AttackRound3HeaderRun1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 3 ähnelt.
        /// </summary>
        public static string Tutorial2AttackRound3HeaderRun2 {
            get {
                return ResourceManager.GetString("Tutorial2AttackRound3HeaderRun2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  ähnelt.
        /// </summary>
        public static string Tutorial2AttackRound3HeaderRun3 {
            get {
                return ResourceManager.GetString("Tutorial2AttackRound3HeaderRun3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 4. Characteristics ähnelt.
        /// </summary>
        public static string Tutorial2CharacteristicHeader {
            get {
                return ResourceManager.GetString("Tutorial2CharacteristicHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Two entries that differ by a difference  ähnelt.
        /// </summary>
        public static string Tutorial2CharacteristicSlide1Content1Run1 {
            get {
                return ResourceManager.GetString("Tutorial2CharacteristicSlide1Content1Run1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  are substituted using the S-box by a pair of outputs differing by a difference  ähnelt.
        /// </summary>
        public static string Tutorial2CharacteristicSlide1Content1Run2 {
            get {
                return ResourceManager.GetString("Tutorial2CharacteristicSlide1Content1Run2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die . This is noted by ähnelt.
        /// </summary>
        public static string Tutorial2CharacteristicSlide1Content1Run3 {
            get {
                return ResourceManager.GetString("Tutorial2CharacteristicSlide1Content1Run3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Characteristics can be combined with each other and thus connected over several rounds. The prerequisite for this is that the output difference of the preceding characteristic has the same value as the input difference of the following characteristic. Assuming that characteristics are independent of each other, the probabilities can be multiplied. In this way, a path of differences through the cipher can be searched.
        ///
        /// ähnelt.
        /// </summary>
        public static string Tutorial2CharacteristicSlide1Content2 {
            get {
                return ResourceManager.GetString("Tutorial2CharacteristicSlide1Content2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die We call such a pair  ähnelt.
        /// </summary>
        public static string Tutorial2CharacteristicSlide1Content2Run1 {
            get {
                return ResourceManager.GetString("Tutorial2CharacteristicSlide1Content2Run1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  a differential characteristic under the operation of the S-box. As seen before, a differential characteristic has a fixed probability. ähnelt.
        /// </summary>
        public static string Tutorial2CharacteristicSlide1Content2Run2 {
            get {
                return ResourceManager.GetString("Tutorial2CharacteristicSlide1Content2Run2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Ziel bei der Suche ist es einen Weg zu finden, der eine möglichst hohe Wahrscheinlichkeit aufweist. Diese Wege können in der DKA-PfadVisualisierer-Komponente graphisch dargestellt werden. ähnelt.
        /// </summary>
        public static string Tutorial2CharacteristicSlide1Content3 {
            get {
                return ResourceManager.GetString("Tutorial2CharacteristicSlide1Content3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Characteristics ähnelt.
        /// </summary>
        public static string Tutorial2CharacteristicSlide1Header {
            get {
                return ResourceManager.GetString("Tutorial2CharacteristicSlide1Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die An encryption round for cipher 2 consists of key addition, substitution and permutation. The cipher works on 16 bit blocks. The previous notation is extended as follows to denote a differential characteristic of an S-box for 16 bit blocks ähnelt.
        /// </summary>
        public static string Tutorial2CharacteristicSlide2Content1 {
            get {
                return ResourceManager.GetString("Tutorial2CharacteristicSlide2Content1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die After substitution, the bits in cipher 2 are permuted. The permutation of the cipher is known and therefore the differential characteristic of the permutation can be described as follows ähnelt.
        /// </summary>
        public static string Tutorial2CharacteristicSlide2Content2 {
            get {
                return ResourceManager.GetString("Tutorial2CharacteristicSlide2Content2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die In summary, a differential characteristic of an encryption round as a combination of substitution and permutation is noted as follows ähnelt.
        /// </summary>
        public static string Tutorial2CharacteristicSlide2Content3 {
            get {
                return ResourceManager.GetString("Tutorial2CharacteristicSlide2Content3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Characteristics ähnelt.
        /// </summary>
        public static string Tutorial2CharacteristicSlide2Header {
            get {
                return ResourceManager.GetString("Tutorial2CharacteristicSlide2Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The differential characteristics of individual rounds are now to be combined into a path of differences through the entire cipher. The search for paths with high probability is a complex and time-consuming problem for ciphers with many encryption rounds and big blocks. ähnelt.
        /// </summary>
        public static string Tutorial2CharacteristicSlide3Content1 {
            get {
                return ResourceManager.GetString("Tutorial2CharacteristicSlide3Content1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The DCA PathFinder component has various search options for determining such paths. ähnelt.
        /// </summary>
        public static string Tutorial2CharacteristicSlide3Content2 {
            get {
                return ResourceManager.GetString("Tutorial2CharacteristicSlide3Content2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The previously introduced notation is used to denote differential characteristics of a round to differential characteristics for n-encryption rounds (here: 3): ähnelt.
        /// </summary>
        public static string Tutorial2CharacteristicSlide3Content3 {
            get {
                return ResourceManager.GetString("Tutorial2CharacteristicSlide3Content3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die In the first 4-tuple the input differences of the S-boxes of the first 4 S-boxes are given in the first encryption round. In the second 4-tuple, both the output difference of the first and the input difference of the second encryption round are noted. In the 3rd 4-tuple, the output difference of the second and the input difference of the last encryption round are noted. ähnelt.
        /// </summary>
        public static string Tutorial2CharacteristicSlide3Content4 {
            get {
                return ResourceManager.GetString("Tutorial2CharacteristicSlide3Content4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The aim of the search is to find a way with the highest possible probability. ähnelt.
        /// </summary>
        public static string Tutorial2CharacteristicSlide3Content5 {
            get {
                return ResourceManager.GetString("Tutorial2CharacteristicSlide3Content5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Characteristics ähnelt.
        /// </summary>
        public static string Tutorial2CharacteristicSlide3Header {
            get {
                return ResourceManager.GetString("Tutorial2CharacteristicSlide3Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 5. Differentials ähnelt.
        /// </summary>
        public static string Tutorial2DifferentialHeader {
            get {
                return ResourceManager.GetString("Tutorial2DifferentialHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die When searching for characteristics over n rounds, it can happen that different characteristics are found that have the same input difference of the first and output difference of the last encryption round. The characteristics therefore have the form ähnelt.
        /// </summary>
        public static string Tutorial2DifferentialSlide1Content1 {
            get {
                return ResourceManager.GetString("Tutorial2DifferentialSlide1Content1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The input and output values of the difference are decisive for the use of characteristics for differential cryptanalysis. If several characteristics with the same input and output values are found, the probabilities can be added together. A structure consisting of several characteristics is called a differential. ähnelt.
        /// </summary>
        public static string Tutorial2DifferentialSlide1Content2 {
            get {
                return ResourceManager.GetString("Tutorial2DifferentialSlide1Content2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The goal in the analysis of a cipher is therefore to find the differential with the highest probability. ähnelt.
        /// </summary>
        public static string Tutorial2DifferentialSlide1Content3 {
            get {
                return ResourceManager.GetString("Tutorial2DifferentialSlide1Content3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Differentials ähnelt.
        /// </summary>
        public static string Tutorial2DifferentialSlide1Header {
            get {
                return ResourceManager.GetString("Tutorial2DifferentialSlide1Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 1. Introduction ähnelt.
        /// </summary>
        public static string Tutorial2IntroductionHeader {
            get {
                return ResourceManager.GetString("Tutorial2IntroductionHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die In Tutorial 1 the idea of differential cryptanalysis was introduced and demonstrated with a cipher consisting of one encryption round with two round keys. ähnelt.
        /// </summary>
        public static string Tutorial2IntroductionSlide1Content1 {
            get {
                return ResourceManager.GetString("Tutorial2IntroductionSlide1Content1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die In this tutorial the idea is deepened and shown at a cipher with three encryption rounds with four round keys. ähnelt.
        /// </summary>
        public static string Tutorial2IntroductionSlide1Content2 {
            get {
                return ResourceManager.GetString("Tutorial2IntroductionSlide1Content2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die To attack a cipher with multiple encryption rounds and round keys by differential cryptanalysis, it must be examined more closely. Of interest are the individual components of the encryption rounds and how they behave. ähnelt.
        /// </summary>
        public static string Tutorial2IntroductionSlide1Content3 {
            get {
                return ResourceManager.GetString("Tutorial2IntroductionSlide1Content3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Due to the multiple encryption rounds, this cipher cannot be attacked like cipher 1. For cipher 2, an approach is needed that predicts the changes of differences over several encryption rounds with a certain probability. ähnelt.
        /// </summary>
        public static string Tutorial2IntroductionSlide1Content4 {
            get {
                return ResourceManager.GetString("Tutorial2IntroductionSlide1Content4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Introduction ähnelt.
        /// </summary>
        public static string Tutorial2IntroductionSlide1Header {
            get {
                return ResourceManager.GetString("Tutorial2IntroductionSlide1Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 6. Recover key information ähnelt.
        /// </summary>
        public static string Tutorial2RecoverKeyInformationHeader {
            get {
                return ResourceManager.GetString("Tutorial2RecoverKeyInformationHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Once a differential has been found with a high probability, key bits can be recovered. For this purpose, the S-boxes are considered where the expected difference is different from 0. ähnelt.
        /// </summary>
        public static string Tutorial2RecoverKeyInformationSlide1Content1 {
            get {
                return ResourceManager.GetString("Tutorial2RecoverKeyInformationSlide1Content1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die A counter is generated for each possible key candidate. The cryptoanalyst generates a number of messages that fulfill the input difference. These are encrypted and partially decrypted with the key candidate. If the difference between the partially decrypted messages meets the expected difference, the counter is increased by 1. This process is repeated with all generated message pairs. ähnelt.
        /// </summary>
        public static string Tutorial2RecoverKeyInformationSlide1Content2 {
            get {
                return ResourceManager.GetString("Tutorial2RecoverKeyInformationSlide1Content2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The key candidate with the most hits should have the highest counter. This should be very close to the expected value of the differential. ähnelt.
        /// </summary>
        public static string Tutorial2RecoverKeyInformationSlide1Content3 {
            get {
                return ResourceManager.GetString("Tutorial2RecoverKeyInformationSlide1Content3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Recover key information ähnelt.
        /// </summary>
        public static string Tutorial2RecoverKeyInformationSlide1Header {
            get {
                return ResourceManager.GetString("Tutorial2RecoverKeyInformationSlide1Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Tutorial ähnelt.
        /// </summary>
        public static string Tutorial2TitleHeaderRun1 {
            get {
                return ResourceManager.GetString("Tutorial2TitleHeaderRun1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Differential cryptanalysis of symmetric block ciphers ähnelt.
        /// </summary>
        public static string Tutorial2TitleHeaderRun2 {
            get {
                return ResourceManager.GetString("Tutorial2TitleHeaderRun2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die You can now use the attack configuration generated in the DCA PathFinder component in the DCA KeyRecovery component to restore key bits. To do this, you must click the button &quot;Start&quot;. ähnelt.
        /// </summary>
        public static string Tutorial2WaitingSlideContent1 {
            get {
                return ResourceManager.GetString("Tutorial2WaitingSlideContent1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Optionally, you can display the determined differential and its characteristics in the DCA PathVisualizer component. ähnelt.
        /// </summary>
        public static string Tutorial2WaitingSlideContent2 {
            get {
                return ResourceManager.GetString("Tutorial2WaitingSlideContent2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Summary of the analysis results: ähnelt.
        /// </summary>
        public static string Tutorial2WaitingSlideContent3Run1 {
            get {
                return ResourceManager.GetString("Tutorial2WaitingSlideContent3Run1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Input difference:  ähnelt.
        /// </summary>
        public static string Tutorial2WaitingSlideContent3Run2 {
            get {
                return ResourceManager.GetString("Tutorial2WaitingSlideContent3Run2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Expected difference:  ähnelt.
        /// </summary>
        public static string Tutorial2WaitingSlideContent3Run3 {
            get {
                return ResourceManager.GetString("Tutorial2WaitingSlideContent3Run3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Probability:  ähnelt.
        /// </summary>
        public static string Tutorial2WaitingSlideContent3Run4 {
            get {
                return ResourceManager.GetString("Tutorial2WaitingSlideContent3Run4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Differential cryptanalysis is continued in the following components ähnelt.
        /// </summary>
        public static string Tutorial2WaitingSlideHeader {
            get {
                return ResourceManager.GetString("Tutorial2WaitingSlideHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Tutorial 3 zur differenziellen Kryptoanalyse in der DKA-PfadFinder-Komponente ist beendet.  ähnelt.
        /// </summary>
        public static string Tutorial3AttackFinishedContent1 {
            get {
                return ResourceManager.GetString("Tutorial3AttackFinishedContent1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Durch ein letztes Klicken auf &quot;Start&quot; in der DKA-KeyRecovery-Komponente werden die letzten zwei Rundenschlüssel k ähnelt.
        /// </summary>
        public static string Tutorial3AttackFinishedContent2Run1 {
            get {
                return ResourceManager.GetString("Tutorial3AttackFinishedContent2Run1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 1 ähnelt.
        /// </summary>
        public static string Tutorial3AttackFinishedContent2Run2 {
            get {
                return ResourceManager.GetString("Tutorial3AttackFinishedContent2Run2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  und k ähnelt.
        /// </summary>
        public static string Tutorial3AttackFinishedContent2Run3 {
            get {
                return ResourceManager.GetString("Tutorial3AttackFinishedContent2Run3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 0 ähnelt.
        /// </summary>
        public static string Tutorial3AttackFinishedContent2Run4 {
            get {
                return ResourceManager.GetString("Tutorial3AttackFinishedContent2Run4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  versucht wiederherzustellen. ähnelt.
        /// </summary>
        public static string Tutorial3AttackFinishedContent2Run5 {
            get {
                return ResourceManager.GetString("Tutorial3AttackFinishedContent2Run5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Tutorial 3 beendet ähnelt.
        /// </summary>
        public static string Tutorial3AttackFinishedHeader {
            get {
                return ResourceManager.GetString("Tutorial3AttackFinishedHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Im letzten Schritt werden die letzten beiden Rundenschlüssel k ähnelt.
        /// </summary>
        public static string Tutorial3AttackFirstRoundContent1Run1 {
            get {
                return ResourceManager.GetString("Tutorial3AttackFirstRoundContent1Run1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 1 ähnelt.
        /// </summary>
        public static string Tutorial3AttackFirstRoundContent1Run2 {
            get {
                return ResourceManager.GetString("Tutorial3AttackFirstRoundContent1Run2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  und k ähnelt.
        /// </summary>
        public static string Tutorial3AttackFirstRoundContent1Run3 {
            get {
                return ResourceManager.GetString("Tutorial3AttackFirstRoundContent1Run3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 0 ähnelt.
        /// </summary>
        public static string Tutorial3AttackFirstRoundContent1Run4 {
            get {
                return ResourceManager.GetString("Tutorial3AttackFirstRoundContent1Run4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  angegriffen. Dieser Angriff läuft analog zu dem Verfahren ab, wie es in Tutorial 1 durchgeführt wurde. ähnelt.
        /// </summary>
        public static string Tutorial3AttackFirstRoundContent1Run5 {
            get {
                return ResourceManager.GetString("Tutorial3AttackFirstRoundContent1Run5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Durch einen Klick auf weiter werden die ersten beiden Rundenschlüssel k ähnelt.
        /// </summary>
        public static string Tutorial3AttackFirstRoundContent2Run1 {
            get {
                return ResourceManager.GetString("Tutorial3AttackFirstRoundContent2Run1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 1 ähnelt.
        /// </summary>
        public static string Tutorial3AttackFirstRoundContent2Run2 {
            get {
                return ResourceManager.GetString("Tutorial3AttackFirstRoundContent2Run2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  und k ähnelt.
        /// </summary>
        public static string Tutorial3AttackFirstRoundContent2Run3 {
            get {
                return ResourceManager.GetString("Tutorial3AttackFirstRoundContent2Run3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 0 ähnelt.
        /// </summary>
        public static string Tutorial3AttackFirstRoundContent2Run4 {
            get {
                return ResourceManager.GetString("Tutorial3AttackFirstRoundContent2Run4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  angegriffen. ähnelt.
        /// </summary>
        public static string Tutorial3AttackFirstRoundContent2Run5 {
            get {
                return ResourceManager.GetString("Tutorial3AttackFirstRoundContent2Run5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Berechnung der Rundenschlüssel k ähnelt.
        /// </summary>
        public static string Tutorial3AttackFirstRoundHeaderRun1 {
            get {
                return ResourceManager.GetString("Tutorial3AttackFirstRoundHeaderRun1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 1 ähnelt.
        /// </summary>
        public static string Tutorial3AttackFirstRoundHeaderRun2 {
            get {
                return ResourceManager.GetString("Tutorial3AttackFirstRoundHeaderRun2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  und k ähnelt.
        /// </summary>
        public static string Tutorial3AttackFirstRoundHeaderRun3 {
            get {
                return ResourceManager.GetString("Tutorial3AttackFirstRoundHeaderRun3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 0 ähnelt.
        /// </summary>
        public static string Tutorial3AttackFirstRoundHeaderRun4 {
            get {
                return ResourceManager.GetString("Tutorial3AttackFirstRoundHeaderRun4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 5. Differenzielle Kryptoanalyse von Chiffre 3 ähnelt.
        /// </summary>
        public static string Tutorial3AttackHeader {
            get {
                return ResourceManager.GetString("Tutorial3AttackHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die An dieser Stelle soll der zweite Rundenschlüssel k ähnelt.
        /// </summary>
        public static string Tutorial3AttackKeyRound2Content1Run1 {
            get {
                return ResourceManager.GetString("Tutorial3AttackKeyRound2Content1Run1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 2 ähnelt.
        /// </summary>
        public static string Tutorial3AttackKeyRound2Content1Run2 {
            get {
                return ResourceManager.GetString("Tutorial3AttackKeyRound2Content1Run2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  angegriffen werden. Dazu können in der zweiten Verschlüsselungsrunde SBoxen ausgewählt werden. Durch die Auswahl einer SBox werden die jeweiligen 4 Bits des Rundenschlüssels angegriffen und versucht wiederherzustellen. ähnelt.
        /// </summary>
        public static string Tutorial3AttackKeyRound2Content1Run3 {
            get {
                return ResourceManager.GetString("Tutorial3AttackKeyRound2Content1Run3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Der Angriff läuft nahezu analog zu dem auf den Rundenschlüssel k ähnelt.
        /// </summary>
        public static string Tutorial3AttackKeyRound2Content1Run4 {
            get {
                return ResourceManager.GetString("Tutorial3AttackKeyRound2Content1Run4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 5 ähnelt.
        /// </summary>
        public static string Tutorial3AttackKeyRound2Content1Run5 {
            get {
                return ResourceManager.GetString("Tutorial3AttackKeyRound2Content1Run5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  ab. Allerdings muss bei der Suche nach Differenzialen die Chiffre nicht mehr so tief durchsucht werden, da bereits eine Verschlüsselungsrunde vollständig angegriffen wurde. ähnelt.
        /// </summary>
        public static string Tutorial3AttackKeyRound2Content1Run6 {
            get {
                return ResourceManager.GetString("Tutorial3AttackKeyRound2Content1Run6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die An dieser Stelle soll der zweite Rundenschlüssel k ähnelt.
        /// </summary>
        public static string Tutorial3AttackKeyRound3Content1Run1 {
            get {
                return ResourceManager.GetString("Tutorial3AttackKeyRound3Content1Run1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 3 ähnelt.
        /// </summary>
        public static string Tutorial3AttackKeyRound3Content1Run2 {
            get {
                return ResourceManager.GetString("Tutorial3AttackKeyRound3Content1Run2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  angegriffen werden. Dazu können in der zweiten Verschlüsselungsrunde SBoxen ausgewählt werden. Durch die Auswahl einer SBox werden die jeweiligen 4 Bits des Rundenschlüssels angegriffen und versucht wiederherzustellen. ähnelt.
        /// </summary>
        public static string Tutorial3AttackKeyRound3Content1Run3 {
            get {
                return ResourceManager.GetString("Tutorial3AttackKeyRound3Content1Run3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Der Angriff läuft nahezu analog zu dem auf den Rundenschlüssel k ähnelt.
        /// </summary>
        public static string Tutorial3AttackKeyRound3Content1Run4 {
            get {
                return ResourceManager.GetString("Tutorial3AttackKeyRound3Content1Run4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 5 ähnelt.
        /// </summary>
        public static string Tutorial3AttackKeyRound3Content1Run5 {
            get {
                return ResourceManager.GetString("Tutorial3AttackKeyRound3Content1Run5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  ab. Allerdings muss bei der Suche nach Differenzialen die Chiffre nicht mehr so tief durchsucht werden, da bereits eine Verschlüsselungsrunde vollständig angegriffen wurde. ähnelt.
        /// </summary>
        public static string Tutorial3AttackKeyRound3Content1Run6 {
            get {
                return ResourceManager.GetString("Tutorial3AttackKeyRound3Content1Run6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die An dieser Stelle soll der zweite Rundenschlüssel k ähnelt.
        /// </summary>
        public static string Tutorial3AttackKeyRound4Content1Run1 {
            get {
                return ResourceManager.GetString("Tutorial3AttackKeyRound4Content1Run1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 4 ähnelt.
        /// </summary>
        public static string Tutorial3AttackKeyRound4Content1Run2 {
            get {
                return ResourceManager.GetString("Tutorial3AttackKeyRound4Content1Run2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  angegriffen werden. Dazu können in der zweiten Verschlüsselungsrunde SBoxen ausgewählt werden. Durch die Auswahl einer SBox werden die jeweiligen 4 Bits des Rundenschlüssels angegriffen und versucht wiederherzustellen. ähnelt.
        /// </summary>
        public static string Tutorial3AttackKeyRound4Content1Run3 {
            get {
                return ResourceManager.GetString("Tutorial3AttackKeyRound4Content1Run3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Der Angriff läuft nahezu analog zu dem auf den Rundenschlüssel k ähnelt.
        /// </summary>
        public static string Tutorial3AttackKeyRound4Content1Run4 {
            get {
                return ResourceManager.GetString("Tutorial3AttackKeyRound4Content1Run4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 5 ähnelt.
        /// </summary>
        public static string Tutorial3AttackKeyRound4Content1Run5 {
            get {
                return ResourceManager.GetString("Tutorial3AttackKeyRound4Content1Run5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  ab. Allerdings muss bei der Suche nach Differenzialen die Chiffre nicht mehr so tief durchsucht werden, da bereits eine Verschlüsselungsrunde vollständig angegriffen wurde. ähnelt.
        /// </summary>
        public static string Tutorial3AttackKeyRound4Content1Run6 {
            get {
                return ResourceManager.GetString("Tutorial3AttackKeyRound4Content1Run6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die An dieser Stelle soll der erste Rundenschlüssel k ähnelt.
        /// </summary>
        public static string Tutorial3AttackKeyRound5Content1Run1 {
            get {
                return ResourceManager.GetString("Tutorial3AttackKeyRound5Content1Run1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 5 ähnelt.
        /// </summary>
        public static string Tutorial3AttackKeyRound5Content1Run2 {
            get {
                return ResourceManager.GetString("Tutorial3AttackKeyRound5Content1Run2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  der Chiffre angegriffen werden. Dazu können in der fünften Verschlüsselungsrunde SBoxen ausgewählt werden. Durch die Auswahl einer SBox werden die jeweiligen 4 Bits des Rundenschlüssels angegriffen und versucht wiederherzustellen. ähnelt.
        /// </summary>
        public static string Tutorial3AttackKeyRound5Content1Run3 {
            get {
                return ResourceManager.GetString("Tutorial3AttackKeyRound5Content1Run3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Bei der differenziellen Kryptoanalyse wird die Veränderung von Differenzen an den SBoxen betrachtet. Daher sind an dieser Stelle SBoxen auszuwählen. ähnelt.
        /// </summary>
        public static string Tutorial3AttackKeyRound5Content1Run4 {
            get {
                return ResourceManager.GetString("Tutorial3AttackKeyRound5Content1Run4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Je mehr Schlüsselbits ausgewählt werden, desto komplizierter ist die Suche nach einem Differenzial. Allerdings kann durchaus sinnvoll sein, mehrere SBoxen gleichzeitig anzugreifen. Je nach Beschaffenheit der Chiffre finden sich so bessere oder schlechtere Differenziale. ähnelt.
        /// </summary>
        public static string Tutorial3AttackKeyRound5Content1Run5 {
            get {
                return ResourceManager.GetString("Tutorial3AttackKeyRound5Content1Run5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SBoxen aus Runde 2 auswählen, um Schlüsselbits von k ähnelt.
        /// </summary>
        public static string Tutorial3AttackRound2HeaderRun1 {
            get {
                return ResourceManager.GetString("Tutorial3AttackRound2HeaderRun1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 2 ähnelt.
        /// </summary>
        public static string Tutorial3AttackRound2HeaderRun2 {
            get {
                return ResourceManager.GetString("Tutorial3AttackRound2HeaderRun2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  anzugreifen ähnelt.
        /// </summary>
        public static string Tutorial3AttackRound2HeaderRun3 {
            get {
                return ResourceManager.GetString("Tutorial3AttackRound2HeaderRun3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SBoxen aus Runde 3 auswählen, um Schlüsselbits von k ähnelt.
        /// </summary>
        public static string Tutorial3AttackRound3HeaderRun1 {
            get {
                return ResourceManager.GetString("Tutorial3AttackRound3HeaderRun1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 3 ähnelt.
        /// </summary>
        public static string Tutorial3AttackRound3HeaderRun2 {
            get {
                return ResourceManager.GetString("Tutorial3AttackRound3HeaderRun2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  anzugreifen ähnelt.
        /// </summary>
        public static string Tutorial3AttackRound3HeaderRun3 {
            get {
                return ResourceManager.GetString("Tutorial3AttackRound3HeaderRun3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SBoxen aus Runde 4 auswählen, um Schlüsselbits von k ähnelt.
        /// </summary>
        public static string Tutorial3AttackRound4HeaderRun1 {
            get {
                return ResourceManager.GetString("Tutorial3AttackRound4HeaderRun1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 4 ähnelt.
        /// </summary>
        public static string Tutorial3AttackRound4HeaderRun2 {
            get {
                return ResourceManager.GetString("Tutorial3AttackRound4HeaderRun2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  anzugreifen ähnelt.
        /// </summary>
        public static string Tutorial3AttackRound4HeaderRun3 {
            get {
                return ResourceManager.GetString("Tutorial3AttackRound4HeaderRun3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die SBoxen aus Runde 5 auswählen, um Schlüsselbits von k ähnelt.
        /// </summary>
        public static string Tutorial3AttackRound5HeaderRun1 {
            get {
                return ResourceManager.GetString("Tutorial3AttackRound5HeaderRun1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 5 ähnelt.
        /// </summary>
        public static string Tutorial3AttackRound5HeaderRun2 {
            get {
                return ResourceManager.GetString("Tutorial3AttackRound5HeaderRun2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  anzugreifen ähnelt.
        /// </summary>
        public static string Tutorial3AttackRound5HeaderRun3 {
            get {
                return ResourceManager.GetString("Tutorial3AttackRound5HeaderRun3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 2. Filterung ähnelt.
        /// </summary>
        public static string Tutorial3FilterHeader {
            get {
                return ResourceManager.GetString("Tutorial3FilterHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Bei der Durchführung der DKA werden viele Klartext-Paare generiert, die eine bestimmte Differenz aufweisen. Es kann vorkommen, dass die Nachrichten dem im Differenzial gefundenen Weg durch die Chiffre nicht folgen. ähnelt.
        /// </summary>
        public static string Tutorial3FilterSlide1Content1 {
            get {
                return ResourceManager.GetString("Tutorial3FilterSlide1Content1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Erfüllt ein Paar die Eingabedifferenz, bedeutet es noch nicht, dass es auch die letzte Differenz erfüllt. ähnelt.
        /// </summary>
        public static string Tutorial3FilterSlide1Content2 {
            get {
                return ResourceManager.GetString("Tutorial3FilterSlide1Content2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Wenn ein Paar den Fluss des Differenzials folgt, wird von einem richten Paar gesprochen. Dahingegen wird ein Paar, das nicht dem Differenzial folgt, als falsches Paar bezeichnet. ähnelt.
        /// </summary>
        public static string Tutorial3FilterSlide1Content3 {
            get {
                return ResourceManager.GetString("Tutorial3FilterSlide1Content3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Filterung ähnelt.
        /// </summary>
        public static string Tutorial3FilterSlide1Header {
            get {
                return ResourceManager.GetString("Tutorial3FilterSlide1Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Falsche Paare können bei der Wiederherstellung des gesuchten Rundenschlüssels Probleme darstellen. Diese erschweren die Identifizierung des korrekten Rundenschlüssels durch Treffer von falschen Rundenschlüsseln bei der Wiederherstellung. ähnelt.
        /// </summary>
        public static string Tutorial3FilterSlide2Content1 {
            get {
                return ResourceManager.GetString("Tutorial3FilterSlide2Content1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Es ist daher sinnvoll, falsche Paare vor der Wiederherstellung des Rundenschlüssels zu identifizieren und nicht weiter zu betrachten. ähnelt.
        /// </summary>
        public static string Tutorial3FilterSlide2Content2 {
            get {
                return ResourceManager.GetString("Tutorial3FilterSlide2Content2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Filterung ähnelt.
        /// </summary>
        public static string Tutorial3FilterSlide2Header {
            get {
                return ResourceManager.GetString("Tutorial3FilterSlide2Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 1. Einführung ähnelt.
        /// </summary>
        public static string Tutorial3IntroductionHeader {
            get {
                return ResourceManager.GetString("Tutorial3IntroductionHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die In Tutorial 1 wurde die Idee der differenziellen Kryptoanalyse vorgestellt und an einer Chiffre bestehend aus einer Verschlüsselungsrunde mit zwei Rundenschlüsseln demonstriert. In Turorial 2 wurde die Idee vertieft und an einer Chiffre mit drei Verschlüsselungsrudnen gezeigt. ähnelt.
        /// </summary>
        public static string Tutorial3IntroductionSlide1Content1 {
            get {
                return ResourceManager.GetString("Tutorial3IntroductionSlide1Content1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Dazu wurden Strukturen wie Charakteristiken und Differenziale eingeführt. ähnelt.
        /// </summary>
        public static string Tutorial3IntroductionSlide1Content2 {
            get {
                return ResourceManager.GetString("Tutorial3IntroductionSlide1Content2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die In diesem Tutorial werden weitere Techniken gezeigt, die bei der DKA verwendet werden. ähnelt.
        /// </summary>
        public static string Tutorial3IntroductionSlide1Content3 {
            get {
                return ResourceManager.GetString("Tutorial3IntroductionSlide1Content3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Chiffre 3 besteht aus fünf Verschlüsselungsrunden und sechs Rundenschlüsseln. Das bereits demonstrierte soll an dieser Chiffre darüber hinaus nochmal vertieft werden. ähnelt.
        /// </summary>
        public static string Tutorial3IntroductionSlide1Content4 {
            get {
                return ResourceManager.GetString("Tutorial3IntroductionSlide1Content4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Einführung ähnelt.
        /// </summary>
        public static string Tutorial3IntroductionSlide1Header {
            get {
                return ResourceManager.GetString("Tutorial3IntroductionSlide1Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Zur Filterung werden im Folgenden zwei Techniken vorgestellt. ähnelt.
        /// </summary>
        public static string Tutorial3IntroductionSlide3Content1 {
            get {
                return ResourceManager.GetString("Tutorial3IntroductionSlide3Content1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Als erste Technik wird die Differenz der Geheimtexte eines Paares betrachtet. Beim Angriff mittels DKA werden oft aus Gründen des Aufwands nicht alle S-Boxen eiener Verschlüsselungsrunde gleichzeitig angegriffen, sondern oft nur eine Teilmenge. ähnelt.
        /// </summary>
        public static string Tutorial3IntroductionSlide3Content2 {
            get {
                return ResourceManager.GetString("Tutorial3IntroductionSlide3Content2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Die S-Boxen, an denen die Differenz 0 hineingeht, kommt auch die Differenz 0 heraus. Folglich durch Betrachtung der Geheimtext-Differenz einige Paare schon ausgeschlossen werden, wenn die Differenz an den entsprechenden Stellen von 0 verschieden ist. ähnelt.
        /// </summary>
        public static string Tutorial3IntroductionSlide3Content3 {
            get {
                return ResourceManager.GetString("Tutorial3IntroductionSlide3Content3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Filterung ähnelt.
        /// </summary>
        public static string Tutorial3IntroductionSlide3Header {
            get {
                return ResourceManager.GetString("Tutorial3IntroductionSlide3Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Als zweites kann die letzte (erwartete) Differenz des Differenzials betrachtet werden. ähnelt.
        /// </summary>
        public static string Tutorial3IntroductionSlide4Content1 {
            get {
                return ResourceManager.GetString("Tutorial3IntroductionSlide4Content1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Dieser Wert ist bekannt und durch Betrachtung der Differenzenverteilungstabelle der S-Box kann auch der Ausgabewert der S-Box ermittelt werden. Im allgemeinen sind hier mehrere verschiedene Werte möglich. Diese Werte können ebenfalls bei der Betrachtung der Differenz der Geheimtexte verwendet werden. ähnelt.
        /// </summary>
        public static string Tutorial3IntroductionSlide4Content2 {
            get {
                return ResourceManager.GetString("Tutorial3IntroductionSlide4Content2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Entspricht die Geheimtext-Differenz an der Stelle der S-Box nicht einem der verschiedenen Ausgangswerte der S-Box, kann dieses Paar ebenfalls als falsches Paar indentifiziert werden. ähnelt.
        /// </summary>
        public static string Tutorial3IntroductionSlide4Content3 {
            get {
                return ResourceManager.GetString("Tutorial3IntroductionSlide4Content3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Filterung ähnelt.
        /// </summary>
        public static string Tutorial3IntroductionSlide4Header {
            get {
                return ResourceManager.GetString("Tutorial3IntroductionSlide4Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 3. Anzahl der notwendigen Paare ähnelt.
        /// </summary>
        public static string Tutorial3NeededPairsHeader {
            get {
                return ResourceManager.GetString("Tutorial3NeededPairsHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Die notwendige Anzahl an Paaren ist im wesentlichen von bestimmten Faktoren abhängig. Diese sind die Wahrscheinlichkeit des gefundenen Differenzials, die Anzahl der angegriffenen Schlüsselbits durch das Differenzial und die Filterungstechnik. ähnelt.
        /// </summary>
        public static string Tutorial3NeededPairsSlide1Content1 {
            get {
                return ResourceManager.GetString("Tutorial3NeededPairsSlide1Content1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Es beschreibt das Verhältnis der Anzahl von Paaren, die dem Differenzial folgen zu der durchschnittlichen Häufigkeit der falschen Teilschlüssel. ähnelt.
        /// </summary>
        public static string Tutorial3NeededPairsSlide1Content2 {
            get {
                return ResourceManager.GetString("Tutorial3NeededPairsSlide1Content2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Eine gängige Formel zur bestimmung der notwendigen Paare N ähnelt.
        /// </summary>
        public static string Tutorial3NeededPairsSlide1Content2Run1 {
            get {
                return ResourceManager.GetString("Tutorial3NeededPairsSlide1Content2Run1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die D ähnelt.
        /// </summary>
        public static string Tutorial3NeededPairsSlide1Content2Run2 {
            get {
                return ResourceManager.GetString("Tutorial3NeededPairsSlide1Content2Run2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  ist ähnelt.
        /// </summary>
        public static string Tutorial3NeededPairsSlide1Content2Run3 {
            get {
                return ResourceManager.GetString("Tutorial3NeededPairsSlide1Content2Run3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die wobei c eine kleine Konstante und DP die Wahrscheinlichkeit des Differenzials ist. ähnelt.
        /// </summary>
        public static string Tutorial3NeededPairsSlide1Content3 {
            get {
                return ResourceManager.GetString("Tutorial3NeededPairsSlide1Content3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Ein beispielhafter Wert für c ist beispielsweise 10. ähnelt.
        /// </summary>
        public static string Tutorial3NeededPairsSlide1Content4 {
            get {
                return ResourceManager.GetString("Tutorial3NeededPairsSlide1Content4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Anzahl der notwendigen Paare ähnelt.
        /// </summary>
        public static string Tutorial3NeededPairsSlide1Header {
            get {
                return ResourceManager.GetString("Tutorial3NeededPairsSlide1Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 4. Rauschverhältnis ähnelt.
        /// </summary>
        public static string Tutorial3SignalToNoiseHeader {
            get {
                return ResourceManager.GetString("Tutorial3SignalToNoiseHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Ein Werkzeug zur Beurteilung der Erfolgsaussichten, ist das so genannte Rauschverhältnis. ähnelt.
        /// </summary>
        public static string Tutorial3SignalToNoiseSlide1Content1 {
            get {
                return ResourceManager.GetString("Tutorial3SignalToNoiseSlide1Content1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Zur Bestimmung des Rauschverhältnis sind zum Teil experimentell zu bestimmtende Durchschnittswerte notwendig, wie beispielsweise der Anteil der Paare, die durch die Filterng entfernt werden oder die Durchschnittliche Anzahl der Teilschlüsselkandidaten, die ein Paar vorschlägt. ähnelt.
        /// </summary>
        public static string Tutorial3SignalToNoiseSlide1Content3 {
            get {
                return ResourceManager.GetString("Tutorial3SignalToNoiseSlide1Content3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die In der Online-Hilfe der DKA-PfadFinder-Komponente sind weitere Literatur-Angaben zu dem DKA-Verfahren hinterlegt. ähnelt.
        /// </summary>
        public static string Tutorial3SignalToNoiseSlide1Content4 {
            get {
                return ResourceManager.GetString("Tutorial3SignalToNoiseSlide1Content4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Rauschverhältnis ähnelt.
        /// </summary>
        public static string Tutorial3SignalToNoiseSlide1Header {
            get {
                return ResourceManager.GetString("Tutorial3SignalToNoiseSlide1Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Tutorial ähnelt.
        /// </summary>
        public static string Tutorial3TitleHeaderRun1 {
            get {
                return ResourceManager.GetString("Tutorial3TitleHeaderRun1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Differenzielle Kryptoanalyse symmetrischer Blockchiffren ähnelt.
        /// </summary>
        public static string Tutorial3TitleHeaderRun2 {
            get {
                return ResourceManager.GetString("Tutorial3TitleHeaderRun2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Sie können nun in der DKA-KeyRecovery-Komponente die in der DKA-PfadFinder-Komponente generierte Angriffskonfiguration verwenden, um Schlüsselbits wiederherzustellen. Dazu müssen Sie auf den Button &quot;Start&quot; klicken. ähnelt.
        /// </summary>
        public static string Tutorial3WaitingSlideContent1 {
            get {
                return ResourceManager.GetString("Tutorial3WaitingSlideContent1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Optional können Sie sich in der DKA-PfadVisualiserer-Komponente das ermittelte Differenzial und die darin enthaltenen Charakteristiken anzeigen lassen. ähnelt.
        /// </summary>
        public static string Tutorial3WaitingSlideContent2 {
            get {
                return ResourceManager.GetString("Tutorial3WaitingSlideContent2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Zusammenfassung der Analyse-Ergebnisse: ähnelt.
        /// </summary>
        public static string Tutorial3WaitingSlideContent3Run1 {
            get {
                return ResourceManager.GetString("Tutorial3WaitingSlideContent3Run1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Eingabedifferenz:  ähnelt.
        /// </summary>
        public static string Tutorial3WaitingSlideContent3Run2 {
            get {
                return ResourceManager.GetString("Tutorial3WaitingSlideContent3Run2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Erwartete Differenz:  ähnelt.
        /// </summary>
        public static string Tutorial3WaitingSlideContent3Run3 {
            get {
                return ResourceManager.GetString("Tutorial3WaitingSlideContent3Run3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Wahrscheinlichkeit:  ähnelt.
        /// </summary>
        public static string Tutorial3WaitingSlideContent3Run4 {
            get {
                return ResourceManager.GetString("Tutorial3WaitingSlideContent3Run4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Differenzielle Kryptoanalyse wird in den nachfolgenden Komponenten weitergeführt ähnelt.
        /// </summary>
        public static string Tutorial3WaitingSlideHeader {
            get {
                return ResourceManager.GetString("Tutorial3WaitingSlideHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Precalculated data ähnelt.
        /// </summary>
        public static string UseOfflinePaths {
            get {
                return ResourceManager.GetString("UseOfflinePaths", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die If this setting is selected, no search for
        ///characteristics, but are used for the respective
        ///box number uses precalculated data that is stored in the component.
        ///are. This allows long calculation times to be minimized. ähnelt.
        /// </summary>
        public static string UseOfflinePathsToolTip {
            get {
                return ResourceManager.GetString("UseOfflinePathsToolTip", resourceCulture);
            }
        }
    }
}
