<?xml version="1.0" encoding="utf-8"?>
<documentation>
  <language culture="en" />
  <language culture="zh-CN" />
  <language culture="ru" />
  <language culture="de-DE" />
  <introduction lang="en">
    This plugins searches for one or all prime factors of the given number.
    The plugin uses trial division for finding a prime factor, i.e. it divides the input number by every prime number, beginning
    with 2. When it finds a prime number for which the remainder is zero, it has found a prime factor of the number.
    With this method, only prime numbers up to the square root of the input number have to be checked.
  </introduction>
  <introduction lang="zh-CN">该插件搜索给定数量的一个或所有素数。该插件使用试验除法来查找素数，即，将输入数除以每个素数（从2开始）。当找到余数为零的素数时，便找到了该数的素数。使用此方法，仅需检查输入数字平方根以下的质数。</introduction>
  <introduction lang="ru">Эти плагины ищут один или все простые коэффициенты заданного числа. Плагин использует пробное деление для нахождения простого коэффициента, то есть он делит входное число на каждое простое число, начиная с 2. Когда он находит простое число, для которого остаток равен нулю, он нашел простой коэффициент числа. С помощью этого метода необходимо проверить только простые числа до квадратного корня входного числа.</introduction>
  <introduction lang="de-DE">
    Dieses Plugin sucht mit dem Verfahren der Probedivision einen oder alle Primfaktoren der eingegebenen Zahl.
    Bei der Probedivision wird die zu untersuchende Zahl durch alle aufeinanderfolgenden Primzahlen, beginnend mit der 2, geteilt.
    Bleibt bei der Division kein Rest übrig, so ist die getestete Primzahl ein Teiler der zu untersuchenden Zahl.
    Bei diesem Verfahren müssen Primzahlen nur bis höchstens zur Quadratwurzel der Zahl getestet werden.
  </introduction>
  <usage lang="en">
    This plugin expects a positive integer as input and tries to find one or all prime factors of this number.
    In the settings of the plugin you can choose whether the plugin should find only the smallest or all prime factors of the number.
    <newline /><newline />
    
    For big numbers, the search for a prime factor can take a very long time. Therefore you can provide an upper limit in the settings
    of the plugin for the magnitude of the primes that have to be checked by the algorithm. If the number is composite and no prime factor smaller than the
    upper limit is found, the algorithm stops and generates a warning message.
    <newline /><newline />

    If the plugin should only find the smallest prime factor, it sends the first prime factor it found to the ouput labeled 'Prime factor'. It then divides
    the input number by the prime factor and sends the result to the output labeled 'Remainder'.
    Observe that 'Remainder' is generally not a prime number, but a composite number.
    If the input number is a prime number, the plugin sends the number to the 'Prime factor' output and the number 1 to the 'Remainder' output.
    If the upper limit is activated and no smaller prime factors were found, the number is sent to the 'Prime factor' output and the 'Remainder' output stays empty.
    <newline /><newline />

    If the plugin should find all prime factors, it sends the array of the found prime factors to the ouput labeled 'Prime factors'.
    If the upper limit is activated, only those prime factors that are smaller than the limit are found.
    The last number in the array that is sent to the output 'Prime factors' is then set to the product of those prime factors of the input number, that are bigger than the limit.
    <newline /><newline />
    
    The factorization algorithm that is implemented in this plugin should only be applied to relatively small numbers. For numbers up to about 10^14, the trial division
    can execute the factorization in an acceptable amount of time. For bigger numbers, the running time depends largely upon the number of smaller prime factors that they have.
    If the number has too many big prime factors, the trial division algorithms meets its limits.
    For the factorization of bigger numbers there exist algorithms that are much more efficient,
    e.g. the quadratic sieve algorithm, which is implemented in the plugin <docRef item="CrypTool.Plugins.QuadraticSieve.QuadraticSieve" />.
  </usage>
  <usage lang="zh-CN">此插件需要一个正整数作为输入，并尝试查找此数字的一个或所有素数。在插件的设置中，您可以选择是只查找数字的最小素数还是所有素数。对于大数，寻找素数可能会花费很长时间。因此，您可以在插件的设置中提供必须由算法检查的素数大小的上限。如果该数字是复合数字，并且找不到小于上限的素数，则算法停止并生成警告消息。如果插件只能找到最小的素数，则将找到的第一个素数发送到标有“素数”的输出。然后，它将输入数字除以质数因子，然后将结果发送到标有“剩余”的输出。请注意，“余数”通常不是质数，而是复合数。如果输入数字是质数，则插件会将数字发送至“ Prime factor”输出，并将数字1发送至“ Remainder”输出。如果激活了上限并且没有找到较小的素数，则该数字将发送到“素数”输出，而“余数”输出将保持空白。如果插件应找到所有素数，则将找到的素数数组发送到标有“素数”的输出。如果激活了上限，则仅会找到小于该上限的素数。然后，将数组中发送到输出“素数因子”的最后一个数字设置为输入数的那些素数因子的乘积，该乘积大于限制。在此插件中实现的分解算法仅应应用于相对较小的数字。对于不超过10 ^ 14的数字，试验部门可以在可接受的时间内执行分解。对于较大的数量，运行时间主要取决于它们具有的较小质数的数量。如果数量中有太多主要因素，则试验划分算法将达到其极限。为了分解更大的数字，存在效率更高的算法，例如，在插件中实现的二次筛算法。</usage>
  <usage lang="ru">Этот плагин ожидает положительное целое число в качестве ввода и пытается найти один или все простые коэффициенты этого числа. В настройках плагина вы можете выбрать, должен ли плагин находить только самые маленькие или все первичные коэффициенты числа. Для больших чисел поиск простого фактора может занять очень много времени. Поэтому вы можете предоставить верхний предел в настройках плагина для величины простых чисел, которые должны быть проверены алгоритмом. Если число является составным и не имеет прямого коэффициента меньше верхнего предела, алгоритм останавливается и генерирует предупреждающее сообщение. Если плагин должен найти только наименьший первичный коэффициент, он отправляет первый первичный коэффициент, который он обнаружил для вывода, обозначенного «Prime factor». Затем он делит входной номер на первичный коэффициент и отправляет результат на вывод с надписью «Остаток». Обратите внимание, что «Остаток» обычно не является простым числом, а составным числом. Если входной номер является простым числом, плагин отправляет номер на выход «Prime factor», а номер 1 - на «Остаток». Если верхний предел активирован и не найдены меньшие первичные коэффициенты, число отправляется на выход «Prime factor», а выход «Остаток» остается пустым. Если плагин должен найти все простые факторы, он отправляет массив найденных первичных факторов в вывод, обозначенный «Prime factor». Если верхний предел активирован, то обнаруживаются только те основные коэффициенты, которые меньше предела. Последнее число в массиве, которое отправляется на выход «Prime factor», затем устанавливается на произведение тех простых коэффициентов входного числа, которые больше предела. Алгоритм факторизации, реализованный в этом плагине, должен применяться только к относительно небольшим числам. Для чисел до 10 ^ 14 пробное деление может выполнить факторизацию в приемлемое время. Для больших чисел время работы во многом зависит от количества меньших простых факторов, которые у них есть. Если число имеет слишком много больших основных факторов, алгоритмы пробного деления соответствуют его пределам. Для факторизации больших чисел существуют более эффективные алгоритмы, например алгоритм квадратичного сита, который реализуется в плагине.</usage>
  <usage lang="de-DE">
    Das Plugin erwartet als Eingabe die zu faktorisierende Zahl. Diese muss eine positive ganze Zahl sein.
    In den Einstellungen kann gewählt werden, ob nur der kleinste oder alle Primfaktoren dieser Zahl gesucht werden sollen.
    <newline /><newline />
    
    Da die Suche nach einem Primfaktor für große Zahlen sehr lange dauern kann, kann man in den Einstellungen des Plugins eine 
    obere Schranke für die zu testenden Primfaktoren angeben. Ist die Zahl zusammengesetzt und hat keinen Primfaktor, der kleiner als die angegebene Schranke ist,
    so wird die Suche abgebrochen und eine Warnmeldung ausgegeben.
    <newline /><newline />
    
    Soll nur der kleinste Primfaktor gesucht werden, so wird der erste gefundene Primfaktor am Ausgang 'Primfaktor' ausgegeben.
    Die Zahl wird dann durch diesen Primfaktor geteilt und das Ergebnis der Division wird am Ausgang 'Rest' ausgegeben.
    Beachten Sie, dass 'Rest' im Allgemeinen noch eine zusammengesetzte Zahl, also keine Primzahl ist.
    Ist die zu untersuchende Zahl eine Primzahl, so wird diese am Ausgang 'Primfaktor' ausgegeben und am Ausgang 'Rest' die Zahl 1.
    Wenn die obere Schranke aktiviert ist und kein kleinerer Primfaktor gefunden wurde, so wird am
    Ausgang 'Primfaktor' die Zahl selbst ausgegeben, am Ausgang 'Rest' wird hingegen nichts ausgegeben.
    <newline /><newline />

    Sollen alle Primfaktoren gesucht werden, werden die gefundenen Primfaktoren als Array am Ausgang 'Primfaktoren' ausgegeben.
    Wenn die obere Schranke aktiviert ist, so werden nur die Primfaktoren gefunden, die kleiner als diese Schranke sind.
    Die letzte Zahl im Ausgabe-Array 'Primfaktoren' ist in diesem Fall das Produkt der Primfaktoren der Eingabezahl, die größer
    als die Schranke sind.
    <newline /><newline />

    Der in diesem Plugin implementierte Faktorisierungsalgorithmus sollte nur auf kleine Zahlen angewendet werden. Für Zahlen bis etwa 10^14 kann die
    Probedivision die Faktorisierung zuverlässig in akzeptabler Zeit durchführen. Bei größeren Zahlen hängt die Laufzeit entscheidend davon ab, ob diese
    genügend kleinere Primfaktoren enthalten. Wenn die Zahl aber zu viele große Primfaktoren hat, so stößt die Probedivision an ihre Grenzen.
    Für die Faktorisierung größerer Zahlen existieren sehr viel effizientere Methoden, wie z.B. das quadratische Sieb, welches
    im Plugin <docRef item="CrypTool.Plugins.QuadraticSieve.QuadraticSieve" /> realisiert ist und dann diesem Plugin vorgezogen werden sollte.
  </usage>
  <references>
    <linkReference>
      <link lang="en" url="http://en.wikipedia.org/wiki/Integer_factorization" />
      <caption lang="en">Integer factorization</caption>
      <link lang="de-DE" url="http://de.wikipedia.org/wiki/Faktorisierungsverfahren" />
      <caption lang="de-DE">Faktorisierungsverfahren</caption>
    </linkReference>
  </references>
</documentation>