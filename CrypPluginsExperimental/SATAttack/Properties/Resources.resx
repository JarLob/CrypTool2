<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AttackModeCaption" xml:space="preserve">
    <value>Attack type</value>
  </data>
  <data name="AttackModeTooltip" xml:space="preserve">
    <value>Specify the type of attack</value>
  </data>
  <data name="ClearFileNameCaption" xml:space="preserve">
    <value>Clear file name</value>
  </data>
  <data name="ClearFileNameTooltip" xml:space="preserve">
    <value>Forget the output file name</value>
  </data>
  <data name="CnfFileCaption" xml:space="preserve">
    <value>Save CNF in file</value>
  </data>
  <data name="CnfFileTooltip" xml:space="preserve">
    <value>Choose a file to which the generated CNF will be written</value>
  </data>
  <data name="FileInputCaption" xml:space="preserve">
    <value>File</value>
  </data>
  <data name="FileInputTooltip" xml:space="preserve">
    <value>Select the input file</value>
  </data>
  <data name="GuessBitsCaption" xml:space="preserve">
    <value>Guess bits</value>
  </data>
  <data name="GuessBitsOptions" xml:space="preserve">
    <value>Guess bits options</value>
  </data>
  <data name="GuessBitsTooltip" xml:space="preserve">
    <value>Check for the option to guess some bits</value>
  </data>
  <data name="GuessedBitsCaption" xml:space="preserve">
    <value>Guessed bits</value>
  </data>
  <data name="GuessedBitsTooltip" xml:space="preserve">
    <value>Guess some of the input bits</value>
  </data>
  <data name="InputHashValueCaption" xml:space="preserve">
    <value>Hash value</value>
  </data>
  <data name="InputHashValueTooltip" xml:space="preserve">
    <value>Enter hash value for a preimage or second preimage attack (prefix 0x for hexadecimal, 0b for binary)</value>
  </data>
  <data name="InputMessageCaption" xml:space="preserve">
    <value>Second preimage</value>
  </data>
  <data name="InputMessageTooltip" xml:space="preserve">
    <value>Provide a second preimage for a second preimage attack (prefix 0x for hexadecimal, 0b for binary)</value>
  </data>
  <data name="InputSelectionCaption" xml:space="preserve">
    <value>Input selection</value>
  </data>
  <data name="InputSelectionFileInput" xml:space="preserve">
    <value>File input</value>
  </data>
  <data name="InputSelectionTextInput" xml:space="preserve">
    <value>Text input</value>
  </data>
  <data name="InputSelectionTooltip" xml:space="preserve">
    <value>Select how the code is passed to the SAT Attack component</value>
  </data>
  <data name="MainFunctionCaption" xml:space="preserve">
    <value>Main function name</value>
  </data>
  <data name="MainFunctionTooltip" xml:space="preserve">
    <value>Specify the main function name if main() is not the name of the main function</value>
  </data>
  <data name="OnlyCnfOutputCaption" xml:space="preserve">
    <value>CNF output only</value>
  </data>
  <data name="OnlyCnfOutputTooltip" xml:space="preserve">
    <value>Only translate C code to CNF, do not solve with the Sat solver</value>
  </data>
  <data name="OtherAttack" xml:space="preserve">
    <value>Other attack (placeholder)</value>
  </data>
  <data name="PluginCaption" xml:space="preserve">
    <value>SAT Attack</value>
  </data>
  <data name="PluginDescription" xml:space="preserve">
    <value>A tool for SAT-based cryptanalysis</value>
  </data>
  <data name="PreimageAttack" xml:space="preserve">
    <value>Preimage attack</value>
  </data>
  <data name="PreimageAttackOptions" xml:space="preserve">
    <value>Preimage attack options</value>
  </data>
  <data name="SecondPreimageAttack" xml:space="preserve">
    <value>Second preimage attack</value>
  </data>
  <data name="SecondPreimageAttackOptions" xml:space="preserve">
    <value>Second preimage attack options</value>
  </data>
</root>