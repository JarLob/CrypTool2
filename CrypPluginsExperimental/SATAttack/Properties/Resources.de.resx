<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AttackModeCaption" xml:space="preserve">
    <value>Angriffs-Modus</value>
  </data>
  <data name="AttackModeTooltip" xml:space="preserve">
    <value>Wählen Sie den Angriffs-Modus aus.</value>
  </data>
  <data name="BinaryString" xml:space="preserve">
    <value>(Binär): 0b</value>
  </data>
  <data name="BinaryStringError" xml:space="preserve">
    <value>Stellen Sie sicher, dass die Zeichenfolge nur Bitwerte enthält (0 oder 1), wenn das Präfix "0b" benutzt wird.</value>
  </data>
  <data name="BitNumberParseError" xml:space="preserve">
    <value>Parsen der Bitnummer der {0} Variable {1}: {2} fehlgeschlagen.</value>
  </data>
  <data name="CallingCbmcProcessString" xml:space="preserve">
    <value>Ruft den CBMC-Prozess… </value>
  </data>
  <data name="CallingSatSolverString" xml:space="preserve">
    <value>Ruft den SAT-Solver-Prozess… </value>
  </data>
  <data name="CallingSatSolverWithParametersString" xml:space="preserve">
    <value>Ruft SAT-Solver bei {0} mit den Parametern {1}.</value>
  </data>
  <data name="CbmcOutputStreamCaption" xml:space="preserve">
    <value>CBMC-Ausgabestrom</value>
  </data>
  <data name="CbmcOutputStreamTooltip" xml:space="preserve">
    <value>Leitet die Ausgabe des CBMC-Prozesses um.</value>
  </data>
  <data name="CbmcProcessError" xml:space="preserve">
    <value>Der CBMC-Prozess gab einen Fehler zurück.</value>
  </data>
  <data name="CbmcProcessKillException" xml:space="preserve">
    <value>Beendigung des CBMC-Prozesses löste eine Ausnahme aus: {0} {1}.</value>
  </data>
  <data name="CbmcProcessKillSuccess" xml:space="preserve">
    <value>Der CBMC-Prozess wurde erfolgreich beendet.</value>
  </data>
  <data name="CbmcProcessReturnedSuccessfully" xml:space="preserve">
    <value>Der CBMC-Prozess wurde nach {0} Sekunden erfolgreich beendet.</value>
  </data>
  <data name="CbmcProcessReturnedWithExitcode" xml:space="preserve">
    <value>Der CBMC-Prozess wurde mit dem Exitcode {0} beendet.</value>
  </data>
  <data name="CiphertextCaption" xml:space="preserve">
    <value>Geheimtext</value>
  </data>
  <data name="CiphertextEncodingError" xml:space="preserve">
    <value>Beim Kodieren der Geheimtext-Bits gab es einen Fehler.</value>
  </data>
  <data name="CiphertextTooltip" xml:space="preserve">
    <value>Geben Sie den Geheimtext ein.</value>
  </data>
  <data name="ClearFileNameCaption" xml:space="preserve">
    <value>Dateiname zurücksetzen</value>
  </data>
  <data name="ClearFileNameTooltip" xml:space="preserve">
    <value>Dateiname zurücksetzen</value>
  </data>
  <data name="CnfFileCaption" xml:space="preserve">
    <value>CNF in Datei speichern</value>
  </data>
  <data name="CnfFileNotFoundError" xml:space="preserve">
    <value>Die CNF-Datei konnte nicht gefunden werden bei {0}.</value>
  </data>
  <data name="CnfFileTooltip" xml:space="preserve">
    <value>Wählen Sie eine Datei aus, in der die generierte CNF gespeichert wird.</value>
  </data>
  <data name="CodefileNotFoundString" xml:space="preserve">
    <value>Die Datei mit dem Programmcode konnte nicht gefunden werden bei {0}.</value>
  </data>
  <data name="CopyingCnfString" xml:space="preserve">
    <value>Kopiert die CNF nach {0}… </value>
  </data>
  <data name="EncodingInputBitsString" xml:space="preserve">
    <value>Kodiert die Eingabe-Bits in der CNF… </value>
  </data>
  <data name="EncodingOutputBitsString" xml:space="preserve">
    <value>Kodiert die Ausgabe-Bits in der CNF… </value>
  </data>
  <data name="FailedString" xml:space="preserve">
    <value>fehlgeschlagen</value>
  </data>
  <data name="FileBigWarning" xml:space="preserve">
    <value>Datei {0} ist sehr groß: {1} Bytes.</value>
  </data>
  <data name="FileInputCaption" xml:space="preserve">
    <value>Datei</value>
  </data>
  <data name="FileInputTooltip" xml:space="preserve">
    <value>Wählen Sie die Eingabedatei aus.</value>
  </data>
  <data name="FixBitsCaption" xml:space="preserve">
    <value>Eingabebits festlegen</value>
  </data>
  <data name="FixBitsOptions" xml:space="preserve">
    <value>Optionen zum Festlegen der Bits</value>
  </data>
  <data name="FixBitsTooltip" xml:space="preserve">
    <value>Ankreuzen, um die Optionen für das Festlegen von Bits einzublenden.</value>
  </data>
  <data name="FixedBitsCaption" xml:space="preserve">
    <value>Festgelegte Bits</value>
  </data>
  <data name="FixedBitsEncoding" xml:space="preserve">
    <value>Kodiert festgelegte Bits in der CNF… </value>
  </data>
  <data name="FixedBitsEncodingError" xml:space="preserve">
    <value>Das Kodieren der festgelegten Bits gab einen Fehler zurück.</value>
  </data>
  <data name="FixedBitsEncodingHint" xml:space="preserve">
    <value>Das Zeichen {0} ist nicht erlaubt. Benutzen Sie nur die Zeichen '0', '1' und '*', um Bits festzulegen.</value>
  </data>
  <data name="FixedBitsEncodingStrangeError" xml:space="preserve">
    <value>In der Funktion encodeFixedBitsInCnf ist etwas schief gelaufen (dieser Code sollte nie erreicht werden).</value>
  </data>
  <data name="FixedBitsError" xml:space="preserve">
    <value>Fehler beim Abrufen der festgelegten Bits.</value>
  </data>
  <data name="FixedBitsSizeError" xml:space="preserve">
    <value>Die Anzahl der festgelegten Bits sollte kleiner oder gleich der Anzahl der Eingabebits sein{0}Festgelegte Bits: {1} Bits{0}Eingabebits: {2} Bits{0}Die festgelegten Bits werden vom niederwertigsten zum höchstwertigsten Bit auf die Größe der Eingabebits gekürzt.</value>
  </data>
  <data name="FixedBitsTooltip" xml:space="preserve">
    <value>Legen Sie eine beliebige Anzahl an Eingabebits fest.</value>
  </data>
  <data name="FixedBitsWarning" xml:space="preserve">
    <value>Die Option zum Festlegen von Bits wurde ausgewählt, aber es wurden keine Bits festgelegt.</value>
  </data>
  <data name="HashEncodingError" xml:space="preserve">
    <value>Das Kodieren des Hashwertes gab einen Fehler zurück.</value>
  </data>
  <data name="HexadecimalString" xml:space="preserve">
    <value>(Hexadezimal): 0x</value>
  </data>
  <data name="HexStringError" xml:space="preserve">
    <value>Stellen Sie sicher, dass die Zeichenfolge aus einer geraden Anzahl an regulären Hexadezimalzeichen besteht, wenn das Präfix "0x" benutzt wird.</value>
  </data>
  <data name="InputFoundString" xml:space="preserve">
    <value>Eingabe gefunden!</value>
  </data>
  <data name="InputHashValueCaption" xml:space="preserve">
    <value>Hashwert</value>
  </data>
  <data name="InputHashValueTooltip" xml:space="preserve">
    <value>Geben Sie den Hashwert für einen First-Preimage- oder Second-Preimage-Angriff ein (Präfix "0x" für hexadezimal, "0b" für binär).</value>
  </data>
  <data name="InputMappingError" xml:space="preserve">
    <value>Fehler beim Abrufen des Eingabe-Mappings.</value>
  </data>
  <data name="InputMessageCaption" xml:space="preserve">
    <value>Erstes Urbild</value>
  </data>
  <data name="InputMessageTooltip" xml:space="preserve">
    <value>Geben Sie ein erstes Urbild für den Second-Preimage-Angriff an (Präfix "0x" für hexadezimal, "0b" für binär).</value>
  </data>
  <data name="InputSelectionCaption" xml:space="preserve">
    <value>Eingabe-Auswahl</value>
  </data>
  <data name="InputSelectionFileInput" xml:space="preserve">
    <value>Dateieingabe</value>
  </data>
  <data name="InputSelectionTextInput" xml:space="preserve">
    <value>Texteingabe</value>
  </data>
  <data name="InputSelectionTooltip" xml:space="preserve">
    <value>Wählen Sie aus, wie der ANSI-C-Code an die SAT-Attack-Komponente übergeben wird.</value>
  </data>
  <data name="InputStreamCaption" xml:space="preserve">
    <value>Eingabestrom</value>
  </data>
  <data name="InputStreamTooltip" xml:space="preserve">
    <value>Verbinden Sie den Eingabestrom mit einer Texteingabe-Komponente, in der der ANSI-C-Code einer kryptographischen Funktion steht.</value>
  </data>
  <data name="InputVariablesSizeFailureString" xml:space="preserve">
    <value>Die Ermittlung der Größe der Eingabevariablen ist fehlgeschlagen.</value>
  </data>
  <data name="KeyRecoveryAttack" xml:space="preserve">
    <value>Key-Recovery-Angriff</value>
  </data>
  <data name="KeyRecoveryAttackOptions" xml:space="preserve">
    <value>Optionen für den Key-Recovery-Angriff</value>
  </data>
  <data name="LiteralParseError" xml:space="preserve">
    <value>Das Parsen des Literals für {0} Variable {1}:{2} ist fehlgeschlagen.</value>
  </data>
  <data name="LiteralParseError2" xml:space="preserve">
    <value>Das Parsen des Literals {0} ist fehlgeschlagen.</value>
  </data>
  <data name="MainFunctionCaption" xml:space="preserve">
    <value>Name der main-Funktion</value>
  </data>
  <data name="MainFunctionTooltip" xml:space="preserve">
    <value>Geben Sie den Namen der main-Funktion ein, falls dieser nicht "main()" ist.</value>
  </data>
  <data name="MappingFileNotFoundString" xml:space="preserve">
    <value>Die Mapping-Datei konnte unter {0} nicht gefunden werden.</value>
  </data>
  <data name="NotAHexCharError" xml:space="preserve">
    <value>Das Zeichen {0} ist kein gültiges Hexadezimalzeichen.</value>
  </data>
  <data name="OnlyCnfOutputCaption" xml:space="preserve">
    <value>Nur CNF-Ausgabe</value>
  </data>
  <data name="OnlyCnfOutputTooltip" xml:space="preserve">
    <value>Übersetze den ANSI-C-Code in eine CNF und kodiere den gewählten Angriff; der SAT-Solver wird nicht ausgeführt.</value>
  </data>
  <data name="OutputBitsError" xml:space="preserve">
    <value>Fehler beim Abrufen der Ausgabebits.</value>
  </data>
  <data name="OutputMappingError" xml:space="preserve">
    <value>Fehler beim Abrufen des Ausgabe-Mappings.</value>
  </data>
  <data name="OutputSizeError" xml:space="preserve">
    <value>Stellen Sie sicher, dass die vorgegebene Ausgabe die korrekte Länge hat{0}Hashwert / Geheimtext: {1} Bits{0}Ausgabe: {2} Bits.</value>
  </data>
  <data name="OutputStreamCaption" xml:space="preserve">
    <value>Ausgabestrom</value>
  </data>
  <data name="OutputStreamTooltip" xml:space="preserve">
    <value>Gibt Statusinformationen und das Ergebnis des Angriffs aus, falls der Angriff erfolgreich war.</value>
  </data>
  <data name="PlaintextCaption" xml:space="preserve">
    <value>Klartext</value>
  </data>
  <data name="PlaintextEncodingError" xml:space="preserve">
    <value>Das Kodieren der Klartextbits gab einen Fehler zurück.</value>
  </data>
  <data name="PlaintextPrefixInfoString" xml:space="preserve">
    <value>Stellen Sie sicher, dass der angegebene Klartext entweder das Präfix "0x" oder "0b" hat.</value>
  </data>
  <data name="PlaintextSizeError" xml:space="preserve">
    <value>Stellen Sie sicher, dass der angegebene Klartext die korrekte Länge hat (die Anzahl an Eingabebits muss größer als die Anzahl an Klartextbits sein){0}Klartext: {1} Bits{0}Eingabe: {2} Bits.</value>
  </data>
  <data name="PlaintextTooltip" xml:space="preserve">
    <value>Geben Sie den Klartext ein.</value>
  </data>
  <data name="PluginCaption" xml:space="preserve">
    <value>SAT-Angriff</value>
  </data>
  <data name="PluginDescription" xml:space="preserve">
    <value>Ein Tool für SAT-basierte Kryptoanalyse</value>
  </data>
  <data name="PrefixError" xml:space="preserve">
    <value>Benutzen Sie das Präfix "0x" für einen hexadezimalen Wert oder "0b" für einen binären Wert.</value>
  </data>
  <data name="PreimageAttack" xml:space="preserve">
    <value>Preimage-Angriff</value>
  </data>
  <data name="PreimageAttackOptions" xml:space="preserve">
    <value>Optionen für einen Preimage-Angriff</value>
  </data>
  <data name="SatOutputProcessError" xml:space="preserve">
    <value>Die Bearbeitung der SAT-Solver-Ausgabe gab einen Fehler zurück.</value>
  </data>
  <data name="SatProcessKillException" xml:space="preserve">
    <value>Die Beendigung des SAT-Solver-Prozesses löste eine Ausnahme aus: {0} {1}.</value>
  </data>
  <data name="SatProcessKillSuccess" xml:space="preserve">
    <value>Der SAT-Solver-Prozess wurde erfolgreich beendet.</value>
  </data>
  <data name="SatProcessReturnedSuccessful" xml:space="preserve">
    <value>Der SAT-Solver-Prozess wurde nach {0} Sekunden erfolgreich beendet.</value>
  </data>
  <data name="SatProcessReturnedUnsat" xml:space="preserve">
    <value>Der SAT-Solver-Prozess wurde nach {0} Sekunden beendet … aber er konnte keine Lösung finden.</value>
  </data>
  <data name="SatSolverOutputFileError" xml:space="preserve">
    <value>Die Datei mit der SAT-Solver-Ausgabe konnte nicht gefunden werden bei {0}.</value>
  </data>
  <data name="SatSolverOutputFirstLineError" xml:space="preserve">
    <value>In der SAT-Solver-Ausgabedatei {0} steht in der ersten Zeile nicht "SAT".</value>
  </data>
  <data name="SatSolverOutputStreamCaption" xml:space="preserve">
    <value>SAT-Solver</value>
  </data>
  <data name="SatSolverOutputStreamTooltip" xml:space="preserve">
    <value>Leitet die Ausgabe des SAT-Solver-Prozesses um.</value>
  </data>
  <data name="SatSolverReturnedWithExitcode" xml:space="preserve">
    <value>Der SAT-Solver-Prozess wurde mit dem Exitcode {0} beendet.</value>
  </data>
  <data name="SecondPreimageAttack" xml:space="preserve">
    <value>Second-Preimage-Angriff</value>
  </data>
  <data name="SecondPreimageAttackOptions" xml:space="preserve">
    <value>Optionen für den Second-Preimage-Angriff</value>
  </data>
  <data name="SecondPreimageEncodingError" xml:space="preserve">
    <value>Das Kodieren der Second-Preimage-Bits gab einen Fehler zurück.</value>
  </data>
  <data name="SecondPreimageEncodingString" xml:space="preserve">
    <value>Kodiert das First-Preimage in der CNF … </value>
  </data>
  <data name="SecondPreimageRetrievingError" xml:space="preserve">
    <value>Fehler beim Abrufen der Second-Preimage-Bits.</value>
  </data>
  <data name="SecondPreimageSizeError" xml:space="preserve">
    <value>Stellen Sie sicher, dass das angegebene Second-Preimage die korrekte Länge hat{0}Second-Preimage: {1} Bits{0}Eingabe: {2} Bits.</value>
  </data>
  <data name="SkippingSatSolverString" xml:space="preserve">
    <value>Überpringt SAT-Solver-Prozess… </value>
  </data>
  <data name="SuccessfulString" xml:space="preserve">
    <value>erfolgreich</value>
  </data>
  <data name="UnassignedVariableWarning" xml:space="preserve">
    <value>Die Variable {0}_{1}:{2} erscheint nicht in dem {3} Mapping. Wird die Variable {0}_{1} im ANSI-C Code benutzt? Der Variablen wird automatisch der Wert "false" zugeordnet.</value>
  </data>
  <data name="VariableDefinitionsError" xml:space="preserve">
    <value>Stellen Sie sicher, dass die {0} Variablen-Deklarationen mit {1}_0 beginnen, dass die Indizes stetig wachsen, und dass jede Variable tatsächlich im C-Code benutzt wird.</value>
  </data>
  <data name="VariableIndexParseError" xml:space="preserve">
    <value>Das Parsen des Variablenindex von {0} Variable {1}:{2} schlug fehl.</value>
  </data>
  <data name="VariableNumberParsingFailedString" xml:space="preserve">
    <value>Das Auslesen der Anzahl an {0} Variablen schlug fehl.</value>
  </data>
  <data name="VariableSizeParsingFailedString" xml:space="preserve">
    <value>Das Auslesen der Größe der {0} Variablen schlug fehl.</value>
  </data>
  <data name="InputFoundStringKeyRecovery" xml:space="preserve">
    <value>Key-Recovery-Angriff: Zum gegebenen Klartext und Geheimtext wurde ein passender Schlüssel gefunden:</value>
  </data>
  <data name="InputFoundStringPreimage" xml:space="preserve">
    <value>Preimage-Angriff: Zum gegebenen Hashwert wurde eine passende Eingabe gefunden:</value>
  </data>
  <data name="InputFoundStringSecondPreimage" xml:space="preserve">
    <value>Second-Preimage-Angriff: Zum gegebenen Hashwert wurde eine passende Eingabe gefunden welche sich von dem gegebenen First-Preimage unterscheidet:</value>
  </data>
  <data name="TimeFormat" xml:space="preserve">
    <value>s','fff</value>
  </data>
  <data name="CbmcExeNotFound" xml:space="preserve">
    <value>Das CBMC-Executable konnte nicht gefunden werden bei
{0}.</value>
  </data>
  <data name="satSolverExeNotFound" xml:space="preserve">
    <value>Das SAT-Solver-Executable konnte nicht gefunden werden bei
{0}.</value>
  </data>
</root>