<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="WatermarkCreatorSettings_ModificationType_ExtractText" xml:space="preserve">
    <value>Extract hidden Watermark from image</value>
  </data>
  <data name="WatermarkCreatorSettings_ModificationType_EmbedInvisibleText" xml:space="preserve">
    <value>Embed invisible watermark into the image</value>
  </data>
  <data name="WatermarkCreatorSettings_ModificationType_EmbedText" xml:space="preserve">
    <value>Embed visible text into the image</value>
    <comment>E,g, copyright notice</comment>
  </data>
  <data name="ImageCaption" xml:space="preserve">
    <value>Image</value>
  </data>
  <data name="ImageTooltip" xml:space="preserve">
    <value>The image which should be used to embed/extract a digital watermark.</value>
  </data>
  <data name="PluginCaption" xml:space="preserve">
    <value>Watermark Creator</value>
  </data>
  <data name="PluginTooltip" xml:space="preserve">
    <value>Component to write and extract a digital watermark to an image.</value>
  </data>
  <data name="ModificationTypeDes" xml:space="preserve">
    <value>Choose what kind of modification should be done to the input image</value>
  </data>
  <data name="BotLoc" xml:space="preserve">
    <value>Locate watermark at the bottom of the image</value>
  </data>
  <data name="BoxSizeDes" xml:space="preserve">
    <value>The bigger the box, the higher the error correction, the more solid the watermark, but less data can be stored</value>
  </data>
  <data name="BoxSizeCap" xml:space="preserve">
    <value>Box size</value>
  </data>
  <data name="WatermarkLocationDes" xml:space="preserve">
    <value>Chose the location where the watermark will be placed on the image</value>
  </data>
  <data name="OpacityDes" xml:space="preserve">
    <value>Opacity of the watermark. A higher value means more opacity</value>
  </data>
  <data name="ErrorCorrectionDes" xml:space="preserve">
    <value>Set number of bytes used for error correction</value>
  </data>
  <data name="ErrorCorrectionCap" xml:space="preserve">
    <value>Error correction</value>
  </data>
  <data name="FontTypeCap" xml:space="preserve">
    <value>Font type</value>
  </data>
  <data name="ModificationTypeCap" xml:space="preserve">
    <value>Modification type</value>
  </data>
  <data name="OpacityCap" xml:space="preserve">
    <value>Opacity of the watermark</value>
  </data>
  <data name="OtherLoc" xml:space="preserve">
    <value>Choose a custom location</value>
  </data>
  <data name="Seed" xml:space="preserve">
    <value>Set some random number that will be used as seed</value>
  </data>
  <data name="Seed1" xml:space="preserve">
    <value>Seed 1</value>
  </data>
  <data name="Seed2" xml:space="preserve">
    <value>Seed 2</value>
  </data>
  <data name="TextSizeMaxDes" xml:space="preserve">
    <value>Maximum size of the text to be used when embedding the watermark. Internally, the maximum possible size that fits the whole text onto the image in one line will be chosen</value>
    <comment>Size will be adjusted dynamically to fit the watermark into the picture, you can just define the maximum size</comment>
  </data>
  <data name="TextSizeMaxCap" xml:space="preserve">
    <value>Maximum text size</value>
  </data>
  <data name="TopLoc" xml:space="preserve">
    <value>Locate at top of the image</value>
  </data>
  <data name="WatermarkLocationCap" xml:space="preserve">
    <value>Location of the watermark</value>
  </data>
  <data name="AdvancedModeCap" xml:space="preserve">
    <value>Use advanced mode</value>
  </data>
  <data name="AdvancedModeDes" xml:space="preserve">
    <value>Do you want to use advanced mode which offers more settings to be set by the user?</value>
  </data>
  <data name="FontTypeDes" xml:space="preserve">
    <value>Font type that is used for the watermark</value>
  </data>
  <data name="LocationPercentageCap" xml:space="preserve">
    <value>Custom location of the watermark</value>
  </data>
  <data name="LocationPercentageDes" xml:space="preserve">
    <value>Lets you manually set the location of the watermark. The further to the right you put the slider, the further up to the top the watermark will move</value>
  </data>
  <data name="NoPictureError" xml:space="preserve">
    <value>Please provide a valid image as a carrier for the watermark, using the file input component</value>
  </data>
  <data name="NoTextError" xml:space="preserve">
    <value>Please provide a string to be added to the image as a watermark, using the text input component</value>
  </data>
  <data name="TextCaption" xml:space="preserve">
    <value>Embedded Text</value>
  </data>
  <data name="TextTooltip" xml:space="preserve">
    <value>Extracted text that was embedded in the image</value>
  </data>
  <data name="WatermarkCaption" xml:space="preserve">
    <value>Watermark</value>
  </data>
  <data name="WatermarkImageCaption" xml:space="preserve">
    <value>Image with Watermark</value>
  </data>
  <data name="WatermarkImageTooltip" xml:space="preserve">
    <value>Image with text added to it as a watermark</value>
  </data>
  <data name="WatermarkTooltip" xml:space="preserve">
    <value>Text to be added to the image as a watermark</value>
  </data>
</root>