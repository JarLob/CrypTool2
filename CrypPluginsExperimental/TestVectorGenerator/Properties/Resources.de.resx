<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="TVGcaption" xml:space="preserve">
    <value>TestVectorGenerator</value>
  </data>
  <data name="Alphabet_input_is_empty_" xml:space="preserve">
    <value>Die Alphabet-Eingabe ist leer!</value>
  </data>
  <data name="Too_many_sentences_added_for_length" xml:space="preserve">
    <value>Zu viele Sätze hinzugefügt für die Länge: </value>
  </data>
  <data name="AlphabetInputCaption" xml:space="preserve">
    <value>Alphabet</value>
  </data>
  <data name="AlphabetInputTooltip" xml:space="preserve">
    <value>Die optionale Alphabet-Eingabe für die Key-Generierung</value>
  </data>
  <data name="DebugOutputCaption" xml:space="preserve">
    <value>Debug-Ausgabe</value>
  </data>
  <data name="DebugOutputTooltip" xml:space="preserve">
    <value>Die Debug-Ausgabe kann für zusätzliche Debug-Informationen genutzt werden</value>
  </data>
  <data name="KeyOutputCaption" xml:space="preserve">
    <value>Schlüssel</value>
  </data>
  <data name="KeyOutputTooltip" xml:space="preserve">
    <value>Der generierte Schlüssel</value>
  </data>
  <data name="PlaintextOutputCaption" xml:space="preserve">
    <value>Klartext</value>
  </data>
  <data name="PlaintextOutputTooltip" xml:space="preserve">
    <value>Der generierte Klartext</value>
  </data>
  <data name="RegexInputCaption" xml:space="preserve">
    <value>Regex-Muster</value>
  </data>
  <data name="RegexInputTooltip" xml:space="preserve">
    <value>Das Regex-Muster für die Schlüssel-Generierung mittels Revers-Regex</value>
  </data>
  <data name="SeedInputCaption" xml:space="preserve">
    <value>Samen</value>
  </data>
  <data name="SeedInputTooltip" xml:space="preserve">
    <value>Der Samenwert (Seed) der vom Pseudo-Zufallszahlen-Generator genutzt wird, wodurch die Testvektoren reproduzierbar sind</value>
  </data>
  <data name="TextInputCaption" xml:space="preserve">
    <value>Eingabetext</value>
  </data>
  <data name="TextInputTooltip" xml:space="preserve">
    <value>Der Eingabetext vom dem die Klartexte und Natürliche-Sprache-Schlüssel entnommen werden</value>
  </data>
  <data name="TotalKeysCaption" xml:space="preserve">
    <value>Gesamte Schlüssel</value>
  </data>
  <data name="TotalKeysTooltip" xml:space="preserve">
    <value>Die Gesamtzahl der Schlüssel die generiert werden sollen</value>
  </data>
  <data name="TVGtooltip" xml:space="preserve">
    <value>Generiert Schlüssel und Klartexte als Testvektoren</value>
  </data>
  <data name="input_text_too_short" xml:space="preserve">
    <value>Der eingegebene Text scheint zu kurz zu sein für die eingegebene Anzahl an Klartexten!</value>
  </data>
  <data name="Alphabet_length_is_too_short" xml:space="preserve">
    <value>Die Alphabet-Länge ({0}) ist zu kurz um eine Zeichenkette der Länge {1} aus einmaligen Buchstaben zu generieren!</value>
  </data>
  <data name="Alphabet_with_hypen_not_recognized_" xml:space="preserve">
    <value>Das Alphabet mit einfachem '-' wurde nicht erkannt!</value>
  </data>
  <data name="Numeric_alphabet_not_recognized" xml:space="preserve">
    <value>Numerisches Alphabet nicht erkannt!</value>
  </data>
  <data name="Latin_alphabet_not_recognized" xml:space="preserve">
    <value>Lateinisches Alphabet nicht erkannt!</value>
  </data>
  <data name="Multiple_round_brackets_not_supported_yet" xml:space="preserve">
    <value>Mehrere runde Klammern werden noch nicht unterstützt!</value>
  </data>
  <data name="Error_involving_multiple_brackets" xml:space="preserve">
    <value>Fehler bei mehreren Klammern!</value>
  </data>
  <data name="Error_parsing_length_string" xml:space="preserve">
    <value>Fehler beim Parsen der Zeichenkette!</value>
  </data>
  <data name="regexString_does_not_match_regex" xml:space="preserve">
    <value>Zeichenkette "{0}" stimmt nicht mit regulärem Ausdruck "{1}" überein!</value>
  </data>
  <data name="The_input_text_is_missing" xml:space="preserve">
    <value>Der Eingabetext fehlt!</value>
  </data>
  <data name="The_input_seed_is_missing" xml:space="preserve">
    <value>Der einzugebende Samen fehlt!</value>
  </data>
  <data name="The_input_regex_is_missing" xml:space="preserve">
    <value>Der einzugebende reguläre Ausdruck fehlt!</value>
  </data>
  <data name="Maximum_key_length_has_to_be_at_least_minimum_key_length" xml:space="preserve">
    <value>Die maximale Schlüssellänge muss mindestens der minimalen Länge entsprechen!</value>
  </data>
  <data name="Maximum_text_length_has_to_be_at_least_minimum_text_length" xml:space="preserve">
    <value>Die maximale Textlänge muss mindestens der minimalen Länge entsprechen!</value>
  </data>
  <data name="The_text_length_increase_has_to_be_" xml:space="preserve">
    <value>Die Erhöhung der Textlänge darf maximal die Differenz zwischen maximaler und minimaler Textlänge betragen!</value>
  </data>
  <data name="The_input_text_is_too_small" xml:space="preserve">
    <value>Der eingegebene Text ist zu kurz!</value>
  </data>
  <data name="All_keys_have_been_generated" xml:space="preserve">
    <value>Alle Testvektoren wurden generiert. Halte die Generierung jetzt an.</value>
  </data>
  <data name="BinaryCaption" xml:space="preserve">
    <value>Binär</value>
  </data>
  <data name="DeleteSpacesCaption" xml:space="preserve">
    <value>Lösche Leerzeichen</value>
  </data>
  <data name="DeleteSpacesTooltipCaption" xml:space="preserve">
    <value>Lösche die Leerzeichen im Eingabetext</value>
  </data>
  <data name="IgnoreCaption" xml:space="preserve">
    <value>Ignorieren</value>
  </data>
  <data name="InputAlphabetCaption" xml:space="preserve">
    <value>Verwende das Eingabe-Alphabet</value>
  </data>
  <data name="keyGenerationTypeCaption" xml:space="preserve">
    <value>Typ der Schlüssel-Generierung</value>
  </data>
  <data name="KeyGenerationTypeTooltipCaption" xml:space="preserve">
    <value>Der Typ des zu generierenden Schlüssels</value>
  </data>
  <data name="KeyGroupCaption" xml:space="preserve">
    <value>Schlüssel Einstellungen</value>
  </data>
  <data name="LettersCaption" xml:space="preserve">
    <value>Buchstaben</value>
  </data>
  <data name="MaximumKeyLengthCaption" xml:space="preserve">
    <value>Maximale Schlüssellänge</value>
  </data>
  <data name="MaximumKeyLengthTooltipCaption" xml:space="preserve">
    <value>Maximale Länge der zu generierenden Schlüssel</value>
  </data>
  <data name="MaximumPlaintextLengthCaption" xml:space="preserve">
    <value>Maximale Klartextlänge</value>
  </data>
  <data name="MaximumPlaintextLengthCaptionTooltipCaption" xml:space="preserve">
    <value>Die größte Klartextlänge die generiert werden soll</value>
  </data>
  <data name="MinimumKeyLengthCaption" xml:space="preserve">
    <value>Minimale Schlüssellänge</value>
  </data>
  <data name="MinimumKeyLengthTooltipCaption" xml:space="preserve">
    <value>Minimale Länge der zu generierenden Schlüssel</value>
  </data>
  <data name="MinimumPlaintextLengthCaption" xml:space="preserve">
    <value>Minimale Klartextlänge</value>
  </data>
  <data name="MinimumPlaintextLengthCaptionTooltipCaption" xml:space="preserve">
    <value>Die kleinste Klartextlänge die generiert werden soll</value>
  </data>
  <data name="NaturalLanguageCaption" xml:space="preserve">
    <value>Natürliche Sprache</value>
  </data>
  <data name="NaturalLanguageKeyFormatCaption" xml:space="preserve">
    <value>Natürliche Sprache Schlüsselformat</value>
  </data>
  <data name="NaturalLanguageKeyFormatTooltipCaption" xml:space="preserve">
    <value>Schlüsselformat der Natürliche-Sprache-Schlüssel</value>
  </data>
  <data name="NumberHandlingCaption" xml:space="preserve">
    <value>Zahlen-Behandlung</value>
  </data>
  <data name="NumberHandlingTooltipCaption" xml:space="preserve">
    <value>Ignorieren, entfernen oder ersetzen der Zahlen im Eingabetext</value>
  </data>
  <data name="NumberOfTestRunsCaption" xml:space="preserve">
    <value>Anzahl der Testläufe</value>
  </data>
  <data name="NumberOfTestRunsTooltipCaption" xml:space="preserve">
    <value>Die Gesamtzahl der Testläufe für diese Testserie</value>
  </data>
  <data name="NumbersCaption" xml:space="preserve">
    <value>Zahlen</value>
  </data>
  <data name="NumericKeyFromTextCaption" xml:space="preserve">
    <value>Aus dem Eingabetext abgeleiteter numerischer Schlüssel</value>
  </data>
  <data name="PeriodReplacerCaption" xml:space="preserve">
    <value>Ersetze Punkte mit:</value>
  </data>
  <data name="PeriodReplacerTooltipCaption" xml:space="preserve">
    <value>Das Symbol mit dem Punkte ersetzt werden sollen</value>
  </data>
  <data name="PeriodSymbolHandlingCaption" xml:space="preserve">
    <value>Punkte-Behandlung</value>
  </data>
  <data name="PeriodSymbolHandlingTooltipCaption" xml:space="preserve">
    <value>Ignorieren, entfernen oder ersetzen der Punkte im Eingabetext</value>
  </data>
  <data name="PlaintextGroupCaption" xml:space="preserve">
    <value>Klartext-Einstellungen</value>
  </data>
  <data name="PlaintextLengthStepIncreaseCaption" xml:space="preserve">
    <value>Klartext-Verlängerung pro Schritt</value>
  </data>
  <data name="PlaintextLengthStepIncreaseTooltipCaption" xml:space="preserve">
    <value>Die Anzahl von Symbolen um die der Klartext pro Verlängerungs-Schritt verlängert werden soll</value>
  </data>
  <data name="RandomFromAlphabetCaption" xml:space="preserve">
    <value>Zufällig vom Alphabet</value>
  </data>
  <data name="RandomKeyFormatCaption" xml:space="preserve">
    <value>Zufälliges Schlüssel-Format</value>
  </data>
  <data name="RandomKeyFormatTooltipCaption" xml:space="preserve">
    <value>Schlüssel-Format des zufälligen Schlüssels</value>
  </data>
  <data name="RandomRegexCaption" xml:space="preserve">
    <value>Zufällig durch Revers-Regex</value>
  </data>
  <data name="RemoveCaption" xml:space="preserve">
    <value>Entfernen</value>
  </data>
  <data name="ReplaceSzCaption" xml:space="preserve">
    <value>Ersetze ß durch sz</value>
  </data>
  <data name="ReplaceSZTooltipCaption" xml:space="preserve">
    <value>Ersetze ß durch sz im Eingabetext</value>
  </data>
  <data name="ReplaceUmlautsCaption" xml:space="preserve">
    <value>Ersetze Umlaute</value>
  </data>
  <data name="ReplaceUmlautsTooltipCaption" xml:space="preserve">
    <value>Ersetze Umlaute im Eingabetext</value>
  </data>
  <data name="ReplaceWithCaption" xml:space="preserve">
    <value>Ersetze mit:</value>
  </data>
  <data name="ReplaceWithEINSCaption" xml:space="preserve">
    <value>Ersetze mit NULL, EINS, ZWEI, ...</value>
  </data>
  <data name="ReplaceWithNullCaption" xml:space="preserve">
    <value>Ersetze mit NULL, ONE, TWO, ...</value>
  </data>
  <data name="SentencesFromTextCaption" xml:space="preserve">
    <value>Sätze vom Eingabetext</value>
  </data>
  <data name="SeparatorCaption" xml:space="preserve">
    <value>Trenner zwischen Schlüssel-Symbolen</value>
  </data>
  <data name="SeparatorTooltipCaption" xml:space="preserve">
    <value>Trenn-Symbol zwischen den zu generierenden Schlüssel-Symbolen</value>
  </data>
  <data name="ShowExtendedSettingsCaption" xml:space="preserve">
    <value>Zeige erweiterte Einstellungen</value>
  </data>
  <data name="ShowExtendedSettingsTooltipCaption" xml:space="preserve">
    <value>Zeige oder verstecke die erweiterten Einstellungen</value>
  </data>
  <data name="UniqueSymbolUsageCaption" xml:space="preserve">
    <value>Einmalige Symbol-Verwendung</value>
  </data>
  <data name="UniqueSymbolUsageTooltipCaption" xml:space="preserve">
    <value>Nutze jedes Symbol des Alphabets für die Schlüssel-Generierung nur einmalig</value>
  </data>
  <data name="UppercaseOnlyCaption" xml:space="preserve">
    <value>Nur Großbuchstaben</value>
  </data>
  <data name="UppercaseOnlyTooltipCaption" xml:space="preserve">
    <value>Forme den Eingabetext zu Großbuchstaben um</value>
  </data>
</root>