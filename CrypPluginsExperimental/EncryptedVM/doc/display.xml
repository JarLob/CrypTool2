<?xml version="1.0" encoding="utf-8" ?>

<documentation>
  <language culture="en"/>
  <language culture="de-DE"/>

  <introduction lang="en">
    A virtual machine, which allows to execute encrypted software, qualifies for secret program execution.<newline />
    If a user wants to get his program executed by a third party without revealing the input, output or the program itself, he can achieve that by encrypting his program (this only works for batch programs without later user interaction). The requirement of not knowing the input or output is not a mandatory one.
    In both cases the third party receives the encrypted program, which can be executed using the virtual machine. The encrypted result will then be returned to the user.<newline />
    To be able to execute an encrypted program, homomorphic encryption is used.<newline />
    The process of executing a program can be described as follows:
    <enum>
      <item>Generate keys <!-- (<docRef item="Cryptool.Plugins.EncryptedVMKeyGen"/>) --></item>
	  <item>Assemble and encrypt program code into machine code <!-- (<docRef item="Cryptool.Plugins.EncryptedVMAssembler"/>) --></item>
	  <item>Execute the machine code <!-- (<docRef item="Cryptool.Plugins.EncryptedVMMachine"/>) --></item>
	  <item><b>Decrypt and interpret the result</b></item>
    </enum>
	All these steps are available by using plugins in <i>CrypTool 2</i>.<newline />
	The used virtual machine is based on <i>ShapeCPU</i> and works in conjunction with <i>SEAL</i> (Simple Encrypted Arithmetic Library), which implements the Fan-Vercauteren homomorphic cryptosystem.
	
	<section headline="Memory Display">  
	  The memory display decrypts and interprets the content of the memory supplied by the <i>Machine</i>.
	  By specifying a program to interpret the content of the memory it's possible to output a certain notation.
	  The supplied program has to be written in C#. The code is surrounded by a function and the content of the memory is given in an one-dimensional boolean array (<i>memory</i>).
	  The <i>SubMemory(data, index, length)</i> function outputs a specified part of the memory. The method <i>Decode(values)</i> decodes a boolean array into an integer. The desired output has to been written to the string variable <i>output</i>.<newline />
	  Example:<newline />
	  output += Decode(SubMemory(memory, 0, 8));<newline />
	  <newline />
	  This example outputs the first 8 bit of the memory interpreted as an integer.
	</section> 
  </introduction>

  <introduction lang="de-DE">
    Eine verschlüsselt arbeitende virtuelle Maschine erlaubt es, das auszuführende Programm zu verbergen.<newline />
    Möchte ein Nutzer sein Programm von einer dritten Partei ausführen lassen, ohne dass diese die Eingabe, den Algorithmus oder auch die Ausgabe kennt, so kann er dies durch die Verschlüsselung seines Programms samt Daten erreichen (dies geht nur für Batchprogramme ohne spätere User-Interaktion). Die Forderung nach der Unkenntlichmachung der Eingabe/Ausgabe kann aber auch entfallen.
    In beiden Fällen erhält die dritte Partei das verschlüsselte Programm und führt es mittels der virtuellen Maschine aus. Das verschlüsselte Ergebnis wird danach an den Nutzer zurückübermittelt.<newline />
    Die Möglichkeit, ein verschlüsseltes Programm auszuführen, wird durch die Nutzung eines homomorphen Kryptosystems erreicht.<newline />
    Der Ablauf beim Ausführen eines verschlüsselten Programms sieht wie folgt aus:
    <enum>
      <item>Schlüsselgenerierung <!-- (<docRef item="Cryptool.Plugins.EncryptedVMKeyGen"/>) --></item>
	  <item>Assemblierung und Verschlüsselung des Programmcodes in Maschinencode <!-- (<docRef item="Cryptool.Plugins.EncryptedVMAssembler"/>) --></item>
	  <item>Ausführen des Maschinencodes <!-- (<docRef item="Cryptool.Plugins.EncryptedVMMachine"/>) --></item>
	  <item><b>Entschlüsselung und Interpretation des Ergebnisses</b></item>
    </enum>
    Alle diese Schritte sind einzeln als Plugins im <i>CrypTool 2</i> verfügbar.<newline />
    Die verschlüsselt arbeitende virtuelle Maschine basiert auf <i>ShapeCPU</i> und wird in Kombination mit der Kryptobibliothek <i>SEAL</i> (Simple Encrypted Arithmetic Library), welche die homomorphe Verschlüsselung nach <i>Fan-Vercauteren</i> umsetzt, genutzt.

    <section headline="Speicheranzeige">
	  Die Speicheranzeige entschlüsselt und interpretiert den von der <i>Maschine</i> übermittelten Speicherinhalt.<newline />
	  Mittels Angabe eines Programmes zur Interpretierung des Speicherinhaltes kann auch eine eigene Darstellungsart gewählt werden.
	  Das angegebene Programm muss in C# vorliegen. Der Programmcode befindet sich in einer Funktionsumgebung und der Speicherinhalt steht in einem eindimensionalen booleschen Feld (<i>memory</i>).
	  Durch die Methode <i>SubMemory(data, index, length)</i> kann ein Teil des Speichers ausgewählt werden und mittels <i>Decode(values)</i> in eine natürliche Zahl überführt werden. Die erwünschte Ausgabe muss in die Variable <i>output</i> vom Typ String geschrieben werden.<newline />
	  Beispiel:<newline />
	  output += Decode(SubMemory(memory, 0, 8));<newline />
	  <newline />
	  Das Beispiel gibt die ersten acht Bit des Speichers als natürliche Zahl aus.
	</section>  
  </introduction>

  <usage lang="en">
    <section headline="Input">
	  The encrypted memory content should be connected to the <i>Machine</i>.
	  The private key and the encryption parameters should be connected to the <i>Key Generator</i>.
	  It's possible the decide whether to just dump the memory content or interpret it by connecting to a <i>File Input</i> plugin.	  
    </section>

    <section headline="Output">
	  The result is either a memory dump or the generated output of the specified interpreting program (via <i>Textoutput</i>-Plugin).
    </section>
	
	<section headline="Progress bar">
      <list>
        <item>0%: Start of the plugin.</item>
        <item>50%: If a C# program was connected: The program is compiled.</item>
	    <item>100%: The memory (or it's interpretation) has been written.</item>
      </list>
    </section>
  </usage>

  <usage lang="de-DE">
    <section headline="Eingabe">
	  Der vom <i>Assembler</i> generierte, verschlüsselte Maschinencode.<newline />
	  Der private Schlüssel und die Verschlüsselungs-Parameter sind vom  <i>Schlüsselgenerator</i> zuzuführen.
	  Zudem ist es möglich entweder einen Speicherabzug zu generieren oder den Speicher durch Verbindung mit einem <i>Texteingabe</i>-Plugin zu interpretieren.
    </section>
	
    <section headline="Ausgabe">
	  Die Ausgabe ist entweder ein Speicherabbild oder der vom C#-Code generierte String.
    </section>
	
	<section headline="Fortschrittsanzeige">
      <list>
        <item>0%: Start des Plugins.</item>
        <item>50%: Falls ein C#-Programm angegeben wurde: Das Programm wurde kompiliert.</item>
	    <item>100%: Der Speicher (oder die Interpretierung dessen) wurde ausgegeben.</item>
      </list>
    </section>
  </usage>
  
  <presentation lang="en">
  </presentation>
  
  <presentation lang="de-DE">
  </presentation>
  
 <references>
    <linkReference>
	  <link url="https://en.wikipedia.org/wiki/Homomorphic_encryption" lang="en" />
      <caption lang="en">Homomorphic encryption (Wikipedia)</caption>
      <link url="https://de.wikipedia.org/wiki/Homomorphe_Verschlüsselung" lang="de-DE" />
	  <caption lang="de-DE">Homomorphe Verschlüsselung (Wikipedia)</caption>
    </linkReference>
    <linkReference>
     <link url="http://shapecpu.de/shape-cpu/" />
     <caption lang="en">ShapeCPU</caption>
    </linkReference>
	<linkReference>
     <link url="https://sealcrypto.codeplex.com/" />
     <caption lang="en">Simple Encrypted Arithmetic Library (SEAL)</caption>
    </linkReference>
	<linkReference>
     <link url="https://eprint.iacr.org/2012/144" />
     <caption lang="en">Somewhat Practical Fully Homomorphic Encryption (Fan-Vercauteren)</caption>
    </linkReference>
  </references>
</documentation>