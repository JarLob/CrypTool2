<?xml version="1.0" encoding="utf-8"?>
<documentation>
  <language culture="en" />
  <language culture="de-DE" />
  <introduction lang="en">The Solitaire Cipher was designed by Bruce Schneier upon request by Neal Stephenson. It appears as 'Pontifex' (to hide that it employs a deck of cards) in Stephenson's book Cryptonomicon. 
Schneier says he "designed it to allow field agents to communicate securely without having to rely on electronics or having to carry incriminating tools". For a detailed description of the cipher see Schneier's website http://www.schneier.com/solitaire.html. <newline />
This plugin attempts to break ciphertexts encrypted with the solitaire cipher. Since a brute-force attack is too complex, a dictionary attack on the original password is implemented. Thus this only works if the initial deck for encryption was created using a password!
</introduction>
  <introduction lang="de-DE"></introduction>
  <usage lang="en">To try to decrypt a ciphertext, the user must know the amount of cards used. If this number is wrong, analysis will not work correctly. Furthermore, it is important to use a good password dictionary. The plugin can only try each password in this dictionary. If it is not present, it will also fail. <newline />
To verify the password, the plugin decrypts the first 20 characters and tries to recognize words from the language dictionary. To do this, the length of the longest word in the dictionary is taken from the beginning of the decrypted text. If this substring is not in the dictionary, the last letter is dropped, until it is found in the dictionary.
Now the square of the length of this word is added to the score of this password. If the word is smaller than 3, it does not count. The top 10 passwords are shown at all times. 
</usage>
  <usage lang="de-DE"></usage>
  <presentation lang="en">The presentation gives real time feedback on remaining time, passwords per second and password dictionary index. This index runs from 0 to the dictionary length with steps of 1000. <newline />
Also, the user can see the top 10 passwords at all times. It might be possible that the correct password will not end in the first position, but it should with reasonable probability end within the top 10. So if the plugin is finished, the decrypted text might be unreadable, but the correct password should be visible somewhere in the top 10.
</presentation>
  <presentation lang="de-DE"></presentation>
  <references>
  </references>
</documentation>
