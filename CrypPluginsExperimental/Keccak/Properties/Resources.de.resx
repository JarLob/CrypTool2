<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CapacityCaption" xml:space="preserve">
    <value>Kapazität</value>
  </data>
  <data name="CapacityTooltip" xml:space="preserve">
    <value>Größe der Kapazität in Bit</value>
  </data>
  <data name="DebugDataStreamTooltip" xml:space="preserve">
    <value>Ausgabestrom für Debuginformation</value>
  </data>
  <data name="DebugStreamCaption" xml:space="preserve">
    <value>Debugausgabestrom</value>
  </data>
  <data name="InputDataStreamTooltip" xml:space="preserve">
    <value>Eingabedaten, deren Hashwert berechnet wird</value>
  </data>
  <data name="InputStreamCaption" xml:space="preserve">
    <value>Eingabedatenstrom</value>
  </data>
  <data name="KECCAKFunctionCaption" xml:space="preserve">
    <value>Keccak Funktion</value>
  </data>
  <data name="KeccakFunctionList1" xml:space="preserve">
    <value>Keccak</value>
  </data>
  <data name="KeccakFunctionList2" xml:space="preserve">
    <value>SHA3-224</value>
  </data>
  <data name="KeccakFunctionList3" xml:space="preserve">
    <value>SHA3-256</value>
  </data>
  <data name="KeccakFunctionList4" xml:space="preserve">
    <value>SHA3-384</value>
  </data>
  <data name="KeccakFunctionList5" xml:space="preserve">
    <value>SHA3-512</value>
  </data>
  <data name="KECCAKFunctionTooltip" xml:space="preserve">
    <value>Auswahl der Keccak Variante</value>
  </data>
  <data name="ManualSettingsCaption" xml:space="preserve">
    <value>Manuell einstellen</value>
  </data>
  <data name="ManualSettingsTooltip" xml:space="preserve">
    <value>Keccak-Parameter manuell festlegen</value>
  </data>
  <data name="OutputDataStreamTooltip" xml:space="preserve">
    <value>Hashwert</value>
  </data>
  <data name="OutputLengthCaption" xml:space="preserve">
    <value>Ausgabelänge</value>
  </data>
  <data name="OutputLengthTooltip" xml:space="preserve">
    <value>Ausgabelänge in Bit (muss durch 8 teilbar sein)</value>
  </data>
  <data name="OutputStreamCaption" xml:space="preserve">
    <value>Hashwert</value>
  </data>
  <data name="ParametersCaption" xml:space="preserve">
    <value>Parameter</value>
  </data>
  <data name="PluginCaption" xml:space="preserve">
    <value>Keccak</value>
  </data>
  <data name="PluginDescription" xml:space="preserve">
    <value>Keccak Hash Funktion</value>
  </data>
  <data name="RateCaption" xml:space="preserve">
    <value>Bitrate</value>
  </data>
  <data name="SelectedStateSizeCaption" xml:space="preserve">
    <value>State Größe</value>
  </data>
  <data name="SelectedStateSizeTooltip" xml:space="preserve">
    <value>Größe des States in Bit (muss mit der Summe von Bitrate und Kapazität übereinstimmen)</value>
  </data>
  <data name="StateSize0" xml:space="preserve">
    <value>25 Bit</value>
  </data>
  <data name="StateSize1" xml:space="preserve">
    <value>50 Bit</value>
  </data>
  <data name="StateSize2" xml:space="preserve">
    <value>100 Bit</value>
  </data>
  <data name="StateSize3" xml:space="preserve">
    <value>200 Bit</value>
  </data>
  <data name="StateSize4" xml:space="preserve">
    <value>400 Bit</value>
  </data>
  <data name="StateSize5" xml:space="preserve">
    <value>800 Bit</value>
  </data>
  <data name="StateSize6" xml:space="preserve">
    <value>1600 Bit</value>
  </data>
  <data name="OutputMatchError" xml:space="preserve">
    <value>Ausgabelänge muss durch 8 teilbar sein.</value>
  </data>
  <data name="OutputTooLongWarning" xml:space="preserve">
    <value>Die Ausgabe ist zu lang. Sie wird auf 174.760 Bit gekürzt.</value>
  </data>
  <data name="RateTooltip" xml:space="preserve">
    <value>Größe der Bitrate in Bit (muss durch 8 teilbar sein)</value>
  </data>
  <data name="StateSizeMatchError" xml:space="preserve">
    <value>Die Summe von Bitrate und Kapazität muss mit der Größe des State übereinstimmen.</value>
  </data>
</root>