<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="action_select" xml:space="preserve">
    <value>Aktion</value>
  </data>
  <data name="action_select_tooltip" xml:space="preserve">
    <value>Mit der Aktion kann eingestellt werden, ob der Eingabetext ver- oder entschlüsselt werden soll.</value>
  </data>
  <data name="ad_caption" xml:space="preserve">
    <value>Assoziierte Daten</value>
  </data>
  <data name="ad_tooltip" xml:space="preserve">
    <value>Die Betriebsmodi CCM und GCM können zusätzlich zum Eingabetext weitere, s.g. assoziierte, Daten für die Authentifizierung verwenden.</value>
  </data>
  <data name="ansix923" xml:space="preserve">
    <value>ANSI X.923</value>
  </data>
  <data name="authentication_error" xml:space="preserve">
    <value>Die Nachricht konnte nicht authentifiziert werden!</value>
  </data>
  <data name="blockmode_select" xml:space="preserve">
    <value>Betriebsmodus</value>
  </data>
  <data name="blockmode_select_tooltip" xml:space="preserve">
    <value>Für die Ver- und Entschlüsselung kann hier eingestellt werden, mit welchem Betriebsmodus die Blockchiffre verwendet werden soll.</value>
  </data>
  <data name="cbc" xml:space="preserve">
    <value>Cipher Block Chaining Modus (CBC)</value>
  </data>
  <data name="ccm" xml:space="preserve">
    <value>Counter mit CBC-MAC Modus (CCM)</value>
  </data>
  <data name="cfb" xml:space="preserve">
    <value>Cipher Feedback Modus (CFB)</value>
  </data>
  <data name="ctr" xml:space="preserve">
    <value>Counter Modus (CTR)</value>
  </data>
  <data name="datasegment_length_input" xml:space="preserve">
    <value>Datensegment-Länge (in Byte)</value>
  </data>
  <data name="datasegment_length_input_tooltip" xml:space="preserve">
    <value>Im CFB-Modus wird nur ein Teil des Geheimtexts, das Datensegment, für den nächsten Block verwendet. Die Länge des Datensegments muss kleiner oder gleich der Blockgröße der verwendeten Blockchiffre sein.</value>
  </data>
  <data name="data_segment_overflow_warning" xml:space="preserve">
    <value>Es wurde eine zu große Länge für das Datensegment eingestellt. Die korrigierte Länge ist: </value>
  </data>
  <data name="decrypt" xml:space="preserve">
    <value>Entschlüsselung</value>
  </data>
  <data name="ecb" xml:space="preserve">
    <value>Electronic Codebook Modus (ECB)</value>
  </data>
  <data name="encrypt" xml:space="preserve">
    <value>Verschlüsselung</value>
  </data>
  <data name="gcm" xml:space="preserve">
    <value>Galois/Counter Modus (GCM)</value>
  </data>
  <data name="icontrol_caption" xml:space="preserve">
    <value>Blockchiffre</value>
  </data>
  <data name="icontrol_tooltip" xml:space="preserve">
    <value>Die ausgewählte Blockchiffre wird mit dem eingestellten Betriebsmodus verwendet, um den Eingabetext zu ver- oder entschlüsseln.</value>
  </data>
  <data name="iso10126" xml:space="preserve">
    <value>ISO 10126</value>
  </data>
  <data name="iv_caption" xml:space="preserve">
    <value>Initialisierungsvektor</value>
  </data>
  <data name="iv_tooltip" xml:space="preserve">
    <value>Mit Ausnahme des ECB-Modus benötigt jeder Betriebsmodus einen Startwert für den ersten Block oder den Zähler.</value>
  </data>
  <data name="key_caption" xml:space="preserve">
    <value>Schlüssel</value>
  </data>
  <data name="key_tooltip" xml:space="preserve">
    <value>Der Schlüssel wird von der ausgewählten Blockchiffre verwendet. Die Schlüssellänge wird durch die Chiffre vorgegeben.</value>
  </data>
  <data name="long_ad_warning" xml:space="preserve">
    <value>Die assoziierten Daten sind zu lang und wurden entsprechend gekürzt: </value>
  </data>
  <data name="long_input_warning" xml:space="preserve">
    <value>Der Eingabetext ist zu lang und wurde entsprechend gekürzt: </value>
  </data>
  <data name="long_iv_warning" xml:space="preserve">
    <value>Der Initialisierungsvektor ist zu lang und wurde entsprechend gekürzt: </value>
  </data>
  <data name="long_key_warning" xml:space="preserve">
    <value>Der Schlüssel ist zu lang und wurde entsprechend gekürzt: </value>
  </data>
  <data name="missing_blockcipher_warning" xml:space="preserve">
    <value>Es wurde keine Blockchiffre ausgewählt. Ver- oder Entschlüsselung sind nicht möglich!</value>
  </data>
  <data name="none" xml:space="preserve">
    <value>Keine</value>
  </data>
  <data name="ofb" xml:space="preserve">
    <value>Output Feedback Modus (OFB)</value>
  </data>
  <data name="onezeros" xml:space="preserve">
    <value>1-0-Padding</value>
  </data>
  <data name="padding_select" xml:space="preserve">
    <value>Auffüllmethode</value>
  </data>
  <data name="padding_select_tooltip" xml:space="preserve">
    <value>Mit Hilfe einer Auffüllmethode (Padding) können zu kurze Eingabetexte auf passende Längen aufgefüllt werden. Die Betriebsmodi ECB und CBC benötigen Eingaben, deren Längen ein Vielfaches der Blockgröße der verwendeten Blockchiffre sind.</value>
  </data>
  <data name="pkcs7" xml:space="preserve">
    <value>PKCS #7</value>
  </data>
  <data name="plugin_caption" xml:space="preserve">
    <value>Betriebsmodus-Visualisierer</value>
  </data>
  <data name="plugin_tooltip" xml:space="preserve">
    <value>Mit dem Betriebsmodus-Visualisierer lassen sich symmetrische Blockchiffren mit unterschiedlichen Betriebsmodi verwenden und deren Funktionsweise grafisch darstellen.</value>
  </data>
  <data name="short_ad_warning" xml:space="preserve">
    <value>Die assoziierten Daten sind zu kurz und wurden entsprechend mit Nullen aufgefüllt: </value>
  </data>
  <data name="short_input_warning" xml:space="preserve">
    <value>Der Eingabetext ist zu kurz und wurde entsprechend mit Nullen aufgefüllt: </value>
  </data>
  <data name="short_iv_warning" xml:space="preserve">
    <value>Der Initialisierungsvektor ist zu kurz und wurde entsprechend mit Nullen aufgefüllt: </value>
  </data>
  <data name="short_key_warning" xml:space="preserve">
    <value>Der Schlüssel ist zu kurz und wurde entsprechend mit Nullen aufgefüllt: </value>
  </data>
  <data name="should_not_happen_exception" xml:space="preserve">
    <value>Das hätte nicht passieren dürfen!</value>
  </data>
  <data name="tag_input_caption" xml:space="preserve">
    <value>Nachrichten-Tag Eingabe</value>
  </data>
  <data name="tag_input_tooltip" xml:space="preserve">
    <value>Für die Authentifizierung der Nachricht im CCM- und GCM-Modus wird hier das empfangene Nachrichten-Authentifizierungs-Tag eingegeben.</value>
  </data>
  <data name="tag_length" xml:space="preserve">
    <value>Tag-Länge (in Byte)</value>
  </data>
  <data name="tag_length_overflow_warning" xml:space="preserve">
    <value>Es wurde eine zu große Länge für das Nachrichten-Tag eingestellt. Die korrigierte Länge ist: </value>
  </data>
  <data name="tag_length_tooltip" xml:space="preserve">
    <value>Die Länge des zu berechnenden Nachrichten-Tags darf höchstens so groß sein wie die Blockgröße der verwendeten Chiffre.</value>
  </data>
  <data name="tag_output_caption" xml:space="preserve">
    <value>Nachrichten-Tag Ausgabe</value>
  </data>
  <data name="tag_output_tooltip" xml:space="preserve">
    <value>Im CCM- und GCM-Modus wird hier das Nachrichten-Authentifizierungs-Tag ausgegeben.</value>
  </data>
  <data name="text_input_caption" xml:space="preserve">
    <value>Eingabetext</value>
  </data>
  <data name="text_input_tooltip" xml:space="preserve">
    <value>Für die Verschlüsselung wird hier der Klartext eingegeben. Für die Entschlüsselung entsprechend der Geheimtext.</value>
  </data>
  <data name="text_output_caption" xml:space="preserve">
    <value>Ausgabetext</value>
  </data>
  <data name="text_output_tooltip" xml:space="preserve">
    <value>Nach der Verschlüsselung wird hier der Geheimtext ausgegeben. Nach der Entschlüsselung entsprechend der Klartext.</value>
  </data>
  <data name="xts" xml:space="preserve">
    <value>XEX mit Tweak und Ciphertext-Stealing (XTS)</value>
  </data>
  <data name="zeros" xml:space="preserve">
    <value>Nullen</value>
  </data>
</root>