<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CiphertextInputDes" xml:space="preserve">
    <value>Geheimtext</value>
  </data>
  <data name="CiphertextInputDescription" xml:space="preserve">
    <value>Geheimtext, der analysiert werden soll.</value>
  </data>
  <data name="CurrentAnalysedKeylengthLabel" xml:space="preserve">
    <value>Aktuell analysierter offset</value>
  </data>
  <data name="ElapsedLabel" xml:space="preserve">
    <value>Vergangene Zeit</value>
  </data>
  <data name="EndLabel" xml:space="preserve">
    <value>Geschätzte Endzeit</value>
  </data>
  <data name="EnglishDes" xml:space="preserve">
    <value>Englisch</value>
  </data>
  <data name="FastConvergeCap" xml:space="preserve">
    <value>Schnelle Konvergierung</value>
  </data>
  <data name="FastConvergeDes" xml:space="preserve">
    <value>Auswahl, ob die schnelle Konvergierung aktiviert werden soll. Erklärung siehe Hilfe.</value>
  </data>
  <data name="GermanDes" xml:space="preserve">
    <value>Deutsch</value>
  </data>
  <data name="HillClimbingDes" xml:space="preserve">
    <value>Hill-Climbing</value>
  </data>
  <data name="HillClimbRestartsCap" xml:space="preserve">
    <value>Neustarts für Hill-Climbing</value>
  </data>
  <data name="HillClimbRestartsDes" xml:space="preserve">
    <value>Anzahl der Neustarts, die im Hill-Climbing ausgeführt werden sollen, angeben</value>
  </data>
  <data name="KeyHeader" xml:space="preserve">
    <value>Schlüssel</value>
  </data>
  <data name="KeyLengthCap" xml:space="preserve">
    <value>Schlüssellänge</value>
  </data>
  <data name="KeyLengthDes" xml:space="preserve">
    <value>Schlüssellänge, die für die Analzse benutzt werden soll, auswählen.</value>
  </data>
  <data name="KeyLengthHeader" xml:space="preserve">
    <value>Offset</value>
  </data>
  <data name="KeyOutputDes" xml:space="preserve">
    <value>Berechneter Schlüssel</value>
  </data>
  <data name="KeyOutputDescription" xml:space="preserve">
    <value>Bester gefundener Schlüssel.</value>
  </data>
  <data name="KeysPerSecondAverageLabel" xml:space="preserve">
    <value>Durchschnittliche Schlüssel/Sekunde</value>
  </data>
  <data name="KeysPerSecondCurrentLabel" xml:space="preserve">
    <value>Aktuelle Schlüssel/Sekunde</value>
  </data>
  <data name="KnownPlaintextDes" xml:space="preserve">
    <value>Bekannter Klartext</value>
  </data>
  <data name="LanguageCap" xml:space="preserve">
    <value>Sprache</value>
  </data>
  <data name="LanguageDes" xml:space="preserve">
    <value>Sprache, in der der Klartext wahrscheinlich verfasst ist, auswählen</value>
  </data>
  <data name="LocalLabel" xml:space="preserve">
    <value>Fakten</value>
  </data>
  <data name="MaxOffsetCap" xml:space="preserve">
    <value>Maximaler Offset</value>
  </data>
  <data name="MaxOffsetDes" xml:space="preserve">
    <value>Maximaler Offset, der anaklzsiert werden soll.</value>
  </data>
  <data name="MethodCap" xml:space="preserve">
    <value>Methode</value>
  </data>
  <data name="MethodDes" xml:space="preserve">
    <value>Wähle die Methode, mit der die Verschlüsselung angegriffen werden soll.</value>
  </data>
  <data name="MinOffsetCap" xml:space="preserve">
    <value>Minimaler Offset</value>
  </data>
  <data name="MinOffsetDes" xml:space="preserve">
    <value>Minimaler Offset, der analysiert werden soll.</value>
  </data>
  <data name="PartKnowPlainDes" xml:space="preserve">
    <value>Teilweise bekannter Klartext</value>
  </data>
  <data name="PlaintextInputDes" xml:space="preserve">
    <value>Klartext</value>
  </data>
  <data name="PlaintextInputDescription" xml:space="preserve">
    <value>Bekannter Klartext, der verwendet erden soll.</value>
  </data>
  <data name="PluginCaption" xml:space="preserve">
    <value>M-138 Analysewerkzeug</value>
  </data>
  <data name="PluginTooltoip" xml:space="preserve">
    <value>Eine Auswahl von möglichen Angriffen auf die M-138</value>
  </data>
  <data name="ResultTextDes" xml:space="preserve">
    <value>Resultierender Klartext</value>
  </data>
  <data name="ResultTextDescription" xml:space="preserve">
    <value>Resultierender Klartext unter Benutzung des besten, gefundenen Schlüssels.</value>
  </data>
  <data name="StartLabel" xml:space="preserve">
    <value>Startzeit</value>
  </data>
  <data name="TextHeader" xml:space="preserve">
    <value>Klartext</value>
  </data>
  <data name="TopTenL" xml:space="preserve">
    <value>Bestenliste der Schlüssel</value>
  </data>
  <data name="ValueHeader" xml:space="preserve">
    <value>Wert</value>
  </data>
  <data name="KnownPlaintextDescription" xml:space="preserve">
    <value>Bekannter Klartext, der verwendet werden soll.</value>
  </data>
</root>