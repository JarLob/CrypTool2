//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ToyCiphers.Properties {
    using System;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ToyCiphers.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Switch view ähnelt.
        /// </summary>
        internal static string BtnSwitchView {
            get {
                return ResourceManager.GetString("BtnSwitchView", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Choice of the algorithm ähnelt.
        /// </summary>
        internal static string ChoiceOfAlgorithm {
            get {
                return ResourceManager.GetString("ChoiceOfAlgorithm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die At this point one of the algorithms contained in the list can be selected. This algorithm can be examined by differential cryptanalysis. ähnelt.
        /// </summary>
        internal static string ChoiceOfAlgorithmToolTop {
            get {
                return ResourceManager.GetString("ChoiceOfAlgorithmToolTop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 16 bit blocksize, 2 subkeys, the key consists of 32 bit ähnelt.
        /// </summary>
        internal static string Cipher1 {
            get {
                return ResourceManager.GetString("Cipher1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Cipher 1 ähnelt.
        /// </summary>
        internal static string Cipher1LblHeading {
            get {
                return ResourceManager.GetString("Cipher1LblHeading", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Inputblock ähnelt.
        /// </summary>
        internal static string Cipher1LblInputBlock {
            get {
                return ResourceManager.GetString("Cipher1LblInputBlock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Outpublock ähnelt.
        /// </summary>
        internal static string Cipher1LblOutputBlock {
            get {
                return ResourceManager.GetString("Cipher1LblOutputBlock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die This block cipher works on 16 bit blocks. One encryption round is executed using a total of two round keys. The following steps are performed in the encryption round: Key addition, substitution and key addition. The round keys have a size of 16 bits, the SBoxes each process 4 bits. The key is thus 32 bits in size. ähnelt.
        /// </summary>
        internal static string Cipher1LblText {
            get {
                return ResourceManager.GetString("Cipher1LblText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 16 bit blocksize, 4 subkeys, the key consists of 64 bit ähnelt.
        /// </summary>
        internal static string Cipher2 {
            get {
                return ResourceManager.GetString("Cipher2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Cipher 2 ähnelt.
        /// </summary>
        internal static string Cipher2LblHeading {
            get {
                return ResourceManager.GetString("Cipher2LblHeading", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Inputblock ähnelt.
        /// </summary>
        internal static string Cipher2LblInputBlock {
            get {
                return ResourceManager.GetString("Cipher2LblInputBlock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Outpublock ähnelt.
        /// </summary>
        internal static string Cipher2LblOutputBlock {
            get {
                return ResourceManager.GetString("Cipher2LblOutputBlock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die This block cipher works on 16 bit blocks. Three encryption rounds are performed, whereby a total of four round keys are used. Two round keys are used in the last encryption round. Each round consists of three sub-steps: key addition, substitution and permutation - in the last round the permutation is omitted. The round keys have a size of 16 bits, the SBoxes each process 4 bits. The key is thus 64 bits in size. ähnelt.
        /// </summary>
        internal static string Cipher2LblText {
            get {
                return ResourceManager.GetString("Cipher2LblText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 16 bit blocksize, 6 subkeys, the key consists of 96 bit ähnelt.
        /// </summary>
        internal static string Cipher3 {
            get {
                return ResourceManager.GetString("Cipher3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Cipher 3 ähnelt.
        /// </summary>
        internal static string Cipher3LblHeading {
            get {
                return ResourceManager.GetString("Cipher3LblHeading", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Inputblock ähnelt.
        /// </summary>
        internal static string Cipher3LblInputBlock {
            get {
                return ResourceManager.GetString("Cipher3LblInputBlock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Outputblock ähnelt.
        /// </summary>
        internal static string Cipher3LblOutputBlock {
            get {
                return ResourceManager.GetString("Cipher3LblOutputBlock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die This block cipher works on 16 bit blocks. 5 encryption rounds are performed, whereby a total of six round keys are used. In the last encryption round two round keys are used. Each round consists of three sub-steps: key addition, substitution and permutation - in the last round the permutation unfolds and the last round key is added. The round keys are 16 bits in size, the SBoxes each process 4 bits. The key is therefore 96 bits in size.
        ///
        /// ähnelt.
        /// </summary>
        internal static string Cipher3LblText {
            get {
                return ResourceManager.GetString("Cipher3LblText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 4 bit blocksize, 4 subkeys, the key consists of 16 bit ähnelt.
        /// </summary>
        internal static string Cipher4 {
            get {
                return ResourceManager.GetString("Cipher4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Cipher 4 ähnelt.
        /// </summary>
        internal static string Cipher4LblHeading {
            get {
                return ResourceManager.GetString("Cipher4LblHeading", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Inputblock ähnelt.
        /// </summary>
        internal static string Cipher4LblInputBlock {
            get {
                return ResourceManager.GetString("Cipher4LblInputBlock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Outputblock ähnelt.
        /// </summary>
        internal static string Cipher4LblOutputBlock {
            get {
                return ResourceManager.GetString("Cipher4LblOutputBlock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die This block cipher works on 4 bit blocks. Three encryption rounds are performed, whereby a total of four round keys are used. Two round keys are used in the last encryption round. Each round consists of two sub-steps: key addition and substitution. In the last round, the last round key is then added. The round keys have a size of 4 bits and the SBoxes each work on 4 bits.  The key is thus 16 bits in size. ähnelt.
        /// </summary>
        internal static string Cipher4LblText {
            get {
                return ResourceManager.GetString("Cipher4LblText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Feal-4 ähnelt.
        /// </summary>
        internal static string Cipher5 {
            get {
                return ResourceManager.GetString("Cipher5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The permutation swaps the fixed position i of an input bit to a position j in the output. The following table describes the permutation, with the first line representing the decimal position of a bit in the input and the second line representing the position of the corresponding bit in the output. ähnelt.
        /// </summary>
        internal static string DescPermutation {
            get {
                return ResourceManager.GetString("DescPermutation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The SBox substitutes fixed input bits for other output bits. The following table describes the SBox, where the first line represents the decimal representation of the input bits and the second line represents the decimal representation of the output bits. ähnelt.
        /// </summary>
        internal static string DescSBox {
            get {
                return ResourceManager.GetString("DescSBox", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Table of the Permutation: ähnelt.
        /// </summary>
        internal static string HeaderPermutation {
            get {
                return ResourceManager.GetString("HeaderPermutation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Table of the SBox: ähnelt.
        /// </summary>
        internal static string HeaderSBox {
            get {
                return ResourceManager.GetString("HeaderSBox", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Input ähnelt.
        /// </summary>
        internal static string Input {
            get {
                return ResourceManager.GetString("Input", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The specified key is not big enough. Please check the requirements of this cipher. ähnelt.
        /// </summary>
        internal static string KeyError {
            get {
                return ResourceManager.GetString("KeyError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Input for the key ähnelt.
        /// </summary>
        internal static string KeyInput {
            get {
                return ResourceManager.GetString("KeyInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die This input contains the key with which the message is encrypted ähnelt.
        /// </summary>
        internal static string KeyInputTooltip {
            get {
                return ResourceManager.GetString("KeyInputTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Input for a messages to be encrypted ähnelt.
        /// </summary>
        internal static string MessageInput {
            get {
                return ResourceManager.GetString("MessageInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The messages present at this input will be encrypted and will be outputted ähnelt.
        /// </summary>
        internal static string MessageInputTooltip {
            get {
                return ResourceManager.GetString("MessageInputTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Output for encrypted messages ähnelt.
        /// </summary>
        internal static string MessageOutput {
            get {
                return ResourceManager.GetString("MessageOutput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The encrypted messages will be outputted  ähnelt.
        /// </summary>
        internal static string MessageOutputTooltip {
            get {
                return ResourceManager.GetString("MessageOutputTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Output ähnelt.
        /// </summary>
        internal static string Output {
            get {
                return ResourceManager.GetString("Output", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die DCA ToyCiphers ähnelt.
        /// </summary>
        internal static string PluginCaption {
            get {
                return ResourceManager.GetString("PluginCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The ToyCiphers component contains various algorithms for encrypting information. The algorithms are very simple and short to demonstrate certain things. ähnelt.
        /// </summary>
        internal static string PluginTooltip {
            get {
                return ResourceManager.GetString("PluginTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Position of input ähnelt.
        /// </summary>
        internal static string TablePermutationInput {
            get {
                return ResourceManager.GetString("TablePermutationInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Position of output ähnelt.
        /// </summary>
        internal static string TablePermutationOutput {
            get {
                return ResourceManager.GetString("TablePermutationOutput", resourceCulture);
            }
        }
    }
}
