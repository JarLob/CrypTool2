<?xml version="1.0" encoding="utf-8" ?>

<documentation>
  <language culture="en"/>
  <language culture="de-DE"/>

  <introduction lang="en">
    This component enables the user to hash a selected image via a robust block hash.
    Those Block hashes are widely used image hash functions. Usually multiple images are compared via the hamming distance of their image hash values. That can be of interest for example to find similar images on the internet or to find doublicate frames in video streams.

    <section headline="History">
      This block hash was described in a presentation by Dr. Martin Steinebach of the Fraunhofer SIT in 2011.
    </section>

    <section headline="Algorithm">
      The block hash is one in a series of image hash functions designed to map images to a value computers can use. This hash value is typically 256-bit long, but this algorithm allows the user to change the length.
      The block hash is calculated following these steps:
      <newline/>
      The first step is gray scaling the original image. (This is realized with OpenCV through the wrapper EmguCV.) In the second step, the gray image is resized square to the input size. The third step is calculating the absolute brightness of each quarter of the picture. The image is flipped, so that the brightest quarter becomes the upper left corner. In the next step, the median is calculated for each quarter. That is the average brightness of the pixels. Each pixel is now set to white if its brightness is above the median of its quarter and black if not. This produces the resulting black and white hash image.
      These black and white pixels contain the information 0 and 1. These bits are put into an array. 8 bits are put into one byte. The first 8 bits yield the first byte. The first bit yields the lowest value of that byte (2^0), the last bit yields the highest value (2^7). The actual hash is the resulting byte array.
      <newline/>
      <!--<img src="ImageHash/DetailedDescription/steps.png"/>-->
    </section>
  </introduction>

  <introduction lang="de-DE">
    Dieser Komponent ermöglicht es dem Nutzer ein ausgewähltes Bild zu hashen, mittels eines robusten Blockhashes. Diese Blockhashes sind häufig genutzte Bild-Hasherfahren. Meist werden mehrere Bilder mittels Hamming Distanz anhand ihrer Bild-Hashwerte verglichen. Das kann von Interesse sein, wenn man zum Beispiel gleiche Bilder im Internet finden möchte oder doppelte Einzelbilder in Videos.
    <section headline="Geschichte">
      Dieser Blockhash wurde in einer Präsentation von Dr. Martin Steinebach des Fraunhofer SIT in 2011 beschrieben.
    </section>

    <section headline="Algorithmus">
      Der Blockhash ist einer aus einer Reihe von Bild-Hashfunktionen, die dazu genutzt werden Bilder einem von Computern nutzbaren Wert zuzuordnern. Solch ein Hashwert ist typischer Weise 256-Bit lang, aber dieser Algorithmus erlaubt dem Nutzer diese Länge zu verändern.
      <newline/>
      Der Blockhash wird mittels der folgenden Schritte berechnet:
      <newline/>
      <newline/>
      Zuerst wird das Originalbild grau eingefärbt. (Realisiert mittels OpenCV durch den Wrapper EmguCV.) Im zweiten Schritt wird das graue Bild auf das Quadrat der eingegebenen Größe skaliert. Der dritte Schritt ist die Berechnung der Gesamthelligkeit jedes Viertels. Das Bild wird so oft gespiegelt, bis sich das hellste Viertel oben links befindet. Im nächsten Schritt wird der Mittelwert jedes Viertels berechnet. Dies ist die durchschnittliche Helligkeit der Pixel. Jeder Pixel wird jetzt auf Weiß gesetzt, falls seine Helligkeit über dem Mittelwert seines Viertels ist und Schwarz falls nicht. Dadurch entsteht das resultierende Schwarz-Weißbild.
      Diese schwarzen und weißen Pixel enthalten die Informationen 0 und 1. Diese Bits werden in einem Array gespeichert. 8 Bits werden zu einem Byte. Die ersten 8 Bits ergeben das erste Byte. Das erste Bit ergibt den niedrigsten Wert dieses Bytes (2^0), das letzte Bit ergibt den höchsten Wert (2^7). Der eigentliche Hash ist das resultierende Byte Array.
      <newline/>
      <!--<img src="ImageHash/DetailedDescription/steps.png"/>-->
    </section>
  </introduction>

  <usage lang="en">
    The ImageHash component has only one input connector, where it expects an image as data stream as input. The output exists of two output connectors. One is the hashed image as a data stream. The user can use the image output component to view this resulting image. The other output is a byte array. This is the actual hash. It can be connected to the text output component or directly used in the hamming distance component.
    The interface of the ImageHash component allows the user to change some settings:
    <newline/>
    <newline/>
    <b>Size:</b>
    <newline/>
    The standard size of the resulting image is 16x16 pixels, which results in a hash size of 256-bit. The resulting image is always a square image. (More specific, the total amount of pixels of the resulting image has to be a power of two. That is necessary because otherwise one count index runs out of bounds.) The default side length of 16 pixels is shown in a textbox, which is editable by the user. This size is limited to the range of 4 to 128 pixels. Less then 4 pixels is simply to small to be very useful. The upper threshold is implemented due to the processing time. Calculating the accumulated brightness of the four quarters takes much time. Using pixel amounts above 128 pixels destroys the user experience.
    <newline/>
    <newline/>
    <b>Output format:</b>
    <newline/>
    The user may select Bmp, Png and Tiff as the output format. That changes the format of the output stream that is created. The standard is Bmp.
    <newline/>
    <newline/>
    <b>Show each step:</b>
    <newline/>
    This checkbox is unchecked by default. Therefore the only output stream that is created is the one of the resulting black and white image. If this box is checked, every step of the hashing process is directly put into an output stream and handed to the output connector. This may cause flickering, because most steps are processed very quick. This option gets more interesting, if the user chooses a very large size. Then he may watch where the processing takes the most time.
    <newline/>
    <newline/>
    <b>Slider:</b>
    <newline/>
    This slider makes the whole hashing process much more vibrant. By sliding it, the user may quickly switch through the steps of the hashing process. If the slider is set to step 3 before starting the calculation for example then step 4 is not shown. After the calculation (while still in running mode) the slider can be moved to watch the image of every step.
  </usage>

  <usage lang="de-DE">
    Die BildHash Komponente hat nur einen Eingabe-Konnektor, an dem sie ein Bild als Datenstrom als Eingabe erwartet. Die Ausgabe besteht aus zwei Konnektoren. Einer ist das Hashbild als Datenstrom. Der Nutzer kann die Bildausgabe Komponente nutzen um dieses resultierende Bild anzuschauen. Der andere Ausgabe-Konnektor ist ein Byte Array. Dies ist der eigentliche Hash. Der Konnektor kann direkt mit der Textausgabe Komponente verbunden werden oder in der Hamming Distanz Komponente verwendet werden.
    Das Interface der BildHash Komponente erlaubt dem Nutzer einige Einstellungen vorzunehmen:
    <newline/>
    <newline/>
    <b>Größe:</b>
    <newline/>
    Die Standardgröße des resultierenden Bildes ist 16x16 Pixel, welche in einen Hash der Größe 256-Bit resultiert. Das resultierende Bild ist immer quadratisch. (Genauer gesagt ist die Gesamtanzahl der Pixel des resultierenden Bildes immer eine Zweierpotenz. Das ist notwendig, da sonst ein Zählerindex aus den Grenzen läuft.) Die Standard-Seitenlänge von 16 Pixeln wird in einer Textbox angezeigt, die vom Nutzer verändert werden kann. Diese Größe ist begrenzt von 4 bis 128 Pixeln. Weniger als 4 Pixel ist schlichtweg nicht mehr nützlich. Die obere Grenze ist implementiert wegen der Verarbeitungszeit. Die Berechnung der Gesamthelligkeit der vier Viertel kostet viel Zeit. Werden mehr als 128 Pixel verwendet beeinträchtigt das die Nutzererfahrung.
    <newline/>
    <newline/>
    <b>Ausgabedateiformat:</b>
    <newline/>
    Der Nutzer darf zwischen Bmp, Png und Tiff als Ausgabeformat wählen. Dadurch ändert sich das Format des Ausgabe-Datenstroms der erzeugt wird. Der Standard ist Bmp.
    <newline/>
    <newline/>
    <b>Jeden Schritt anzeigen:</b>
    <newline/>
    Dieses Kontrollkästchen ist standardmäßig nicht markiert. Dadurch wird ist der einzige Ausgabe-Datenstrom der erzeugt wird der des resultierenden Schwarz-Weißbildes. Wenn dieses Kästchen markiert ist wird jeder Schritt des Hashverfahrens direkt zu einem Ausgabe-Datenstrom verarbeitet und an den Ausgabe-Konektor weiter gegeben. Dadurch kann ein Flackern entstehen, denn die meisten Schritte werden sehr schnell verarbeitet. Diese Einstellung ist eher dann interessant, wenn der Nutzer sehr große Größen auswählt. Dann kann er beobachten, wo die Verarbeitung am längsten dauert.
    <newline/>
    <newline/>
    <b>Schieberegler:</b>
    <newline/>
    Dieser Schieberegler macht das gesamte Hashverfahren sehr viel lebendiger. Durch schieben kann der Nutzer sehr schnell die einzelnen Schritte des Hashverfahrens durchwechseln. Wenn der Schieberegler vor der Berechnung zum Beispiel auf Schritt 3 geschoben wird, so wird Schritt 4 gar nicht erst angezeigt. Nach der Berechnung (während die Komponente noch läuft) kann der Schieberegler beliebig verschoben werden um die einzelnen Schritte zu sehen.
  </usage>

  <references>
    <linkReference id="wikipedia">
      <link url="http://www.anwendertag-forensik.de/content/dam/anwendertag-forensik/de/documents/2011/Vortrag_Steinebach.pdf" lang="en" />
      <caption lang="en">Robust Hashs for forensic image recognition</caption>
      <link url="http://www.anwendertag-forensik.de/content/dam/anwendertag-forensik/de/documents/2011/Vortrag_Steinebach.pdf" lang="de-DE" />
      <caption lang="de-DE">Robuste Hashes zur forensischen Bilderkennung</caption>
    </linkReference>
  </references>

</documentation>
