<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PerKeyLen" xml:space="preserve">
    <value>PerKeyLen</value>
  </data>
  <data name="AverageAxisCaption" xml:space="preserve">
    <value>Average of second Y-axis</value>
  </data>
  <data name="AverageAxisTooltipCaption" xml:space="preserve">
    <value>Show the average of the second Y-axis</value>
  </data>
  <data name="BestKeyInputCaption" xml:space="preserve">
    <value>Best key</value>
  </data>
  <data name="BestKeyInputTooltipCaption" xml:space="preserve">
    <value>The best key found by the used CipherAnalyzer</value>
  </data>
  <data name="BestPlaintextInputCaption" xml:space="preserve">
    <value>Best plaintext</value>
  </data>
  <data name="BestPlaintextInputTooltipCaption" xml:space="preserve">
    <value>The best plaintext found by the used CipherAnalyzer</value>
  </data>
  <data name="CAAcaption" xml:space="preserve">
    <value>CryptAnalysisAnalyzer</value>
  </data>
  <data name="CAAtooltip" xml:space="preserve">
    <value>Analyze cryptanalysis methods</value>
  </data>
  <data name="CalculateRuntimeCaption" xml:space="preserve">
    <value>Calculate runtime</value>
  </data>
  <data name="CalculateRuntimeTooltipCaption" xml:space="preserve">
    <value>Calculate the runtime of the algorithm</value>
  </data>
  <data name="CiphertextInputCaption" xml:space="preserve">
    <value>Ciphertext</value>
  </data>
  <data name="CiphertextInputTooltipCaption" xml:space="preserve">
    <value>The plaintext encrypted by the used cipher</value>
  </data>
  <data name="CiphertextLengthCaption" xml:space="preserve">
    <value>Ciphertext length</value>
  </data>
  <data name="DecryptionsCaption" xml:space="preserve">
    <value>Decryptions</value>
  </data>
  <data name="EvaluationInputCaption" xml:space="preserve">
    <value>EvaluationContainer</value>
  </data>
  <data name="EvaluationInputTooltipCaption" xml:space="preserve">
    <value>The EvaluationContainer with the evaluation data of the current test run from the used CipherAnalyzer</value>
  </data>
  <data name="EvaluationOutputCaption" xml:space="preserve">
    <value>Evaluation output</value>
  </data>
  <data name="EvaluationOutputTooltipCaption" xml:space="preserve">
    <value>The evaluation output with all the average values</value>
  </data>
  <data name="GnuPlotDataOutputCaption" xml:space="preserve">
    <value>GnuPlot data</value>
  </data>
  <data name="GnuPlotDataOutputTooltipCaption" xml:space="preserve">
    <value>GnuPlot data output to be saved in a .dat file and used in a GnuPlot script file</value>
  </data>
  <data name="GnuPlotGroupCaption" xml:space="preserve">
    <value>GnuPlot settings</value>
  </data>
  <data name="GnuPlotScriptOutputCaption" xml:space="preserve">
    <value>GnuPlot script</value>
  </data>
  <data name="GnuPlotScriptOutputTooltipCaption" xml:space="preserve">
    <value>GnuPlot script output to be saved in a .p file and loaded from the GnuPlot command line</value>
  </data>
  <data name="KeyInputCaption" xml:space="preserve">
    <value>Key</value>
  </data>
  <data name="KeyInputTooltipCaption" xml:space="preserve">
    <value>The key generated by the TestVectorGenerator</value>
  </data>
  <data name="KeyLengthCaption" xml:space="preserve">
    <value>Key length</value>
  </data>
  <data name="KeyOutputCaption" xml:space="preserve">
    <value>Key</value>
  </data>
  <data name="KeyOutputTooltipCaption" xml:space="preserve">
    <value>The key test vector of the current test run (usually provided to both the Cipher and the CipherAnalyzer components)</value>
  </data>
  <data name="MinimalCorrectPercentageCaption" xml:space="preserve">
    <value>Minimal correct percentage</value>
  </data>
  <data name="MinimalCorrectPercentageTooltipCaption" xml:space="preserve">
    <value>The minimal percentage of correctly decrypted ciphertext characters to be judged as success</value>
  </data>
  <data name="MinimumPercentageCaption" xml:space="preserve">
    <value>Minimal correct percentage</value>
  </data>
  <data name="MinimumPercentageTooltipCaption" xml:space="preserve">
    <value>The minimal percentage the decrypted ciphertext has to match the correct plaintext to count as a successfull decryption</value>
  </data>
  <data name="NoneCaption" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="NormalizingFactorCaption" xml:space="preserve">
    <value>Normalize axis ranges factor</value>
  </data>
  <data name="NormalizingFactorTooltipCaption" xml:space="preserve">
    <value>The factor by which outstandingly high values have to be higher than the preceding value to be ignored in the standard focus range of the GnuPlot</value>
  </data>
  <data name="PercentDecryptedCaption" xml:space="preserve">
    <value>Percent decrypted</value>
  </data>
  <data name="Percent_Decrypted" xml:space="preserve">
    <value>Percent decrypted</value>
  </data>
  <data name="PlaintextInputCaption" xml:space="preserve">
    <value>Plaintext</value>
  </data>
  <data name="PlaintextInputTooltipCaption" xml:space="preserve">
    <value>The plaintext generated by the TestVectorGenerator</value>
  </data>
  <data name="PlaintextOutputCaption" xml:space="preserve">
    <value>Plaintext</value>
  </data>
  <data name="PlaintextOutputTooltipCaption" xml:space="preserve">
    <value>The plaintext test vector of the current test run (usually provided to both the Cipher and the CipherAnalyzer components)</value>
  </data>
  <data name="PopulationCaption" xml:space="preserve">
    <value>Population sizes</value>
  </data>
  <data name="RestartsCaption" xml:space="preserve">
    <value>Restarts</value>
  </data>
  <data name="RuntimeCaption" xml:space="preserve">
    <value>Runtime</value>
  </data>
  <data name="SecondYAxisCaption" xml:space="preserve">
    <value>Second Y-axis</value>
  </data>
  <data name="SecondYAxisTooltipCaption" xml:space="preserve">
    <value>Values to show on the second Y-axis</value>
  </data>
  <data name="SeedInputCaption" xml:space="preserve">
    <value>Seed</value>
  </data>
  <data name="SeedInputTooltipCaption" xml:space="preserve">
    <value>The seed for the pseudo-random number generator, making test vectors reproducible</value>
  </data>
  <data name="SuccessCaption" xml:space="preserve">
    <value>Success</value>
  </data>
  <data name="SuccessPercentCaption" xml:space="preserve">
    <value>Success and % decrypted</value>
  </data>
  <data name="TabuCaption" xml:space="preserve">
    <value>Tabu set sizes</value>
  </data>
  <data name="TextInputCaption" xml:space="preserve">
    <value>Input text</value>
  </data>
  <data name="TextInputTooltipCaption" xml:space="preserve">
    <value>The input text from which the plaintexts and natural language keys are taken from</value>
  </data>
  <data name="TotalKeysInputCaption" xml:space="preserve">
    <value>Total number of keys</value>
  </data>
  <data name="TotalKeysInputTooltipCaption" xml:space="preserve">
    <value>The number of keys specified in the TestVectorGenerator</value>
  </data>
  <data name="TriggerNextKeyCaption" xml:space="preserve">
    <value>Trigger next key</value>
  </data>
  <data name="TriggerNextKeyTooltipCaption" xml:space="preserve">
    <value>The seed for the next test vector generation in the current test series (usually set to the current key)</value>
  </data>
  <data name="XAxisCaption" xml:space="preserve">
    <value>X-axis</value>
  </data>
  <data name="XAxisTooltipCaption" xml:space="preserve">
    <value>Values to show on the X-axis</value>
  </data>
  <data name="YAxisCaption" xml:space="preserve">
    <value>Y-axis</value>
  </data>
  <data name="YAxisTooltipCaption" xml:space="preserve">
    <value>Values to show on the Y-axis</value>
  </data>
  <data name="Runtime" xml:space="preserve">
    <value>Runtime</value>
  </data>
  <data name="Time_" xml:space="preserve">
    <value>Time_</value>
  </data>
  <data name="Succ_PercDecr_" xml:space="preserve">
    <value>Succ_PercDecr_</value>
  </data>
  <data name="Succ_" xml:space="preserve">
    <value>Succ_</value>
  </data>
  <data name="PercDecr_" xml:space="preserve">
    <value>PercDecr_</value>
  </data>
  <data name="Decryptions" xml:space="preserve">
    <value>Decryptions</value>
  </data>
  <data name="NoDecr_" xml:space="preserve">
    <value>NoDecr_</value>
  </data>
  <data name="Restarts" xml:space="preserve">
    <value>Restarts</value>
  </data>
  <data name="Tabu_Set_Sizes" xml:space="preserve">
    <value>Tabu set sizes</value>
  </data>
  <data name="Tabu_" xml:space="preserve">
    <value>Tabu_</value>
  </data>
  <data name="Population_Sizes" xml:space="preserve">
    <value>Population sizes</value>
  </data>
  <data name="Popu_" xml:space="preserve">
    <value>Popu_</value>
  </data>
  <data name="Rest_" xml:space="preserve">
    <value>Rest_</value>
  </data>
  <data name="PerCiphLen" xml:space="preserve">
    <value>PerCiphLen</value>
  </data>
  <data name="Ciphertext_Length" xml:space="preserve">
    <value>Ciphertext length</value>
  </data>
  <data name="Key_Length" xml:space="preserve">
    <value>Key length</value>
  </data>
  <data name="PerTime" xml:space="preserve">
    <value>PerTime</value>
  </data>
  <data name="Test_Series_Seed" xml:space="preserve">
    <value>Test series seed: </value>
  </data>
  <data name="Average_runtime" xml:space="preserve">
    <value>Average runtime: </value>
  </data>
  <data name="Ciphertext_lengths" xml:space="preserve">
    <value>Ciphertext lengths: </value>
  </data>
  <data name="Key_lengths__" xml:space="preserve">
    <value>Key lengths: </value>
  </data>
  <data name="Average_decryptions_necessary__" xml:space="preserve">
    <value>Average decryptions necessary: </value>
  </data>
  <data name="Average_restarts__" xml:space="preserve">
    <value>Average restarts: </value>
  </data>
  <data name="Average_population_size__" xml:space="preserve">
    <value>Average population size: </value>
  </data>
  <data name="Average_tabu_set_size__" xml:space="preserve">
    <value>Average tabu set size: </value>
  </data>
  <data name="Averagely_decrypted__" xml:space="preserve">
    <value>Averagely decrypted: </value>
  </data>
  <data name="Averagely_decrypted_of_min" xml:space="preserve">
    <value>Averagely decrypted: {0}% of min {1}</value>
  </data>
  <data name="Average_success__" xml:space="preserve">
    <value>Average success: </value>
  </data>
  <data name="Gnuplot_script_for_plotting_data_from_output_GnuPlotData" xml:space="preserve">
    <value>Gnuplot script for plotting data from output GnuPlotData</value>
  </data>
  <data name="Save_the_GnuPlotScript_output_into_a_file_named_" xml:space="preserve">
    <value>Save the GnuPlotScript output into a file named </value>
  </data>
  <data name="Use__load__0__p__to_plot" xml:space="preserve">
    <value>Use 'load {0}.p' to plot</value>
  </data>
  <data name="Data_for__" xml:space="preserve">
    <value>Data for: </value>
  </data>
  <data name="TryGetValue_from__0__failed__ciphertextLength___1____2" xml:space="preserve">
    <value>TryGetValue from {0} failed! ciphertextLength: {1}, {2}: </value>
  </data>
  <data name="Save_the_GnuPlotData_output_in_a_file_named_" xml:space="preserve">
    <value>Save the GnuPlotData output in a file named </value>
  </data>
  <data name="General_settings" xml:space="preserve">
    <value>General settings</value>
  </data>
  <data name="Style_settings" xml:space="preserve">
    <value>Style settings</value>
  </data>
  <data name="Plot_settings" xml:space="preserve">
    <value>Plot settings</value>
  </data>
  <data name="x_Axis_settings" xml:space="preserve">
    <value>x-Axis settings</value>
  </data>
  <data name="y_Axis_settings" xml:space="preserve">
    <value>y-Axis settings</value>
  </data>
  <data name="second_y_Axis_settings" xml:space="preserve">
    <value>second y-Axis settings</value>
  </data>
  <data name="plotting" xml:space="preserve">
    <value>plotting</value>
  </data>
  <data name="The_key_input_is_empty_" xml:space="preserve">
    <value>The key input is empty!</value>
  </data>
  <data name="The_plaintext_input_is_empty_" xml:space="preserve">
    <value>The plaintext input is empty!</value>
  </data>
  <data name="The_seed_input_is_empty__It_is_required_for_logging_purposes_" xml:space="preserve">
    <value>The seed input is empty! It is required for logging purposes.</value>
  </data>
  <data name="Current_key_number__" xml:space="preserve">
    <value>Current key number: </value>
  </data>
  <data name="key_number__" xml:space="preserve">
    <value>key number: </value>
  </data>
  <data name="Done" xml:space="preserve">
    <value>Done</value>
  </data>
  <data name="ID" xml:space="preserve">
    <value>ID</value>
  </data>
  <data name="Last_runtime" xml:space="preserve">
    <value>Last runtime</value>
  </data>
  <data name="Last_number_of_restarts" xml:space="preserve">
    <value>Last number of restarts</value>
  </data>
  <data name="Last_number_of_decryptions" xml:space="preserve">
    <value>Last number of decryptions</value>
  </data>
  <data name="Started_evaluating" xml:space="preserve">
    <value>Started evaluating</value>
  </data>
</root>