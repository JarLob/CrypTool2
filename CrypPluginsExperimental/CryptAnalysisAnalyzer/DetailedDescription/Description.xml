<?xml version="1.0" encoding="utf-8" ?>

<documentation>
  <language culture="en"/>

  <introduction lang="en">
    This <b>CryptAnalysisAnalyzer</b> (<b>CAA</b>) component is designed to use the test vectors (key and plaintext) from the <b>TestVectorGenerator</b> (<b>TVG</b>) and analyze classical cryptanalytic CrypTool 2 components (<b>CAs</b>) using this test vectors.

    <section headline="History">
      A general test vector generator making analytic results comparable is available in most computer science fields, but not in the field of cryptanalysis. In the paper "We need test vectors!" (a proposal for 2017 Cryptologic History Symposium), Nils Kopal explained that standardized test vectors are for the field of cryptanalysis are important in order to compare different cryptanalytic algorithms.
    </section>

    <section headline="Algorithm">
      The algorithm is working in three different states, shown in the following image:
      <newline/>

      <img src="CryptAnalysisAnalyzer\DetailedDescription\Images\flowdiagramsimplecolored.png"/>

      <newline/>
      <newline/>
      State 1 - New test vector:
      <newline/>
      In state 1 (green), the new test vector from the <b>TVG</b> is stored and this test vector is provided to the components to be analyzed (<b>Cipher</b> and <b>CA</b>) The algorithm stays in state 1 and waits for the results of these components.
      <newline/>
      <newline/>
      State 2 - Collect data:
      <newline/>
      In state 2 (blue), the incoming results from the <b>Cipher</b> and <b>CA</b> components are stored together with the according test vector. If there are still keys to generate (not all test runs finished), the current key is used to trigger the next key from the <b>TVG</b>. The algorithm stays in state 2 and waits for the next test vector. After all keys have been generated, the algorithm switches to state 3.
      <newline/>
      <newline/>
      State 3 - Evaluation:
      <newline/>
      In state 3 (red), all collected test data is evaluated. The averages of runtime (if enabled), success probability, decrypted ciphertext, necessary decryptions, and (if provided) restarts, population size, and tabu set size. Additionally, these values can be calculated in detail, for each ciphertext length, key length, or runtime (if enabled). The CSV output of those values can be used in other applications, for example in GnuPlot (together with the generated script output).
    </section>
  </introduction>

  <usage lang="en">
    The <b>CAA</b> has four mandatory input connectors: key, plaintext, total keys, ciphertext. The optional inputs are: seed, best key, best plaintext, evaluation container.
    <newline/>
    <newline/>
    <b>Key:</b>
    <newline/>
    The key generated by the <b>TVG</b>.
    <newline/>
    <newline/>
    <b>Plaintext:</b>
    <newline/>
    The plaintext generated by the <b>TVG</b>.
    <newline/>
    <newline/>
    <b>Total keys:</b>
    <newline/>
    The total number of keys/test runs to be generated by the <b>TVG</b>.
    <newline/>
    <newline/>
    <b>Ciphertext:</b>
    <newline/>
    The plaintext encrypted by the used <b>Cipher</b> component.
    <newline/>
    <newline/>
    <b>Seed:</b>
    <newline/>
    This seed should be set to the same seed as the one used by the <b>TVG</b>. It is just logged and displayed along with the results in the end (because it is necessary to reproduce these test vectors).
    <newline/>
    <newline/>
    <b>Best key:</b>
    <newline/>
    The best key is the key for the best solution that the <b>CA</b> was able to find.
    <newline/>
    <newline/>
    <b>Best plaintext:</b>
    <newline/>
    The best plaintext is the plaintext of the best solution that the <b>CA</b> was able to find.
    <newline/>
    <newline/>
    <b>Evaluation container:</b>
    <newline/>
    The evaluation container from the <b>CA</b> contains all detailed results for the current test run.
    <newline/>
    <newline/>
    <newline/>
    The outputs of the <b>CAA</b> are the following:
    <newline/>
    <newline/>
    <b>Key:</b>
    <newline/>
    The key to be provided for the <b>Cipher</b> component.
    <newline/>
    <newline/>
    <b>Plaintext:</b>
    <newline/>
    The plaintext to be provided for the <b>Cipher</b> and the <b>CA</b> components. The <b>CA</b> only needs the plaintext (along with the necessary percentage, explained below) if the option to stop the algorithm early on success is enabled.
    <newline/>
    <newline/>
    <b>Minimal correct percentage:</b>
    <newline/>
    The minimal percentage that the decrypted ciphertext (best plaintext) has to match the correct plaintext to count as a successful decryption. This percentage has to be provided for the <b>CA</b>, if the option to stop the algorithm early on success is enabled (along with the correct plaintext).
    <newline/>
    <newline/>
    <b>Trigger next key:</b>
    <newline/>
    This is the value that has to be connected to the seed input of the <b>TVG</b> and is used as the seed for the next test vector. It can be set to the current key or plaintext (the current key is the default value). This ensures, that the following keys in the current test series are derived from the test vector before that. This makes the whole test series reproducible by using the same initial seed.
    <newline/>
    <newline/>
    <b>Evaluation output:</b>
    <newline/>
    The evaluation output provides the calculated average from the whole test series, including runtime (if enabled), success probability, decrypted ciphertext, necessary decryptions, and (if provided) restarts, population size, and tabu set size.
    <newline/>
    <newline/>
    <b>GnuPlot script:</b>
    <newline/>
    The GnuPlot script output provides a script file that can be directly loaded with GnuPlot in order to print the evaluation results, provided using the GnuPlot data output.
    <newline/>
    <newline/>
    <b>GnuPlot data:</b>
    <newline/>
    The GnuPlot data output provides the detailed calculated values from the evaluation of the complete test series, per ciphertext length, key length, or runtime (if enabled). This CSV file can be used in separate applications, for example plotted with GnuPlot, using the provided GnuPlot script.
    <newline/>
    <newline/>
    <newline/>
    The <b>CAA</b> is adjustable through seven settings:
    <newline/>
    <newline/>
    <b>Minimal correct percentage:</b>
    <newline/>
    See the explanation above (output connectors).
    <newline/>
    <newline/>
    <b>Calculate runtime:</b>
    <newline/>
    This setting enables or disables the calculation of the runtime of the <b>CA</b>. If disabled, the evaluation might be slightly faster, but the runtime will not be available in the results in the end.
    <newline/>
    <newline/>
    <b>X-axis:</b>
    <newline/>
    This setting sets the base value, to which the other measured metrics are printed relatively via the GnuPlot data output. If used in GnuPlot, this is the value on the X-axis.
    <newline/>
    <newline/>
    <b>Y-axis:</b>
    <newline/>
    One of the metrics can be chosen with this setting. This metric will be printed via the GnuPlot script output, relative to the value specified through the X-axis setting. If used in GnuPlot, this is the value on the Y-axis.
    <newline/>
    <newline/>
    <b>Second Y-axis:</b>
    <newline/>
    A second metric can be chosen with this setting. This metric will also be printed via the GnuPlot script output, relative to the value specified through the X-axis setting. If used in GnuPlot, this is the value on the second Y-axis.
    <newline/>
    <newline/>
    <b>Second Y-axis average:</b>
    <newline/>
    This setting enables or disables the average line that resembles the second Y-axis average.
    <newline/>
    <newline/>
    <b>Normalize Y-range factor:</b>
    <newline/>
    This setting only modifies the range of the Y-axes, if there are single very high or very low values in them. If a value is higher than its neighbors by more than the specified factor, than the Y-range is normalized. This lays the emphasis of the initial GnuPlot range on the majority of the values and shows them in detail. Outliers usually cause the plot to be to compressed to be able to distinguish the close to average values.
    <newline/>
    The following image displays the complete evaluation of the <b>CylinderCipherAnalyzer</b> (<b>CCA</b>) in CrypTool 2 using the <b>CAA</b>. The first step is highlighted in green, the second in blue, and the third in red. The <b>CAA</b> itself is highlighted in yellow.

      <img src="CryptAnalysisAnalyzer\DetailedDescription\Images\caa-template-final.png"/>

    This component was part of a master thesis which contains all details about it:

    "Development of an Evaluation Method for Cryptanalysis of Classical Ciphers in CrypTool 2"
    Bastian Heuser, University of Kassel - 2017 - Master thesis    
  </usage>

  <presentation lang="en">
  </presentation>

</documentation>
