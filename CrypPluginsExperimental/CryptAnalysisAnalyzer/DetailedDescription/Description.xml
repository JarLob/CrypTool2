<?xml version="1.0" encoding="utf-8" ?>

<documentation>
  <language culture="en"/>
  <language culture="de-DE"/>

  <introduction lang="en">
    This <b>CryptAnalysisAnalyzer</b> component (<b>CAA</b>) is designed to analyze classical cryptanalytic CrypTool 2 components (<b>CAs</b>) by using test vectors (consisting of key and plaintext) from the <b>TestVectorGenerator</b> (<b>TVG</b>).

    <section headline="History">
      A general test vector generator making analytic results comparable is available in most computer science fields, but not in the field of cryptanalysis. In the paper "We need test vectors!" (a proposal for 2017 Cryptologic History Symposium), Nils Kopal explained that standardized test vectors are important for the field of cryptanalysis in order to compare different cryptanalytic algorithms.
    </section>

    <section headline="Algorithm">
      The algorithm is working in three different states, shown in the following image:
      <newline/>

      <img src="CryptAnalysisAnalyzer\DetailedDescription\Images\flowdiagramsimplecolored.png"/>

      <newline/>
      <newline/>
      State 1 - New test vector:
      <newline/>
      In state 1 (green), the algorithm waits for a new test vector from the <b>TVG</b>. Once the new test vector is available, it is stored and provided to the components to be analyzed (<b>Cipher</b> and <b>CA</b>). The algorithm switches to state 2 and waits for the results of these components.
      <newline/>
      <newline/>
      State 2 - Collect data:
      <newline/>
      In state 2 (blue), the incoming results from the <b>Cipher</b> and <b>CA</b> components are stored together with the according test vector. The <b>Cipher</b> component provides the ciphertext, while the <b>CA</b> component provides the best key, best plaintext, and the collected values for the evaluation in an EvaluationContainer. If there are still keys to be generated (not all test runs finished), the current key is used to trigger the next test vector from the <b>TVG</b>. The algorithm switches to state 1 and waits for the next test vector. After all test vectors have been generated, the algorithm switches to state 3.
      <newline/>
      <newline/>
      State 3 - Evaluation:
      <newline/>
      In state 3 (red), all collected test data is evaluated. These are the averages of the runtime (if enabled), the success probability, the percentage of decrypted ciphertext, the necessary decryptions, and (if provided) the restarts, the population size, and the tabu set size. Additionally, these values can be calculated in detail, for each ciphertext length, key length, or runtime (if enabled). The CSV output of those values can be used in other applications, for example in GnuPlot (together with the generated script output).
    </section>
  </introduction>

  <introduction lang="de-DE">
    Die <b>CryptAnalysisAnalyzer</b>-Komponente (<b>CAA</b>) analysiert klassische kryptoanalytische Komponenten (<b>CAs</b>) in CrypTool 2, indem sie detaillierte Testreihen durchführt, basierend auf den Testvektoren (bestehend aus Schlüssel und Klartext), die von der <b>TestVectorGenerator</b>-Komponente (<b>TVG</b>) erzeugt wurden.

    <section headline="Geschichte">
      In den meisten Bereichen der Informatik sind standardisierte Testvektoren verfügbar, die analytische Testergebnisse vergleichbar machen, aber nicht im Bereich der Kryptoanalyse. In der Publikation "We need test vectors!" (ein Vorschlag für das "Cryptologic History Symposium" in 2017), erklärt Nils Kopal, dass standardisierte Testvektoren im Bereich der Kryptoanalyse wichtig sind, um verschiedene kryptoanalytische Algorithmen miteinander zu vergleichen.
    </section>

    <section headline="Algorithmus">
      Der Algorithmus agiert in drei verschiedenen Zuständen, zu sehen in folgendem Bild:
      <newline/>

      <img src="CryptAnalysisAnalyzer\DetailedDescription\Images\flowdiagramsimplecolored.png"/>

      <newline/>
      <newline/>
      Zustand 1 - Neuer Testvektor:
      <newline/>
      In Zustand 1 (grün) wartet der Algorithmus auf einen neuen Testvektor vom <b>TVG</b>. Sobald dieser Testvektor eingetroffen ist, wird er gespeichert und den zu analysierenden Komponenten (<b>Cipher</b> und <b>CA</b>) zur Verfügung gestellt. Der Algorithmus wechselt dann in den Zustand 2 und wartet auf die Ergebnisse dieser Komponenten.
      <newline/>
      <newline/>
      Zustand 2 - Daten sammeln:
      <newline/>
      In Zustand 2 (blau) werden die eingehenden Ergebnisse der <b>Cipher</b>- und <b>CA</b>-Komponenten zusammen mit dem entsprechenden Testvektor gespeichert. Die <b>Cipher</b>-Komponente überträgt dabei den Geheimtext, während die <b>CA</b>-Komponente den besten Schlüssel, besten Klartext und die gesammelten Werte für die Evaluation in einem EvaluationContainer bereitstellt. Wenn noch immer Schlüssel zu berechnen sind (noch nicht alle Testläufe sind fertig), wird der aktuelle Schlüssel verwendet, um die Generierung des nächsten Testvektors im <b>TVG</b> anzustoßen. Der Algorithmus wechselt in den ersten Zustand und wartet auf den nächsten Testvektor. Wenn alle Testvektoren berechnet wurden, wechselt der Algorithmus in Zustand 3.
      <newline/>
      <newline/>
      Zustand 3 - Evaluation:
      <newline/>
      Im dritten Zustand (rot) werden alle gesammelten Testdaten evaluiert. Diese sind die Durchschnittswerte der Laufzeit (falls aktiviert), der Erfolgswahrscheinlichkeit, die prozentuale Entschlüsselung der Geheimtexte, die benötigten Entschlüsselungen, und (wenn angegeben) die Neustarts, die Populationsgröße und die Größe des Tabu-Sets. Zusätzlich können diese Werte im Detail berechnet werden, jeweils in Abhängigkeit der Länge der Geheimtexte oder Schlüssel, oder der Laufzeit (falls aktiviert). Die CSV-Ausgabe (Komma-Separierte-Werte) dieser Werte kann in anderen Anwendungen verwendet werden, zum Beispiel in GnuPlot (zusammen mit der generierten GnuPlot-Skript-Ausgabe). 
    </section>
  </introduction>

  <usage lang="en">
    The <b>CAA</b> component has four mandatory input connectors: key, plaintext, total keys, and ciphertext. The optional inputs are: seed, best key, best plaintext, and EvaluationContainer.
    <newline/>
    <newline/>
    <b>Key input:</b>
    <newline/>
    The key generated by the <b>TVG</b> component.
    <newline/>
    <newline/>
    <b>Plaintext input:</b>
    <newline/>
    The plaintext generated by the <b>TVG</b> component.
    <newline/>
    <newline/>
    <b>Total keys input:</b>
    <newline/>
    The total number of keys/test runs to be generated by the <b>TVG</b> component.
    <newline/>
    <newline/>
    <b>Ciphertext input:</b>
    <newline/>
    The plaintext encrypted by the used <b>Cipher</b> component.
    <newline/>
    <newline/>
    <b>Seed input:</b>
    <newline/>
    This seed should be set to the same seed as the one used by the <b>TVG</b> component. It is just logged and displayed along with the results in the end (because it is necessary to reproduce these test vectors).
    <newline/>
    <newline/>
    <b>Best key input:</b>
    <newline/>
    The best key is the key for the best solution that the <b>CA</b> component was able to find.
    <newline/>
    <newline/>
    <b>Best plaintext input:</b>
    <newline/>
    The best plaintext is the plaintext of the best solution that the <b>CA</b> component was able to find.
    <newline/>
    <newline/>
    <b>EvaluationContainer input:</b>
    <newline/>
    The evaluation container from the <b>CA</b> component contains all detailed results for the current test run.
    <newline/>
    <newline/>
    <newline/>
    The outputs of the <b>CAA</b> component are the following:
    <newline/>
    <newline/>
    <b>Key output:</b>
    <newline/>
    The key to be provided for the <b>Cipher</b> component.
    <newline/>
    <newline/>
    <b>Plaintext output:</b>
    <newline/>
    The plaintext to be provided for the <b>Cipher</b> and the <b>CA</b> components. The <b>CA</b> component only needs the plaintext (along with the minimum necessary percentage, explained below) if the option to stop the algorithm early on success is enabled.
    <newline/>
    <newline/>
    <b>Minimal correct percentage output:</b>
    <newline/>
    The minimal percentage that the decrypted ciphertext (best plaintext) has to match the correct plaintext to count as a successful decryption. This percentage has to be provided for the <b>CA</b> component, if the option to stop the algorithm early on success is enabled (along with the correct plaintext).
    <newline/>
    <newline/>
    <b>Trigger next key output:</b>
    <newline/>
    This is the value that has to be connected to the seed input of the <b>TVG</b> component and is used as the seed for the next test vector. It can be set to the current key or plaintext (the current key is the default value). This ensures, that the following keys in the current test series are derived from the test vector before that. This makes the whole test series reproducible by using the same initial seed.
    <newline/>
    <newline/>
    <b>Evaluation output:</b>
    <newline/>
    The evaluation output provides the calculated averages of the whole test series, including the runtime (if enabled), the success probability, the percentage of decrypted ciphertext, the necessary decryptions, and (if provided) the restarts, the population size, and the tabu set size.
    <newline/>
    <newline/>
    <b>GnuPlot script output:</b>
    <newline/>
    The GnuPlot script output provides a script file that can be directly loaded with GnuPlot in order to print the evaluation results, provided using the GnuPlot data output.
    <newline/>
    <newline/>
    <b>GnuPlot data output:</b>
    <newline/>
    The GnuPlot data output provides the detailed calculated values from the evaluation of the complete test series, per ciphertext length, key length, or runtime (if enabled). This CSV file can be used in separate applications, for example plotted with GnuPlot, using the provided GnuPlot script.
    <newline/>
    <newline/>
    <newline/>
    The <b>CAA</b> component is adjustable through seven settings:
    <newline/>
    <newline/>
    <b>Minimal correct percentage setting:</b>
    <newline/>
    See the explanation above (output connectors).
    <newline/>
    <newline/>
    <b>Calculate runtime setting:</b>
    <newline/>
    This setting enables or disables the calculation of the runtime of the <b>CA</b> component. If disabled, the test series might run slightly faster, but the runtime will not be available in the results in the end.
    <newline/>
    <newline/>
    <b>X-axis setting:</b>
    <newline/>
    This setting sets the base value, to which the other measured metrics are printed relatively via the GnuPlot data output. If used in GnuPlot, this is the value on the X-axis.
    <newline/>
    <newline/>
    <b>Y-axis setting:</b>
    <newline/>
    One of the metrics can be chosen with this setting. This metric will be printed via the GnuPlot data output, relative to the value specified through the X-axis setting. If used in GnuPlot, this is the value on the Y-axis.
    <newline/>
    <newline/>
    <b>Second Y-axis setting:</b>
    <newline/>
    A second metric can be chosen with this setting. This metric will also be printed via the GnuPlot data output, relative to the value specified through the X-axis setting. If used in GnuPlot, this is the value on the second Y-axis.
    <newline/>
    <newline/>
    <b>Second Y-axis average setting:</b>
    <newline/>
    This setting enables or disables the average line that resembles the second Y-axis average.
    <newline/>
    <newline/>
    <b>Normalize Y-range factor setting:</b>
    <newline/>
    This setting only modifies the range of the Y-axes, if there are single very high or very low values in them. If a value is higher (or lower) than its neighbors by more than the specified factor, than the Y-range is normalized. This lays the emphasis of the initial GnuPlot range on the majority of the values and shows them in detail. Outliers usually cause the plot to be too compressed to be able to distinguish the values that are close to average.
    <newline/>
    The following image displays the complete testing process of the <b>CylinderCipherAnalyzer</b> component (<b>CCA</b>) in CrypTool 2 using the <b>CAA</b> component. The first step is highlighted in green, the second in blue, and the third in red. The <b>CAA</b> component itself is highlighted in yellow.

      <img src="CryptAnalysisAnalyzer\DetailedDescription\Images\caa-template-final.png"/>

    This component was part of a master thesis which contains more details about it:

    "Development of an Evaluation Method for Cryptanalysis of Classical Ciphers in CrypTool 2"
    Bastian Heuser, University of Kassel -- 2017 -- Master thesis    
  </usage>

  <usage lang="de-DE">
    Die <b>CAA</b>-Komponente hat vier obligatorische Eingabeverbindungen: Schlüssel, Klartext, gesamte Schlüssel, und Geheimtext. Die optionalen Eingaben sind: Samen (Seed), bester Schlüssel, bester Klartext und Evaluations-Behälter (EvaluationContainer).
    <newline/>
    <newline/>
    <b>Schlüssel-Eingabe:</b>
    <newline/>
    Der durch die <b>TVG</b>-Komponente generierte Schlüssel.
    <newline/>
    <newline/>
    <b>Klartext-Eingabe:</b>
    <newline/>
    Der durch die <b>TVG</b>-Komponente generierte Klartext.
    <newline/>
    <newline/>
    <b>Gesamte-Schlüssel-Eingabe:</b>
    <newline/>
    Die gesamte Anzahl der Schlüssel bzw. Testläufe die von der <b>TVG</b>-Komponente generiert werden sollen.
    <newline/>
    <newline/>
    <b>Geheimtext-Eingabe:</b>
    <newline/>
    Der durch die <b>Cipher</b>-Komponente verschlüsselte Klartext.
    <newline/>
    <newline/>
    <b>Samen-Eingabe (Seed):</b>
    <newline/>
    Dieser Samen sollte der selbe sein wie der aktuell für den <b>TVG</b> verwendete. Er wird einfach protokolliert und mit den finalen Testergebnissen am Ende angezeigt (weil er nötig ist um die generierten Testvektoren zu reproduzieren).
    <newline/>
    <newline/>
    <b>Bester-Schlüssel-Eingabe:</b>
    <newline/>
    Der beste Schlüssel ist der Schlüssel für die beste Lösung die die <b>CA</b>-Komponente finden konnte.
    <newline/>
    <newline/>
    <b>Bester-Klartext-Eingabe:</b>
    <newline/>
    Der beste Klartext ist der Klartext der besten Lösung die die <b>CA</b>-Komponente finden konnte.
    <newline/>
    <newline/>
    <b>Evaluations-Behälter-Eingabe:</b>
    <newline/>
    Der Behälter der alle von der <b>CA</b>-Komponente gesammelten detaillierten Ergebnisse für den aktuellen Testlauf beinhaltet.
    <newline/>
    <newline/>
    <newline/>
    Die Ausgabe-Verbindungen der <b>CAA</b>-Komponente sind die folgenden:
    <newline/>
    <newline/>
    <b>Schlüssel-Ausgabe:</b>
    <newline/>
    Der Schlüssel der der <b>Cipher</b>-Komponente zur Verfügung gestellt wird.
    <newline/>
    <newline/>
    <b>Klartext-Ausgabe:</b>
    <newline/>
    Der Klartext der der <b>Cipher</b>- und <b>CA</b>-Komponente zur Verfügung gestellt wird. Die <b>CA</b>-Komponente benötigt den Klartext (gemeinsam mit der benötigten minimalen Prozentzahl, die im folgenden erklärt wird) nur dann, wenn die Option den Algorithmus bei Erfolg vorzeitig zu beenden aktiviert ist.
    <newline/>
    <newline/>
    <b>Minimal-Korrekte-Prozentzahl-Ausgabe:</b>
    <newline/>
    Die minimale Prozentzahl zu der der entschlüsselte Geheimtext (bester Klartext) mit dem korrekten Klartext übereinstimmen muss, um als eine erfolgreiche Entschlüsselung zu zählen. Diese Prozentzahl muss für die <b>CA</b>-Komponente bereitgestellt werden (gemeinsam mit dem korrekten Klartext), wenn die Option den Algorithmus bei Erfolg vorzeitig zu beenden aktiviert ist.
    <newline/>
    <newline/>
    <b>Nächster-Schlüssel-Ausgabe:</b>
    <newline/>
    Diese Ausgabe muss mit der Samenwert-Eingabe (Seed) der <b>TVG</b>-Komponente verbunden werden und wird dort als Samen für den nächsten Testvektor verwendet. Als Samen für den nächsten Testvektor kann der aktuelle Schlüssel oder Klartext verwendet werden (der aktuelle Schlüssel ist der Standardwert). Dadurch wird sichergestellt, dass die nächsten Testvektoren der aktuellen Testserie von den vorherigen abgeleitet werden. Das macht die gesamte Testserie reproduzierbar wenn der selbe initiale Samen verwendet wird.
    <newline/>
    <newline/>
    <b>Evaluations-Ausgabe:</b>
    <newline/>
    Die Evaluations-Ausgabe stellt die errechneten Durchschnittswerte der gesamten Testserie bereit. Beinhaltet sind die Laufzeit (falls aktiviert), die Erfolgswahrscheinlichkeit, die prozentuale Entschlüsselung der Geheimtexte, die benötigten Entschlüsselungen, und (wenn angegeben) die Neustarts, die Populationsgröße und die Größe des Tabu-Sets.
    <newline/>
    <newline/>
    <b>GnuPlot-Skript-Ausgabe:</b>
    <newline/>
    Die Ausgabe des GnuPlot Skriptes kann direkt in einer Datei gespeichert und durch GnuPlot geladen werden, um die Evaluations-Ergebnisse die durch die GnuPlot-Daten-Ausgabe bereitgestellt werden zu zeichnen.
    <newline/>
    <newline/>
    <b>GnuPlot-Daten-Ausgabe:</b>
    <newline/>
    Diese Ausgabe stellt die detaillerten berechneten Werte der Evaluation der gesamten Testserie bereit, jeweils in Abhängigkeit der Länge des Schlüssels, des Klartextes oder der Laufzeit (falls aktiviert). Diese CSV-Datei (Komma-Separierte-Werte) kann in anderen Anwendungen verwendet werden, zum Beispiel in GnuPlot (zusammen mit der generierten GnuPlot-Skript-Ausgabe). 
    <newline/>
    <newline/>
    <newline/>
    Die <b>CAA</b>-Komponente kann mittels folgender sieben Einstellungen angepasst werden:
    <newline/>
    <newline/>
    <b>Minimal-Korrekte-Prozentzahl-Einstellung:</b>
    <newline/>
    Siehe die Erklärung oben (bei Ausgabe-Verbindungen).
    <newline/>
    <newline/>
    <b>Berechne-Laufzeit-Einstellung:</b>
    <newline/>
    Diese Einstellung aktiviert oder deaktiviert die Berechnung der Laufzeit des <b>CA</b>. Im deaktivierten Zustand kann die Testserie möglicherweise etwas schneller durchlaufen, aber die Laufzeit wird dann nicht in den Ergebnissen verfügbar sein.
    <newline/>
    <newline/>
    <b>X-Achse-Einstellung:</b>
    <newline/>
    Diese Einstellung legt den Basis-Wert fest, zu dem alle anderen Metriken relativ mittels des GnuPlot-Daten-Ausgabe ausgegeben werden. Wenn man die GnuPlot-Ausgaben in GnuPlot nutzt, dann ist das der Wert auf der X-Achse.
    <newline/>
    <newline/>
    <b>Y-Achse-Einstellung:</b>
    <newline/>
    Eine der Metriken kann mit dieser Einstellung gewählt werden. Diese Metrik wird in der GnuPlot-Daten-Ausgabe relativ zu dem Wert auf der X-Achse ausgegeben. Wenn man die GnuPlot-Ausgaben in GnuPlot nutzt, dann ist das der Wert auf der Y-Achse.
    <newline/>
    <newline/>
    <b>Zweite-Y-Achse-Einstellung:</b>
    <newline/>
    Eine zweite Metrick kann mit dieser Einstellung gewählt werden. Diese Metrik wird auch in der GnuPlot-Daten-Ausgabe relativ zu dem Wert auf der X-Achse ausgegeben.
    Wenn man die GnuPlot-Ausgaben in GnuPlot nutzt, dann ist das der Wert auf der zweiten Y-Achse.
    <newline/>
    <newline/>
    <b>Zweite-Y-Achse-Durchschnitts-Einstellung:</b>
    <newline/>
    Diese Einstellung aktiviert oder deaktiviert die Durchschnitts-Gerade, die den Durchschnitt der zweiten Y-Achse wiederspiegelt.
    <newline/>
    <newline/>
    <b>Normalisiere-Y-Bereich-Faktor-Einstellung:</b>
    <newline/>
    Diese Einstellung modifiziert nur den Bereich der Y-Achsen, wenn einzelne sehr hohe oder niedrige Werte existieren. Wenn ein Wert um den hier festgelegten Faktor höher (oder niedriger) ist als seine Nachbarwerte, dann wird der Bereich der Y-Achsen normalisiert. Dadurch wird der Fokus des initialen GnuPlot-Bereichs auf die Mehrzahl der Werte gelegt und zeigt diese im Detail. Ausreißer sorgen meistens dafür, dass der Graph so komprimiert wird, dass die Werte die nah am Durchschnitt liegen nicht mehr unterschieden werden können.
    <newline/>
    Das folgende Bild visualisiert den vollständigen Test-Prozess der <b>CylinderCipherAnalyzer</b>-Komponente (<b>CCA</b>) in CrypTool 2, mit Hilfe der <b>CAA</b>-Komponente. Der erste Schritt ist grün markiert, der zweite blau und der dritte rot. Die <b>CAA</b>-Komponente selbst ist gelb markiert.

      <img src="CryptAnalysisAnalyzer\DetailedDescription\Images\caa-template-final.png"/>

    Diese Komponente war Teil einer Masterarbeit, die weitere Details darüber enthält:

    "Development of an Evaluation Method for Cryptanalysis of Classical Ciphers in CrypTool 2"
    Bastian Heuser, Universität Kassel -- 2017 -- Masterarbeit    
  </usage>

  <presentation lang="en">
  </presentation>

  <presentation lang="de-DE">
  </presentation>

</documentation>
