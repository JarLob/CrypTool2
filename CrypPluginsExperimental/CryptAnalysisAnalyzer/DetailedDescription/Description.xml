<?xml version="1.0" encoding="utf-8"?>
<documentation>
  <language culture="en" />
  <language culture="ru" />
  <language culture="de-DE" />
  <introduction lang="en">
    This <b>CryptAnalysisAnalyzer</b> component (<b>CAA</b>) is designed to analyze classical cryptanalytic CrypTool 2 components (<b>CAs</b>) by using test vectors (consisting of key and plaintext) from the <b>TestVectorGenerator</b> (<b>TVG</b>).

    <section headline="History">
      A general test vector generator making analytic results comparable is available in most computer science fields, but not in the field of cryptanalysis. In the paper "We Need Test Vectors!" (a proposal for the 2017 "Symposium on Cryptologic History" of the NSA), Nils Kopal explained that standardized test vectors are important for the field of cryptanalysis in order to compare different cryptanalytic algorithms.
    </section><section headline="Algorithm">
      The algorithm is working in three different states, shown in the following image:
      <newline /><newline /><img src="CryptAnalysisAnalyzer/DetailedDescription/Images/flowdiagramsimplecolored.png" width="100%" /><newline /><newline /><newline /><b>State 1 - New test vector:</b><newline /><newline />
      In state 1 (green), the algorithm waits for a new test vector from the <b>TVG</b>. Once the new test vector is available, it is stored and provided to the components to be analyzed (<b>Cipher</b> and <b>CA</b>). The algorithm switches to state 2 and waits for the results of these components.
      <newline /><newline /><newline /><b>State 2 - Collect data:</b><newline /><newline />
      In state 2 (blue), the incoming results from the <b>Cipher</b> and <b>CA</b> components are stored together with the according test vector. The <b>Cipher</b> component provides the ciphertext, while the <b>CA</b> component provides the best key, best plaintext, and the collected values for the evaluation in an EvaluationContainer. If there are still keys to be generated (not all test runs finished), the current key is used to trigger the next test vector from the <b>TVG</b>. The algorithm switches to state 1 and waits for the next test vector. After all test vectors have been generated, the algorithm switches to state 3.
      <newline /><newline /><newline /><b>State 3 - Evaluation:</b><newline /><newline />
      In state 3 (red), all collected test data is evaluated. These are the averages of the runtime (if enabled), the success probability, the percentage of decrypted ciphertext, the necessary decryptions, and (if provided) the restarts, the population size, and the tabu set size. Additionally, these values can be calculated in detail, for each ciphertext length, key length, or runtime (if enabled). The CSV output of those values can be used in other applications, for example in GnuPlot (together with the generated script output).
    </section></introduction>
  <introduction lang="ru">Этот компонент CryptAnalysisAnalyzer (CAA) предназначен для анализа классических криптоаналитических компонентов CrypTool 2 (CA) с использованием тестовых векторов (состоящих из ключа и открытого текста) из TestVectorGenerator (TVG). Генерирующий генератор тестовых векторов, делающий аналитические результаты сопоставимыми, доступен в большинстве областей информатики, но не в области криптоанализа. В статье «Нам нужны тестовые векторы!» (предложение для «Симпозиума по криптологической истории 2017 года» NSA) Нильс Копал пояснил, что стандартизированные векторы тестов важны для поля криптоанализа, чтобы сравнить различные криптоаналитические алгоритмы. Алгоритм работает в трех разных состояниях, показанных на следующем изображении: Состояние 1 - Новый тестовый вектор: В состоянии 1 (зеленый) алгоритм ожидает нового тестового вектора из TVG. Как только новый тестовый вектор доступен, он сохраняется и предоставляется компонентам, подлежащим анализу (Cipher and CA). Алгоритм переходит в состояние 2 и ожидает результатов этих компонентов. Состояние 2 - Сбор данных: в состоянии 2 (синий) входящие результаты от компонентов Cipher и CA сохраняются вместе с соответствующим тестовым вектором. Компонент Cipher предоставляет зашифрованный текст, в то время как компонент CA предоставляет лучший ключ, лучший открытый текст и собранные значения для оценки в EvaluationContainer. Если все еще есть ключи, которые должны быть сгенерированы (не все тестовые прогоны закончены), текущий ключ используется для запуска следующего тестового вектора из TVG. Алгоритм переходит в состояние 1 и ожидает следующего тестового вектора. После того, как все тестовые векторы были сгенерированы, алгоритм переходит в состояние 3. Состояние 3 - Оценка: В состоянии 3 (красный) оцениваются все собранные тестовые данные. Это средние значения времени выполнения (если включено), вероятность успеха, процент расшифрованного зашифрованного текста, необходимые дешифровки и (если предусмотрено) перезапуска, размер популяции и размер набора табу. Кроме того, эти значения могут быть рассчитаны подробно, для каждой длины зашифрованного текста, длины ключа или времени выполнения (если включено). CSV-вывод этих значений может использоваться в других приложениях, например, в GnuPlot (вместе с генерируемым выходом скрипта).</introduction>
  <introduction lang="de-DE">
    Die <b>CryptAnalysisAnalyzer</b>-Komponente (<b>CAA</b>) analysiert klassische kryptoanalytische Komponenten (<b>CAs</b>) in CrypTool 2, indem sie detaillierte Testreihen durchführt, basierend auf den Testvektoren (bestehend aus Schlüssel und Klartext), die von der <b>TestVectorGenerator</b>-Komponente (<b>TVG</b>) erzeugt wurden.

    <section headline="Geschichte">
      In den meisten Bereichen der Informatik gibt es standardisierte Testvektoren, um Testergebnisse vergleichbar zu machen. Für den Bereich der Kryptoanalyse ist das bisher nicht der Fall. In dem Beitrag "We Need Test Vectors!" (vorgestellt auf dem "Symposium on Cryptologic History" der NSA in 2017), erklärt Nils Kopal, dass standardisierte Testvektoren im Bereich der Kryptoanalyse wichtig sind, um verschiedene kryptoanalytische Algorithmen miteinander zu vergleichen.
    </section><section headline="Algorithmus">
      Der Algorithmus agiert in drei verschiedenen Zuständen, zu sehen in folgendem Bild:
      <newline /><newline /><img src="CryptAnalysisAnalyzer/DetailedDescription/Images/flowdiagramsimplecolored.png" width="100%" /><newline /><newline /><newline /><b>Zustand 1 - Neuer Testvektor:</b><newline /><newline />
      In Zustand 1 (grün) wartet der Algorithmus auf einen neuen Testvektor vom <b>TVG</b>. Sobald dieser Testvektor eingetroffen ist, wird er gespeichert und den zu analysierenden Komponenten (<b>Cipher</b> und <b>CA</b>) zur Verfügung gestellt. Der Algorithmus wechselt dann in den Zustand 2 und wartet auf die Ergebnisse dieser Komponenten.
      <newline /><newline /><newline /><b>Zustand 2 - Daten sammeln:</b><newline /><newline />
      In Zustand 2 (blau) werden die eingehenden Ergebnisse der <b>Cipher</b>- und <b>CA</b>-Komponenten zusammen mit dem entsprechenden Testvektor gespeichert. Die <b>Cipher</b>-Komponente überträgt dabei den Geheimtext, während die <b>CA</b>-Komponente den besten Schlüssel, besten Klartext und die gesammelten Werte für die Evaluation in einem EvaluationContainer bereitstellt. Wenn noch immer Schlüssel zu berechnen sind (noch nicht alle Testläufe sind fertig), wird der aktuelle Schlüssel verwendet, um die Generierung des nächsten Testvektors im <b>TVG</b> anzustoßen. Der Algorithmus wechselt in den ersten Zustand und wartet auf den nächsten Testvektor. Wenn alle Testvektoren berechnet wurden, wechselt der Algorithmus in Zustand 3.
      <newline /><newline /><newline /><b>Zustand 3 - Evaluation:</b><newline /><newline />
      Im dritten Zustand (rot) werden alle gesammelten Testdaten evaluiert. Diese sind die Durchschnittswerte der Laufzeit (falls aktiviert), der Erfolgswahrscheinlichkeit, die prozentuale Entschlüsselung der Geheimtexte, die benötigten Entschlüsselungen, und (wenn angegeben) die Neustarts, die Populationsgröße und die Größe des Tabu-Sets. Zusätzlich können diese Werte im Detail berechnet werden, jeweils in Abhängigkeit der Länge der Geheimtexte oder Schlüssel, oder der Laufzeit (falls aktiviert). Die CSV-Ausgabe (Komma-separierte Werte) dieser Werte kann in anderen Anwendungen verwendet werden, zum Beispiel in GnuPlot (zusammen mit der generierten GnuPlot-Skript-Ausgabe). 
    </section></introduction>
  <usage lang="en">
    The <b>CAA</b> component has four mandatory input connectors: key, plaintext, total keys, and ciphertext. The optional inputs are: seed, best key, best plaintext, and EvaluationContainer.
    <newline /><newline /><b>Key input:</b><newline />
    The key that is generated by the <b>TVG</b> component.
    <newline /><newline /><b>Plaintext input:</b><newline />
    The plaintext that is generated by the <b>TVG</b> component.
    <newline /><newline /><b>Total keys input:</b><newline />
    The total number of keys/test runs to be generated, specified in the <b>TVG</b> component.
    <newline /><newline /><b>Ciphertext input:</b><newline />
    The plaintext from the plaintext input, encrypted by the used <b>Cipher</b> component.
    <newline /><newline /><b>Seed input:</b><newline />
    This seed should be set to the same seed as the one used by the <b>TVG</b> component. It is just logged and displayed along with the results in the end (because it is necessary to reproduce these test vectors).
    <newline /><newline /><b>Best key input:</b><newline />
    The best key is the key for the best solution that the <b>CA</b> component was able to find.
    <newline /><newline /><b>Best plaintext input:</b><newline />
    The best plaintext is the plaintext of the best solution that the <b>CA</b> component was able to find.
    <newline /><newline /><b>EvaluationContainer input:</b><newline />
    The EvaluationContainer from the <b>CA</b> component contains all detailed results for the current test run.
    <newline /><newline /><newline />
    The outputs of the <b>CAA</b> component are the following:
    <newline /><newline /><b>Key output:</b><newline />
    The key to be provided for the <b>Cipher</b> component.
    <newline /><newline /><b>Plaintext output:</b><newline />
    The plaintext to be provided for the <b>Cipher</b> and the <b>CA</b> components. The <b>CA</b> component only needs the plaintext (along with the minimum necessary percentage, explained below) if the option to stop the algorithm early on success is enabled.
    <newline /><newline /><b>Minimal correct percentage output:</b><newline />
    The minimal percentage that the decrypted ciphertext (best plaintext) has to match the correct plaintext to count as a successful decryption. This percentage has to be provided for the <b>CA</b> component, if the option to stop the algorithm early on success is enabled (along with the correct plaintext).
    <newline /><newline /><b>Trigger next key output:</b><newline />
    This is the value that has to be connected to the seed input of the <b>TVG</b> component and is used as the seed for the next test vector. It can be set to the current key or plaintext (the current key is the default value). This ensures, that the following keys in the current test series are derived from the test vector before that. This makes the whole test series reproducible by using the same initial seed.
    <newline /><newline /><b>Evaluation output:</b><newline />
    The evaluation output provides the calculated averages of the whole test series, including the runtime (if enabled), the success probability, the percentage of decrypted ciphertext, the necessary decryptions, and (if provided) the restarts, the population size, and the tabu set size.
    <newline /><newline /><b>GnuPlot script output:</b><newline />
    The GnuPlot script output provides a script file that can be directly loaded with GnuPlot in order to print the evaluation results, provided using the GnuPlot data output.
    <newline /><newline /><b>GnuPlot data output:</b><newline />
    The GnuPlot data output provides the detailed calculated values from the evaluation of the complete test series, per ciphertext length, key length, or runtime (if enabled). This CSV file can be used in separate applications, for example plotted with GnuPlot, using the provided GnuPlot script.
    <newline /><newline /><newline />
    The <b>CAA</b> component is adjustable through seven settings:
    <newline /><newline /><b>Minimal correct percentage setting:</b><newline />
    See the explanation above (output connectors).
    <newline /><newline /><b>Calculate runtime setting:</b><newline />
    This setting enables or disables the calculation of the runtime of the <b>CA</b> component. If disabled, the test series might run slightly faster, but the runtime will not be available in the results in the end.
    <newline /><newline /><b>X-axis setting:</b><newline />
    This setting sets the base value, to which the other measured metrics are printed relatively via the GnuPlot data output. If used in GnuPlot, this is the value on the X-axis.
    <newline /><newline /><b>Y-axis setting:</b><newline />
    One of the metrics can be chosen with this setting. This metric will be printed via the GnuPlot data output, relative to the value specified through the X-axis setting. If used in GnuPlot, this is the value on the Y-axis.
    <newline /><newline /><b>Second Y-axis setting:</b><newline />
    A second metric can be chosen with this setting. This metric will also be printed via the GnuPlot data output, relative to the value specified through the X-axis setting. If used in GnuPlot, this is the value on the second Y-axis.
    <newline /><newline /><b>Second Y-axis average setting:</b><newline />
    This setting enables or disables the average line that resembles the second Y-axis average.
    <newline /><newline /><b>Normalize Y-range factor setting:</b><newline />
    This setting only modifies the range of the Y-axes, if there are single very high or very low values in them. If a value is higher (or lower) than its neighbors by more than the specified factor, then the Y-range is normalized. This lays the emphasis of the initial GnuPlot range on the majority of the values and shows them in detail. Outliers usually cause the plot to be too compressed to be able to distinguish the values that are close to average.
    <newline />
    The following image displays the complete testing process of the <b>CylinderCipherAnalyzer</b> component (<b>CCA</b>) in CrypTool 2 using the <b>CAA</b> component. The first step is highlighted in green, the second in blue, and the third in red. The <b>CAA</b> component itself is highlighted in yellow.
    <newline /><newline /><img src="CryptAnalysisAnalyzer/DetailedDescription/Images/caa-template-final.png" width="100%" /><newline /><newline />
    This <b>CAA</b> component was developed as part of a master thesis which contains more details about it:
    <newline /><newline />

    "<i>Development of an Evaluation Method for Cryptanalysis of Classical Ciphers in CrypTool 2</i>"
    Bastian Heuser, University of Kassel -- 2017 -- Master thesis    
  </usage>
  <usage lang="ru">Компонент CAA имеет четыре обязательных входных разъема: ключ, открытый текст, общие ключи и зашифрованный текст. Дополнительные входы: семя, лучший ключ, лучший открытый текст и EvaluationContainer. Ввод ключа: ключ, который генерируется компонентом TVG. Ввод обычного текста: открытый текст, который генерируется компонентом TVG. Общий ввод ключей: общее количество ключей / тестовых прогонов, которые должны быть сгенерированы, указано в компоненте TVG. Ввод зашифрованного текста: открытый текст из ввода открытого текста, зашифрованный компонентом Cipher. Вход семени: это семя должно быть настроено на то же семя, что и у компонента TVG. Он просто регистрируется и отображается вместе с результатами в конце (потому что необходимо воспроизвести эти тестовые векторы). Лучший ключевой ввод: лучший ключ - это ключ к лучшему решению, которое смог найти компонент ЦС. Лучший открытый текст: лучший открытый текст - это открытый текст лучшего решения, которое смог найти компонент ЦС. EvaluationContainer input: EvaluationContainer из компонента CA содержит все подробные результаты для текущего тестового прогона. Выходы компонента CAA следующие: Выход ключа: Ключ для компонента Cipher. Вывод Plaintext: открытый текст, который должен быть предоставлен для Cipher и компонентов CA. Компоненту CA нужен только открытый текст (вместе с минимальным необходимым процентом, как описано ниже), если включена опция остановки алгоритма на раннем этапе успеха. Минимальный правильный процентный результат: минимальный процент, который расшифрованный шифрованный текст (лучший открытый текст) должен соответствовать правильному открытому тексту, чтобы считать успешное дешифрование. Этот процент должен быть предоставлен для компонента ЦС, если включена опция остановки алгоритма на раннем этапе успеха (наряду с правильным открытым текстом). Trigger next key output: Это значение, которое должно быть подключено к исходному входу компонента TVG и используется как семя для следующего тестового вектора. Он может быть установлен на текущий ключ или открытый текст (текущий ключ является значением по умолчанию). Это гарантирует, что перед этим будут получены следующие ключи в текущей серии тестов. Это позволяет воспроизводить всю тестовую серию, используя одно и то же начальное семя. Вывод оценки: выход оценки предоставляет рассчитанные средние значения для всей серии тестов, включая время выполнения (если включено), вероятность успеха, процент расшифрованного зашифрованного текста, необходимые дешифровки и (если предусмотрено) перезапуска, размер популяции, и размер набора табу. Выход скрипта GnuPlot: выход скрипта GnuPlot предоставляет файл сценария, который может быть напрямую загружен с помощью GnuPlot, чтобы распечатать результаты оценки, предоставленные с использованием вывода данных GnuPlot. Выход данных GnuPlot: вывод данных GnuPlot предоставляет подробные расчетные значения из оценки полной серии тестов, длины зашифрованного текста, длины ключа или времени выполнения (если включено). Этот CSV-файл можно использовать в отдельных приложениях, например, с использованием GnuPlot, используя предоставленный сценарий GnuPlot. Компонент CAA настраивается с помощью семи настроек: минимальная правильная процентная установка: см. Объяснение выше (выходные разъемы). Вычислить параметр времени выполнения: этот параметр включает или отключает вычисление времени выполнения компонента ЦС. Если это отключено, серия тестов может работать немного быстрее, но время выполнения не будет доступно в результатах в конце. Настройка по оси X: эта установка устанавливает базовое значение, к которому другие измеряемые показатели печатаются относительно через выход данных GnuPlot. Если используется в GnuPlot, это значение на оси X. Установка оси Y: один из показателей можно выбрать с помощью этой настройки. Эта метрика будет напечатана через вывод данных GnuPlot относительно значения, указанного в настройке оси X. Если используется в GnuPlot, это значение на оси Y. Вторая настройка оси Y: с помощью этой настройки можно выбрать вторую метрику. Эта метрика также будет напечатана через вывод данных GnuPlot относительно значения, указанного в настройке оси X. Если используется в GnuPlot, это значение на второй оси Y. Вторая средняя настройка по оси Y: эта настройка включает или отключает среднюю линию, которая похожа на вторую среднюю по оси Y. Нормализовать настройку коэффициента Y-диапазона: этот параметр изменяет только диапазон осей Y, если в них есть одиночные очень высокие или очень низкие значения. Если значение выше (или ниже), чем его соседи более чем на указанное значение, то диапазон Y нормализуется. Это подчеркивает основной диапазон GnuPlot для большинства значений и показывает их подробно. Отклонения обычно заставляют сюжет быть слишком сжатым, чтобы иметь возможность отличать значения, близкие к средним. На следующем рисунке показан полный процесс тестирования компонента CylinderCipherAnalyzer (CCA) в CrypTool 2 с использованием компонента CAA. Первый шаг выделяется зеленым, второй - синим, а третий - красным. Сам компонент CAA выделяется желтым цветом. Этот компонент САА был разработан как часть магистерской диссертации, в которой содержится более подробная информация об этом: «Разработка метода оценки криптоанализа классических шифров в CrypTool 2» Бастиан Хейзер, Университет Касселя - 2017 г. - Магистерская диссертация</usage>
  <usage lang="de-DE">
    Die <b>CAA</b>-Komponente hat vier notwendige Eingabeverbindungen: Schlüssel, Klartext, gesamte Schlüssel, und Geheimtext. Die optionalen Eingaben sind: Samen (Seed), bester Schlüssel, bester Klartext und Evaluations-Behälter (EvaluationContainer).
    <newline /><newline /><b>Schlüssel-Eingabe:</b><newline />
    Der durch die <b>TVG</b>-Komponente generierte Schlüssel.
    <newline /><newline /><b>Klartext-Eingabe:</b><newline />
    Der durch die <b>TVG</b>-Komponente generierte Klartext.
    <newline /><newline /><b>Gesamte-Schlüssel-Eingabe:</b><newline />
    Die Anzahl der Schlüssel bzw. Testläufe, die von der <b>TVG</b>-Komponente generiert werden sollen.
    <newline /><newline /><b>Geheimtext-Eingabe:</b><newline />
    Der durch die <b>Cipher</b>-Komponente verschlüsselte Klartext.
    <newline /><newline /><b>Samen-Eingabe (Seed):</b><newline />
    Dieser Samen sollte derselbe sein wie der aktuell für den <b>TVG</b> verwendete. Er wird protokolliert und mit den finalen Testergebnissen am Ende angezeigt (denn er ist nötig, um die generierten Testvektoren zu reproduzieren).
    <newline /><newline /><b>Bester-Schlüssel-Eingabe:</b><newline />
    Der beste Schlüssel ist der Schlüssel der besten Lösung, die die <b>CA</b>-Komponente finden konnte.
    <newline /><newline /><b>Bester-Klartext-Eingabe:</b><newline />
    Der beste Klartext ist der Klartext der besten Lösung, die die <b>CA</b>-Komponente finden konnte.
    <newline /><newline /><b>Evaluations-Behälter-Eingabe:</b><newline />
    Der Behälter, der alle von der <b>CA</b>-Komponente gesammelten detaillierten Ergebnisse des aktuellen Testlaufs enthält.
    <newline /><newline /><newline />
    Die Ausgabe-Verbindungen der <b>CAA</b>-Komponente sind die folgenden:
    <newline /><newline /><b>Schlüssel-Ausgabe:</b><newline />
    Der Schlüssel, der der <b>Cipher</b>-Komponente zur Verfügung gestellt wird.
    <newline /><newline /><b>Klartext-Ausgabe:</b><newline />
    Der Klartext, der der <b>Cipher</b>- und der <b>CA</b>-Komponente zur Verfügung gestellt wird. Die <b>CA</b>-Komponente benötigt den Klartext (gemeinsam mit der benötigten minimalen Prozentsatz, die im folgenden erklärt wird) nur dann, wenn die Option, den Algorithmus bei Erfolg vorzeitig zu beenden, aktiviert ist.
    <newline /><newline /><b>Minimaler-Korrekter-Prozentsatz-Ausgabe:</b><newline />
    Der Mindest-Prozentsatz, zu dem der entschlüsselte Geheimtext (bester Klartext) mit dem korrekten Klartext übereinstimmen muss, um als eine erfolgreiche Entschlüsselung zu gelten. Dieser Prozentsatz muss für die <b>CA</b>-Komponente bereitgestellt werden (gemeinsam mit dem korrekten Klartext), wenn die Option, den Algorithmus bei Erfolg vorzeitig zu beenden, aktiviert ist.
    <newline /><newline /><b>Nächster-Schlüssel-Ausgabe:</b><newline />
    Diese Ausgabe muss mit der Samenwert-Eingabe (Seed) der <b>TVG</b>-Komponente verbunden werden und wird dort als Samen für den nächsten Testvektor verwendet. Als Samen für den nächsten Testvektor kann der aktuelle Schlüssel oder Klartext verwendet werden (der aktuelle Schlüssel ist der Standardwert). Dadurch wird sichergestellt, dass die nächsten Testvektoren der aktuellen Testserie von den vorherigen abgeleitet werden. Das macht die gesamte Testserie reproduzierbar, wenn derselbe initiale Samen verwendet wird.
    <newline /><newline /><b>Evaluations-Ausgabe:</b><newline />
    Die Evaluations-Ausgabe stellt die errechneten Durchschnittswerte der gesamten Testserie bereit. Enthalten sind die Laufzeit (falls aktiviert), die Erfolgswahrscheinlichkeit, die prozentuale Entschlüsselung der Geheimtexte, die benötigten Entschlüsselungen, und (wenn angegeben) die Neustarts, die Populationsgröße und die Größe des Tabu-Sets.
    <newline /><newline /><b>GnuPlot-Skript-Ausgabe:</b><newline />
    Die Ausgabe des GnuPlot-Skripts kann direkt in einer Datei gespeichert und durch GnuPlot geladen werden, um die Evaluations-Ergebnisse, die durch die GnuPlot-Daten-Ausgabe bereitgestellt werden, zu zeichnen.
    <newline /><newline /><b>GnuPlot-Daten-Ausgabe:</b><newline />
    Diese Ausgabe stellt die detaillerten berechneten Werte der Evaluation der gesamten Testserie bereit, jeweils in Abhängigkeit der Länge des Schlüssels, des Klartextes oder der Laufzeit (falls aktiviert). Diese CSV-Datei (Komma-separierte Werte) kann beispielsweise von GnuPlot genutzt werden, um die Dateien (mit dem generierten GnuPlot-Skript) anzuzeigen. 
    <newline /><newline /><newline />
    Die <b>CAA</b>-Komponente kann mittels folgender sieben Einstellungen angepasst werden:
    <newline /><newline /><b>Minimal-Korrekte-Prozentsatz-Einstellung:</b><newline />
    Siehe die Erklärung oben (bei Ausgabe-Verbindungen).
    <newline /><newline /><b>Berechne-Laufzeit-Einstellung:</b><newline />
    Diese Einstellung aktiviert oder deaktiviert die Berechnung der Laufzeit des <b>CA</b>. Im deaktivierten Zustand wird die Testserie möglicherweise etwas schneller durchlaufen, aber die Laufzeit wird dann nicht in den Ergebnissen verfügbar sein.
    <newline /><newline /><b>X-Achse-Einstellung:</b><newline />
    Diese Einstellung legt den Basis-Wert fest, zu dem alle anderen Metriken relativ mittels des GnuPlot-Daten-Ausgabe ausgegeben werden. Wenn man die GnuPlot-Ausgaben in GnuPlot nutzt, dann ist das der Wert auf der X-Achse.
    <newline /><newline /><b>Y-Achse-Einstellung:</b><newline />
    Eine der Metriken kann mit dieser Einstellung gewählt werden. Diese Metrik wird in der GnuPlot-Daten-Ausgabe relativ zu dem Wert auf der X-Achse ausgegeben. Wenn man die GnuPlot-Ausgaben in GnuPlot nutzt, dann ist das der Wert auf der Y-Achse.
    <newline /><newline /><b>Zweite-Y-Achse-Einstellung:</b><newline />
    Eine zweite Metrik kann mit dieser Einstellung gewählt werden. Diese Metrik wird auch in der GnuPlot-Daten-Ausgabe relativ zu dem Wert auf der X-Achse ausgegeben.
    Wenn man die GnuPlot-Ausgaben in GnuPlot nutzt, dann ist das der Wert auf der zweiten Y-Achse.
    <newline /><newline /><b>Zweite-Y-Achse-Durchschnitts-Einstellung:</b><newline />
    Diese Einstellung aktiviert oder deaktiviert die Durchschnitts-Gerade, die den Durchschnitt der zweiten Y-Achse widerspiegelt.
    <newline /><newline /><b>Normalisiere-Y-Bereich-Faktor-Einstellung:</b><newline />
    Diese Einstellung modifiziert nur den Bereich der Y-Achsen, wenn einzelne sehr hohe oder niedrige Werte existieren. Wenn ein Wert um den hier festgelegten Faktor höher (oder niedriger) ist als seine Nachbarwerte, dann wird der Bereich der Y-Achsen normalisiert. Dadurch wird der Fokus des initialen GnuPlot-Bereichs auf die Mehrzahl der Werte gelegt und zeigt diese im Detail. Starke Ausreißer sorgen sonst dafür, dass der Graph so komprimiert wird, dass die Werte, die nah am Durchschnitt liegen, nicht mehr unterschieden werden können.
    <newline />
    Das folgende Bild visualisiert den vollständigen Test-Prozess der <b>CylinderCipherAnalyzer</b>-Komponente (<b>CCA</b>) in CrypTool 2, durchgeführt von der <b>CAA</b>-Komponente. Der erste Schritt ist grün markiert, der zweite blau und der dritte rot. Die <b>CAA</b>-Komponente selbst ist gelb markiert.
    <newline /><newline /><img src="CryptAnalysisAnalyzer/DetailedDescription/Images/caa-template-final.png" width="100%" /><newline /><newline />
    Diese <b>CAA</b>-Komponente wurde im Rahmen einer Masterarbeit entwickelt. Die Masterarbeit enthält weitere Details hierzu:
    <newline /><newline />

    "<i>Development of an Evaluation Method for Cryptanalysis of Classical Ciphers in CrypTool 2</i>"
    Bastian Heuser, Universität Kassel -- 2017 -- Masterarbeit    
  </usage>
  <presentation lang="en"></presentation>
  <presentation lang="de-DE"></presentation>
</documentation>