<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PluginCaption" xml:space="preserve">
    <value>KPF SHAKE256</value>
  </data>
  <data name="KPFSHAKE256Tooltip" xml:space="preserve">
    <value>Visualisierung der Schlüsselgenerierungsfunktion KPF SHAKE256</value>
  </data>
  <data name="ConfigPresCaption" xml:space="preserve">
    <value>Präsentation aktiv?</value>
  </data>
  <data name="ConfigPresTooltip" xml:space="preserve">
    <value>Aktiviert oder deaktiviert die Präsentation</value>
  </data>
  <data name="ConfigPrintKMToFileCaption" xml:space="preserve">
    <value>Generiertes Schlüsselmaterial in Datei speichern</value>
  </data>
  <data name="ConfigPrintKMToFileTooltip" xml:space="preserve">
    <value>Legt fest, dass das generierte Schlüsselmaterial in einer Datei gespeichert wird, um dieses eventuell in anderen Tools zu verwenden</value>
  </data>
  <data name="InputKeyCaption" xml:space="preserve">
    <value>Key</value>
  </data>
  <data name="InputKeyToolTip" xml:space="preserve">
    <value>Eingabe des Keys</value>
  </data>
  <data name="InputOutputLengthCaption" xml:space="preserve">
    <value>Länge Key Materials (in Byte)</value>
  </data>
  <data name="InputOutputLengthToolTip" xml:space="preserve">
    <value>Länge des zu generierenden Key Materials (in Byte)</value>
  </data>
  <data name="InputSKMCaption" xml:space="preserve">
    <value>Source Key Material</value>
  </data>
  <data name="InputSKMToolTip" xml:space="preserve">
    <value>Eingabe des Source Key Material</value>
  </data>
  <data name="OutputKeyMaterialCaption" xml:space="preserve">
    <value>Key Material</value>
  </data>
  <data name="OutputKeyMaterialToolTip" xml:space="preserve">
    <value>Ausgabe des zu generierenden Schlüsselmaterials</value>
  </data>
  <data name="PresCalc" xml:space="preserve">
    <value>Berechnungschritte überspringen</value>
  </data>
  <data name="PresExplanationSectionHeading" xml:space="preserve">
    <value>KPF SHAKE256</value>
  </data>
  <data name="PresIntro" xml:space="preserve">
    <value>Kapitel überspringen</value>
  </data>
  <data name="PresNext" xml:space="preserve">
    <value>Weiter</value>
  </data>
  <data name="PresSectionIntroductionText" xml:space="preserve">
    <value>&lt;Bold&gt;Eingaben:&lt;/Bold&gt;
&lt;Bold&gt;Quellschlüssel-Material:&lt;/Bold&gt; Spezifiziert das Quellschlüssel-
Material (Source Key Material, SKM).

&lt;Bold&gt;Schlüssel:&lt;/Bold&gt; Spezifiziert den geheimen Schlüssel (Key) zur Berechnung des Schlüsselmaterials. Dieser muss geheim bleiben.

&lt;Bold&gt;Länge des Schlüsselmaterials (in Byte):&lt;/Bold&gt; Spezifiziert die Länge des Schlüsselmaterials in Byte.

&lt;Bold&gt;Ausgaben:&lt;/Bold&gt;
&lt;Bold&gt;Schlüsselmaterial:&lt;/Bold&gt; Nach der Berechnung ist das generierte Schlüsselmaterial (Key Material, KM) im Textfeld zu sehen.</value>
  </data>
  <data name="PresTitleHeading" xml:space="preserve">
    <value>KPF SHAKE256
Eine Schlüsselgenerierungsfunktion mit erweiterbarer Ausgabelänge
</value>
  </data>
  <data name="PrintToFileGroup" xml:space="preserve">
    <value>Speicher-Parameter</value>
  </data>
  <data name="ProcessGroup" xml:space="preserve">
    <value>Konfiguration des Plugin</value>
  </data>
  <data name="SaveFileDialogCaption" xml:space="preserve">
    <value>Speichere Schlüsselmaterial in Datei:</value>
  </data>
  <data name="SaveFileDialogTooltip" xml:space="preserve">
    <value>Spezifiziert die Datei, in der das Schlüsselmaterial gespeichert werden kann</value>
  </data>
  <data name="ExSystemOutOfMemory" xml:space="preserve">
    <value>Bei der Anforderung des Speichers ist ein Fehler auf Ihrem System aufgetreten. Bitte kleineren Wert für die Ausgabelänge spezifizieren.</value>
  </data>
  <data name="PresCalculationSectionHeading" xml:space="preserve">
    <value> Berechnungsphase</value>
  </data>
  <data name="PresCalculationSectionHeadingNum" xml:space="preserve">
    <value>3. Berechnungsphase</value>
  </data>
  <data name="PresCalculationText" xml:space="preserve">
    <value>Eingaben:

SKM: {1} 
Key: {2}

Die Berechnung findet vollständig innerhalb der Hashfunktion SHAKE256 statt.</value>
  </data>
  <data name="PresConstructionPart1Text" xml:space="preserve">
    <value>Die Berechnung des Schlüsselmaterials kann schematisch wie folgt beschrieben werden:</value>
  </data>
  <data name="PresConstructionPart2Text" xml:space="preserve">
    <value>Das Schlüsselmaterial wird durch die Ausführung der um den Schlüssel erweiterten Hashfunktion berechnet. Der Hashfunktion SHAKE256 wird als Parameter die Länge der Ausgabe übergeben. Im Vergleich zu Hashfunktionen mit fester Ausgabelänge ist beim SHAKE256 keine weitere Konstruktion notwendig, um beliebig lange Ausgaben zu erzeugen. Die Generierung eines Hashwertes ist beim SHAKE256 in zwei Phasen eingeteilt, die im folgenden Schaubild zu sehen sind.</value>
  </data>
  <data name="PresConstructionPart3Text" xml:space="preserve">
    <value>Die zwei Phasen heißen &lt;Bold&gt;Absorbing- und Squeezing-Phase&lt;/Bold&gt;. In der &lt;Bold&gt;Absorbing-Phase&lt;/Bold&gt; wird die Eingabe gelesen und es werden verschiedene Operationen ausgeführt.</value>
  </data>
  <data name="PresConstructionPart4Text" xml:space="preserve">
    <value>In der &lt;Bold&gt;Squeezing-Phase&lt;/Bold&gt; wird in Abhängigkeit des Längenparameters entsprechend oft die Funktion f ausgeführt und die gewünschte Länge des Hashwertes generiert.</value>
  </data>
  <data name="PresConstructionScheme" xml:space="preserve">
    <value>KM = H(K || SKM)</value>
  </data>
  <data name="PresConstructionSectionHeading" xml:space="preserve">
    <value>Konstruktion KPF SHA-256</value>
  </data>
  <data name="PresConstructionSectionHeadingNum" xml:space="preserve">
    <value>2. Konstruktion KPF SHA-256</value>
  </data>
  <data name="PresErrorText" xml:space="preserve">
    <value>Es ist ein Fehler aufgetreten. Weitere Informationen sind im Protokoll des CrypTool2 zu finden.</value>
  </data>
  <data name="PresFinishedSectionHeading" xml:space="preserve">
    <value>4. Berechnung beendet</value>
  </data>
  <data name="PresFinishedText" xml:space="preserve">
    <value>Zum Wiederholen der Berechnung gibt es 3 Alternativen: 
Entweder die Ausführung stoppen und wieder starten, eine der Eingaben ändern oder auf den Button "Neustart" klicken. Dann startet die Berechnung automatisch neu.</value>
  </data>
  <data name="PresIntroductionPart1Text" xml:space="preserve">
    <value>Die Funktion KPF SHAKE256 ist eine Schlüsselgenerierungs-
funktion (Key Derivation Function, KDF). Als Pseudozufallsfunktion (Pseudorandom Function, PRF) wird eine Hashfunktion mit Schlüssel verwendet. Dieser Schlüssel wird als Präfix vor die Eingabe gehangen. Als Hashfunktion wird der SHAKE256 verwendet. Diese Hashfunktion ist Teil der SHA-3 Familie. Die Besonderheit dieser Funktion ist, dass die Länge der Ausgabe per Parameter gewählt werden kann. Dies macht es besonders einfach, beliebig lange Schlüssel zu generieren. 

Die SHA-3 Familie kann in der Vorlage Keccak-Hash betrachtet werden.</value>
  </data>
  <data name="PresIntroductionSectionHeading" xml:space="preserve">
    <value>Einführung</value>
  </data>
  <data name="PresIntroductionSectionHeadingNum" xml:space="preserve">
    <value>1. Einführung</value>
  </data>
  <data name="TooMuchOutputRequestedLogMSG" xml:space="preserve">
    <value>Die größte Menge an Ausgabebytes sind 5 MB (5242880 byte). Die angeforderte Menge von {0} byte wurde auf das Maximum gesetzt.</value>
  </data>
  <data name="PresRestart" xml:space="preserve">
    <value>Neustart</value>
  </data>
  <data name="PresStart" xml:space="preserve">
    <value>Start</value>
  </data>
  <data name="PresStepText" xml:space="preserve">
    <value>{0}/{1}</value>
  </data>
</root>