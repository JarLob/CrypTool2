/*
   Copyright 2008-2011 CrypTool 2 Team <ct2contact@cryptool.org>

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using Cryptool.PluginBase;
using Cryptool.PluginBase.Miscellaneous;
using DimCodeEncoder.model;

namespace Cryptool.Plugins.DimCodeEncoder.DimCodes
{
    class DimCode
    {
        protected readonly DimCodeEncoder caller;

        protected DimCode(DimCodeEncoder caller)
        {
            this.caller = caller;
        }

        /// <summary>
        /// extern reachable encode methode
        /// </summary>
        /// <returns> combind a DimCodeReturnValue by using childclass's methods</returns>
        public DimCodeReturnValue Encode(byte[] input, DimCodeEncoderSettings settings)
        {
            input = EnrichInput(input, settings);

            if (VerifyInput(input, settings))
            {
                var pureBitmap = GenerateBitmap(input, settings);

                return new DimCodeReturnValue
                           {
                               Legend = GetLegend(input, settings),
                               PureBitmap = imageToByteArray(pureBitmap),
                               PresentationBitmap = imageToByteArray(GeneratePresentationBitmap(pureBitmap, settings))
                           };
            }
            return null;
        }

        /// <summary>
        /// enrich the prue Bitmap with colors to explain certain areas of the DimCode
        /// </summary>
        /// <param name="pureBitmap"></param>
        /// <param name="settings"></param>
        /// <returns></returns>
        protected virtual Image GeneratePresentationBitmap(Image pureBitmap, DimCodeEncoderSettings settings)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// the legend has to explain the corresponding colors in the presentation Bitmap, generated by child classes
        /// </summary>
        /// <param name="input"></param>
        /// <param name="settings"></param>
        /// <returns></returns>
        protected virtual List<LegendItem> GetLegend(byte[] input, DimCodeEncoderSettings settings)
        {
            throw new NotImplementedException();
        }


        /// <summary>
        /// the origin encode methode each child should override with the dim-code's specific encode methode.
        /// </summary>
        /// <param name="input"></param>
        /// <param name="settings"></param>
        /// <returns>returns the image of the dim-Code</returns>
        protected virtual Image GenerateBitmap(byte[] input, DimCodeEncoderSettings settings)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        ///  each child should override this to tell the enduser what is wrong by using the caller.GuiLogMessage
        /// </summary>
        /// <param name="input"></param>
        /// <param name="settings"></param>
        /// <returns>has to return true if no error occurred</returns>
        protected virtual bool VerifyInput (byte[] input, DimCodeEncoderSettings settings)
        {
            throw new NotImplementedException();
        }
   

        /// <summary>
        /// gives the child class the ability to enrich the input before validating.
        // this may be some kind of integrity check value, or, if your code has a fixed size ,some pad
        /// </summary>
        /// <param name="input"></param>
        /// <returns>enriched Input</returns>
        protected virtual byte[] EnrichInput(byte[] input, DimCodeEncoderSettings settings)
        {
            return input;
        }
        #region helper

      
     
        public byte[] imageToByteArray(System.Drawing.Image imageIn)
        {
            MemoryStream ms = new MemoryStream();
            imageIn.Save(ms, System.Drawing.Imaging.ImageFormat.Bmp);
            return ms.ToArray();
        }

        #endregion helper
     

    }
}
