//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DCAPathFinder.Properties {
    using System;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("DCAPathFinder.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Skip chapter ähnelt.
        /// </summary>
        internal static string BtnSkipChapter {
            get {
                return ResourceManager.GetString("BtnSkipChapter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Choice of the algorithm ähnelt.
        /// </summary>
        internal static string ChoiceOfAlgorithm {
            get {
                return ResourceManager.GetString("ChoiceOfAlgorithm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die At this point one of the algorithms contained in the list can be selected. This algorithm can be examined by differential cryptanalysis. ähnelt.
        /// </summary>
        internal static string ChoiceOfAlgorithmToolTop {
            get {
                return ResourceManager.GetString("ChoiceOfAlgorithmToolTop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Cipher 1: 16 bit blocksize, 2 subkeys, the key consists of 32 bit ähnelt.
        /// </summary>
        internal static string Cipher1 {
            get {
                return ResourceManager.GetString("Cipher1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Cipher 2: 16 bit blocksize, 4 subkeys, the key consists of 64 bit ähnelt.
        /// </summary>
        internal static string Cipher2 {
            get {
                return ResourceManager.GetString("Cipher2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Cipher 3: 16 bit blocksize, 6 subkeys, the key consists of 96 bit ähnelt.
        /// </summary>
        internal static string Cipher3 {
            get {
                return ResourceManager.GetString("Cipher3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Cipher 4: 4 bit blocksize, 4 subkeys, the key consists of 16 bit ähnelt.
        /// </summary>
        internal static string Cipher4 {
            get {
                return ResourceManager.GetString("Cipher4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die In the settings of this component, you can switch between the tutorials. The following is a short description of the ciphers of the individual parts of the tutorial: ähnelt.
        /// </summary>
        internal static string DescriptionContent1 {
            get {
                return ResourceManager.GetString("DescriptionContent1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Tutorial 1 uses cipher 1 of the ToyChiffren component. This cipher works on 16 bit blocks and uses two round keys. One encryption round is executed. In this tutorial two unknown 16 bit round keys are restored. ähnelt.
        /// </summary>
        internal static string DescriptionContent2 {
            get {
                return ResourceManager.GetString("DescriptionContent2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Tutorial 2 uses cipher 2 of the ToyChiffren component. This cipher works on 16 bit blocks and uses four round keys. Three encryption rounds are executed. In this tutorial four unknown 16 bit roundkeys are restored. ähnelt.
        /// </summary>
        internal static string DescriptionContent3 {
            get {
                return ResourceManager.GetString("DescriptionContent3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Tutorial 3 uses cipher 3 of the ToyChiffren component. This cipher works on 16 bit blocks and uses six round keys. Five encryption rounds are executed. In this tutorial six unknown 16 bit round keys are restored. ähnelt.
        /// </summary>
        internal static string DescriptionContent4 {
            get {
                return ResourceManager.GetString("DescriptionContent4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Description of the tutorials ähnelt.
        /// </summary>
        internal static string DescriptionHeader {
            get {
                return ResourceManager.GetString("DescriptionHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Tutorial 1 ähnelt.
        /// </summary>
        internal static string DescriptionSubHeader1 {
            get {
                return ResourceManager.GetString("DescriptionSubHeader1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Tutorial 2 ähnelt.
        /// </summary>
        internal static string DescriptionSubHeader2 {
            get {
                return ResourceManager.GetString("DescriptionSubHeader2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Tutorial 3 ähnelt.
        /// </summary>
        internal static string DescriptionSubHeader3 {
            get {
                return ResourceManager.GetString("DescriptionSubHeader3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Differential cryptanalysis of cipher 1 ähnelt.
        /// </summary>
        internal static string DifferentialCryptanalysisHeader {
            get {
                return ResourceManager.GetString("DifferentialCryptanalysisHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 2. differential cryptanalysis of cipher 1 ähnelt.
        /// </summary>
        internal static string DifferentialCryptanalysisHeader1 {
            get {
                return ResourceManager.GetString("DifferentialCryptanalysisHeader1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die At this point we apply the idea of differential cryptanalysis to cipher 1. The structure of a cipher is usually public, so that all components and their functionality are known. The security of a cipher should never be based on the secrecy of the construction, but on the secrecy of the key. This requirement is also called Kerckhoff&apos;s principle. ähnelt.
        /// </summary>
        internal static string DifferentialCryptanalysisSlide1Content1 {
            get {
                return ResourceManager.GetString("DifferentialCryptanalysisSlide1Content1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Chiffre 1 consists of key addition and substitution. Chiffre 1 consists of key addition and substitution. The structure can be viewed in the ToyCipher component. We now try to restore the two unknown round keys k0 and k1. To do this, we first look at the individual steps of the encryption. First a key addition to the input block is performed with k0. We get: ähnelt.
        /// </summary>
        internal static string DifferentialCryptanalysisSlide1Content2 {
            get {
                return ResourceManager.GetString("DifferentialCryptanalysisSlide1Content2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Subsequently, a substitution by the SBoxes takes place: ähnelt.
        /// </summary>
        internal static string DifferentialCryptanalysisSlide1Content3 {
            get {
                return ResourceManager.GetString("DifferentialCryptanalysisSlide1Content3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Differential cryptanalysis of cipher 1 ähnelt.
        /// </summary>
        internal static string DifferentialCryptanalysisSlide1Header {
            get {
                return ResourceManager.GetString("DifferentialCryptanalysisSlide1Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Finally, a key addition with k1 takes place again: ähnelt.
        /// </summary>
        internal static string DifferentialCryptanalysisSlide2Content1 {
            get {
                return ResourceManager.GetString("DifferentialCryptanalysisSlide2Content1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Differential cryptanalysis of cipher 1 ähnelt.
        /// </summary>
        internal static string DifferentialCryptanalysisSlide2Header {
            get {
                return ResourceManager.GetString("DifferentialCryptanalysisSlide2Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The following figure summarizes the encryption process as outlined above: ähnelt.
        /// </summary>
        internal static string DifferentialCryptanalysisSlide3Content1 {
            get {
                return ResourceManager.GetString("DifferentialCryptanalysisSlide3Content1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Differential cryptanalysis of cipher 1 ähnelt.
        /// </summary>
        internal static string DifferentialCryptanalysisSlide3Header {
            get {
                return ResourceManager.GetString("DifferentialCryptanalysisSlide3Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Expected difference ähnelt.
        /// </summary>
        internal static string ExpectedDifferential {
            get {
                return ResourceManager.GetString("ExpectedDifferential", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die This difference describes the expected value that should occur with a high probability at the previously specified position ( round, SBox). ähnelt.
        /// </summary>
        internal static string ExpectedDifferentialToolTip {
            get {
                return ResourceManager.GetString("ExpectedDifferentialToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 1. IntroductionHeader ähnelt.
        /// </summary>
        internal static string IntroductionHeader {
            get {
                return ResourceManager.GetString("IntroductionHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die In this section we consider the basic idea of differential cryptanalysis. Many symmetric round-based block ciphers consist of three basic operations: Key addition, substitution and permutation. In this section, we limit ourselves to key addition and substitution. ähnelt.
        /// </summary>
        internal static string IntroductionSlide1Content1 {
            get {
                return ResourceManager.GetString("IntroductionSlide1Content1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Many ciphers use the XOR operation (exclusive-OR) for key addition. The XOR operation is a two-digit operator that can be described by the following value table: ähnelt.
        /// </summary>
        internal static string IntroductionSlide1Content2 {
            get {
                return ResourceManager.GetString("IntroductionSlide1Content2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Inputbit A ähnelt.
        /// </summary>
        internal static string IntroductionSlide1DataColHeader1 {
            get {
                return ResourceManager.GetString("IntroductionSlide1DataColHeader1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Inputbit B ähnelt.
        /// </summary>
        internal static string IntroductionSlide1DataColHeader2 {
            get {
                return ResourceManager.GetString("IntroductionSlide1DataColHeader2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Resultbit ähnelt.
        /// </summary>
        internal static string IntroductionSlide1DataColHeader3 {
            get {
                return ResourceManager.GetString("IntroductionSlide1DataColHeader3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Introduction ähnelt.
        /// </summary>
        internal static string IntroductionSlide1Header {
            get {
                return ResourceManager.GetString("IntroductionSlide1Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die If the XOR operation is performed with a message m and key k, the ciphertext is generated: ähnelt.
        /// </summary>
        internal static string IntroductionSlide2Content1 {
            get {
                return ResourceManager.GetString("IntroductionSlide2Content1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The core idea of differential cryptanalysis is now to use the key twice. Let&apos;s look at the impact at this point: ähnelt.
        /// </summary>
        internal static string IntroductionSlide2Content2 {
            get {
                return ResourceManager.GetString("IntroductionSlide2Content2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die We get back the original message m. The XOR operation is often referred to as the difference operator. This is what we will do in this tutorial. ähnelt.
        /// </summary>
        internal static string IntroductionSlide2Content3 {
            get {
                return ResourceManager.GetString("IntroductionSlide2Content3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die In reality, ciphers are more extensive, more complicated and do not consist exclusively of key additions. The
        ///differential cryptanalysis is a so called &quot;chosen plaintext attack&quot;, which means the cryptanalyst can select plaintext messages and encrypt them to have matching plaintext/ciphertext pairs. ähnelt.
        /// </summary>
        internal static string IntroductionSlide2Content4 {
            get {
                return ResourceManager.GetString("IntroductionSlide2Content4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Introduction ähnelt.
        /// </summary>
        internal static string IntroductionSlide2Header {
            get {
                return ResourceManager.GetString("IntroductionSlide2Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die We take advantage of the idea of using the key twice by looking at pairs of messages. Then the following can be calculated: ähnelt.
        /// </summary>
        internal static string IntroductionSlide3Content1 {
            get {
                return ResourceManager.GetString("IntroductionSlide3Content1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die It is valid: ähnelt.
        /// </summary>
        internal static string IntroductionSlide3Content2 {
            get {
                return ResourceManager.GetString("IntroductionSlide3Content2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die In words, we get the difference of the plain texts by calculating the difference of the key texts. ähnelt.
        /// </summary>
        internal static string IntroductionSlide3Content3 {
            get {
                return ResourceManager.GetString("IntroductionSlide3Content3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Introduction ähnelt.
        /// </summary>
        internal static string IntroductionSlide3Header {
            get {
                return ResourceManager.GetString("IntroductionSlide3Header", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Count of messages ähnelt.
        /// </summary>
        internal static string MessageCount {
            get {
                return ResourceManager.GetString("MessageCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Number of messages the oracle should generate ähnelt.
        /// </summary>
        internal static string MessageCountToolTip {
            get {
                return ResourceManager.GetString("MessageCountToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Welcome to the differential cryptanalysis tutorial. This method for the analysis of round-based symmetric block ciphers aims at recovering single bits up to complete round keys. This method was published in 1991 by the two Israeli researchers, Eli Biham and Adi Shamir. ähnelt.
        /// </summary>
        internal static string OverviewContent1 {
            get {
                return ResourceManager.GetString("OverviewContent1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die This tutorial deals with the DCA procedure in three parts. Part 1 teaches the basic idea of differential cryptanalysis (DCA) using a cipher with an encryption round. Part 2 deepens this idea using a cipher with three encryption rounds. Part three deepens the knowledge by increasing the complexity of the cipher to 5 encryption rounds. In part three the knowledge is deepened by increasing the complexity of the cipher to 5 encryption rounds. ähnelt.
        /// </summary>
        internal static string OverviewContent2 {
            get {
                return ResourceManager.GetString("OverviewContent2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die In the configuration of this component the different parts of the tutorial can be selected. ähnelt.
        /// </summary>
        internal static string OverviewContent3 {
            get {
                return ResourceManager.GetString("OverviewContent3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Have fun trying out and breaking the ciphers! ähnelt.
        /// </summary>
        internal static string OverviewContent4 {
            get {
                return ResourceManager.GetString("OverviewContent4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die (This introduction can be skipped by starting the workspace) ähnelt.
        /// </summary>
        internal static string OverviewContent5 {
            get {
                return ResourceManager.GetString("OverviewContent5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Differential Cryptanalysis Tutorial ähnelt.
        /// </summary>
        internal static string OverviewHeader {
            get {
                return ResourceManager.GetString("OverviewHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Path of the characteristic ähnelt.
        /// </summary>
        internal static string Path {
            get {
                return ResourceManager.GetString("Path", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die These values describe the flow of the difference values through a cipher.  ähnelt.
        /// </summary>
        internal static string PathToolTip {
            get {
                return ResourceManager.GetString("PathToolTip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die DCA PathFinder ähnelt.
        /// </summary>
        internal static string PluginCaption {
            get {
                return ResourceManager.GetString("PluginCaption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The DCA PathFinder component searches for differentials in a symmetric block cipher depending on parameters specified by the user. ähnelt.
        /// </summary>
        internal static string PluginTooltip {
            get {
                return ResourceManager.GetString("PluginTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The tutorial starts when you start the workspace. ähnelt.
        /// </summary>
        internal static string StartMaskContent1 {
            get {
                return ResourceManager.GetString("StartMaskContent1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die You have currently selected Tutorial {0}. ähnelt.
        /// </summary>
        internal static string StartMaskContent2 {
            get {
                return ResourceManager.GetString("StartMaskContent2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Ready for execution ähnelt.
        /// </summary>
        internal static string StartMaskHeader {
            get {
                return ResourceManager.GetString("StartMaskHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Tutorial differential cryptanalysis of symmetric block ciphers ähnelt.
        /// </summary>
        internal static string TitleHeader {
            get {
                return ResourceManager.GetString("TitleHeader", resourceCulture);
            }
        }
    }
}
