<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BtnSkipChapter" xml:space="preserve">
    <value>Skip chapter</value>
  </data>
  <data name="ChoiceOfAlgorithm" xml:space="preserve">
    <value>Choice of the algorithm</value>
  </data>
  <data name="ChoiceOfAlgorithmToolTop" xml:space="preserve">
    <value>At this point one of the algorithms contained in the list can be selected. This algorithm can be examined by differential cryptanalysis.</value>
  </data>
  <data name="Cipher1" xml:space="preserve">
    <value>Cipher 1: 16 bit blocksize, 2 subkeys, the key consists of 32 bit</value>
  </data>
  <data name="Cipher2" xml:space="preserve">
    <value>Cipher 2: 16 bit blocksize, 4 subkeys, the key consists of 64 bit</value>
  </data>
  <data name="Cipher3" xml:space="preserve">
    <value>Cipher 3: 16 bit blocksize, 6 subkeys, the key consists of 96 bit</value>
  </data>
  <data name="Cipher4" xml:space="preserve">
    <value>Cipher 4: 4 bit blocksize, 4 subkeys, the key consists of 16 bit</value>
  </data>
  <data name="DescriptionContent1" xml:space="preserve">
    <value>In the settings of this component, you can switch between the tutorials. The following is a short description of the ciphers of the individual parts of the tutorial:</value>
  </data>
  <data name="DescriptionContent2" xml:space="preserve">
    <value>Tutorial 1 uses cipher 1 of the ToyChiffren component. This cipher works on 16 bit blocks and uses two round keys. One encryption round is executed. In this tutorial two unknown 16 bit round keys are restored.</value>
  </data>
  <data name="DescriptionContent3" xml:space="preserve">
    <value>Tutorial 2 uses cipher 2 of the ToyChiffren component. This cipher works on 16 bit blocks and uses four round keys. Three encryption rounds are executed. In this tutorial four unknown 16 bit roundkeys are restored.</value>
  </data>
  <data name="DescriptionContent4" xml:space="preserve">
    <value>Tutorial 3 uses cipher 3 of the ToyChiffren component. This cipher works on 16 bit blocks and uses six round keys. Five encryption rounds are executed. In this tutorial six unknown 16 bit round keys are restored.</value>
  </data>
  <data name="DescriptionHeader" xml:space="preserve">
    <value>Description of the tutorials</value>
  </data>
  <data name="DescriptionSubHeader1" xml:space="preserve">
    <value>Tutorial 1</value>
  </data>
  <data name="DescriptionSubHeader2" xml:space="preserve">
    <value>Tutorial 2</value>
  </data>
  <data name="DescriptionSubHeader3" xml:space="preserve">
    <value>Tutorial 3</value>
  </data>
  <data name="DifferentialCryptanalysisHeader" xml:space="preserve">
    <value>Differential cryptanalysis of cipher 1</value>
  </data>
  <data name="DifferentialCryptanalysisHeader1" xml:space="preserve">
    <value>2. differential cryptanalysis of cipher 1</value>
  </data>
  <data name="DifferentialCryptanalysisSlide1Content1" xml:space="preserve">
    <value>At this point we apply the idea of differential cryptanalysis to cipher 1. The structure of a cipher is usually public, so that all components and their functionality are known. The security of a cipher should never be based on the secrecy of the construction, but on the secrecy of the key. This requirement is also called Kerckhoff's principle.</value>
  </data>
  <data name="DifferentialCryptanalysisSlide1Content2" xml:space="preserve">
    <value>Chiffre 1 consists of key addition and substitution. Chiffre 1 consists of key addition and substitution. The structure can be viewed in the ToyCipher component. We now try to restore the two unknown round keys k0 and k1. To do this, we first look at the individual steps of the encryption. First a key addition to the input block is performed with k0. We get:</value>
  </data>
  <data name="DifferentialCryptanalysisSlide1Content3" xml:space="preserve">
    <value>Subsequently, a substitution by the SBoxes takes place:</value>
  </data>
  <data name="DifferentialCryptanalysisSlide1Header" xml:space="preserve">
    <value>Differential cryptanalysis of cipher 1</value>
  </data>
  <data name="DifferentialCryptanalysisSlide2Content1" xml:space="preserve">
    <value>Finally, a key addition with k1 takes place again:</value>
  </data>
  <data name="DifferentialCryptanalysisSlide2Header" xml:space="preserve">
    <value>Differential cryptanalysis of cipher 1</value>
  </data>
  <data name="DifferentialCryptanalysisSlide3Content1" xml:space="preserve">
    <value>The following figure summarizes the encryption process as outlined above:</value>
  </data>
  <data name="DifferentialCryptanalysisSlide3Header" xml:space="preserve">
    <value>Differential cryptanalysis of cipher 1</value>
  </data>
  <data name="ExpectedDifferential" xml:space="preserve">
    <value>Expected difference</value>
  </data>
  <data name="ExpectedDifferentialToolTip" xml:space="preserve">
    <value>This difference describes the expected value that should occur with a high probability at the previously specified position ( round, SBox).</value>
  </data>
  <data name="IntroductionHeader" xml:space="preserve">
    <value>1. IntroductionHeader</value>
  </data>
  <data name="IntroductionSlide1Content1" xml:space="preserve">
    <value>In this section we consider the basic idea of differential cryptanalysis. Many symmetric round-based block ciphers consist of three basic operations: Key addition, substitution and permutation. In this section, we limit ourselves to key addition and substitution.</value>
  </data>
  <data name="IntroductionSlide1Content2" xml:space="preserve">
    <value>Many ciphers use the XOR operation (exclusive-OR) for key addition. The XOR operation is a two-digit operator that can be described by the following value table:</value>
  </data>
  <data name="IntroductionSlide1DataColHeader1" xml:space="preserve">
    <value>Inputbit A</value>
  </data>
  <data name="IntroductionSlide1DataColHeader2" xml:space="preserve">
    <value>Inputbit B</value>
  </data>
  <data name="IntroductionSlide1DataColHeader3" xml:space="preserve">
    <value>Resultbit</value>
  </data>
  <data name="IntroductionSlide1Header" xml:space="preserve">
    <value>Introduction</value>
  </data>
  <data name="IntroductionSlide2Content1" xml:space="preserve">
    <value>If the XOR operation is performed with a message m and key k, the ciphertext is generated:</value>
  </data>
  <data name="IntroductionSlide2Content2" xml:space="preserve">
    <value>The core idea of differential cryptanalysis is now to use the key twice. Let's look at the impact at this point:</value>
  </data>
  <data name="IntroductionSlide2Content3" xml:space="preserve">
    <value>We get back the original message m. The XOR operation is often referred to as the difference operator. This is what we will do in this tutorial.</value>
  </data>
  <data name="IntroductionSlide2Content4" xml:space="preserve">
    <value>In reality, ciphers are more extensive, more complicated and do not consist exclusively of key additions. The
differential cryptanalysis is a so called "chosen plaintext attack", which means the cryptanalyst can select plaintext messages and encrypt them to have matching plaintext/ciphertext pairs.</value>
  </data>
  <data name="IntroductionSlide2Header" xml:space="preserve">
    <value>Introduction</value>
  </data>
  <data name="IntroductionSlide3Content1" xml:space="preserve">
    <value>We take advantage of the idea of using the key twice by looking at pairs of messages. Then the following can be calculated:</value>
  </data>
  <data name="IntroductionSlide3Content2" xml:space="preserve">
    <value>It is valid:</value>
  </data>
  <data name="IntroductionSlide3Content3" xml:space="preserve">
    <value>In words, we get the difference of the plain texts by calculating the difference of the key texts.</value>
  </data>
  <data name="IntroductionSlide3Header" xml:space="preserve">
    <value>Introduction</value>
  </data>
  <data name="MessageCount" xml:space="preserve">
    <value>Count of messages</value>
  </data>
  <data name="MessageCountToolTip" xml:space="preserve">
    <value>Number of messages the oracle should generate</value>
  </data>
  <data name="OverviewContent1" xml:space="preserve">
    <value>Welcome to the differential cryptanalysis tutorial. This method for the analysis of round-based symmetric block ciphers aims at recovering single bits up to complete round keys. This method was published in 1991 by the two Israeli researchers, Eli Biham and Adi Shamir.</value>
  </data>
  <data name="OverviewContent2" xml:space="preserve">
    <value>This tutorial deals with the DCA procedure in three parts. Part 1 teaches the basic idea of differential cryptanalysis (DCA) using a cipher with an encryption round. Part 2 deepens this idea using a cipher with three encryption rounds. Part three deepens the knowledge by increasing the complexity of the cipher to 5 encryption rounds. In part three the knowledge is deepened by increasing the complexity of the cipher to 5 encryption rounds.</value>
  </data>
  <data name="OverviewContent3" xml:space="preserve">
    <value>In the configuration of this component the different parts of the tutorial can be selected.</value>
  </data>
  <data name="OverviewContent4" xml:space="preserve">
    <value>Have fun trying out and breaking the ciphers!</value>
  </data>
  <data name="OverviewContent5" xml:space="preserve">
    <value>(This introduction can be skipped by starting the workspace)</value>
  </data>
  <data name="OverviewHeader" xml:space="preserve">
    <value>Differential Cryptanalysis Tutorial</value>
  </data>
  <data name="Path" xml:space="preserve">
    <value>Path of the characteristic</value>
  </data>
  <data name="PathToolTip" xml:space="preserve">
    <value>These values describe the flow of the difference values through a cipher. </value>
  </data>
  <data name="PluginCaption" xml:space="preserve">
    <value>DCA PathFinder</value>
  </data>
  <data name="PluginTooltip" xml:space="preserve">
    <value>The DCA PathFinder component searches for differentials in a symmetric block cipher depending on parameters specified by the user.</value>
  </data>
  <data name="StartMaskContent1" xml:space="preserve">
    <value>The tutorial starts when you start the workspace.</value>
  </data>
  <data name="StartMaskContent2" xml:space="preserve">
    <value>You have currently selected Tutorial {0}.</value>
  </data>
  <data name="StartMaskHeader" xml:space="preserve">
    <value>Ready for execution</value>
  </data>
  <data name="TitleHeader" xml:space="preserve">
    <value>Tutorial differential cryptanalysis of symmetric block ciphers</value>
  </data>
</root>